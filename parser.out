Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    AMPERSANT
    AND
    ARRAY
    ASSIGN
    CALLABLE
    CATH
    CLASS
    CLONE
    COMILLASDOBLES
    COMILLASIMPLE
    CONST
    CONTINUE
    DECLARE
    DIE
    DO
    DOLLAR
    DOT
    EMPTY
    ENDDECLARE
    ENDFOR
    ENDFOREACH
    ENDIF
    ENDSWITCH
    ENDWHILE
    EVAL
    EXIT
    EXTENDS
    FINAL
    FINALLY
    FN
    GLOBAL
    GOTO
    HASHTAG
    ID
    IMPLEMENTS
    INCLUDE
    INCLUDE_ONCE
    INSTANCEOF
    INSTEADOF
    INTERFACE
    ISSET
    LIST
    MATCH
    MINUSEQUAL
    MOD
    NAMESPACE
    NEW
    OR
    PLUSEQUAL
    PRINT
    PRIVATE
    PROTECTED
    PUBLIC
    REQUIRE
    REQUIRE_ONCE
    STATIC
    THIS
    THROW
    TRAIT
    TRY
    UNSET
    USE
    VAR
    XOR

Grammar

Rule 0     S' -> program
Rule 1     program -> header_declaration declaration_list footer_declaration
Rule 2     declaration_list -> declaration_list declaration
Rule 3     declaration_list -> declaration
Rule 4     declaration -> var_declaration
Rule 5     declaration -> selection_stmt
Rule 6     declaration -> iteration_stmt
Rule 7     declaration -> fun_declaration
Rule 8     declaration -> show_in_screen
Rule 9     declaration -> expression_stmt
Rule 10    header_declaration -> LESS QUESTIONMARK PHP
Rule 11    footer_declaration -> QUESTIONMARK GREATER
Rule 12    show_in_screen -> ECHO var_val SEMICOLON
Rule 13    show_in_screen -> ECHO CADENA1 SEMICOLON
Rule 14    show_in_screen -> ECHO selection_stmt
Rule 15    var_declaration -> var_declaration2 SEMICOLON
Rule 16    var_declaration -> VARIABLE LBRACKET NUMBER RBRACKET SEMICOLON
Rule 17    var_declaration2 -> VARIABLE
Rule 18    var_declaration2 -> VARIABLE COMMA var_declaration2
Rule 19    var_declaration2 -> VARIABLE EQUAL NUMBER COMMA var_declaration2
Rule 20    var_declaration2 -> VARIABLE EQUAL NUMBER
Rule 21    var_declaration2 -> VARIABLE EQUAL VARIABLE COMMA var_declaration2
Rule 22    var_declaration2 -> VARIABLE EQUAL VARIABLE
Rule 23    var_declaration2 -> COMMA
Rule 24    var_declaration2 -> VARIABLE EQUAL VARIABLE simple_expression
Rule 25    var_declaration2 -> VARIABLE EQUAL LBRACKET NUMBER COMMA var_declaration2
Rule 26    var_declaration2 -> NUMBER COMMA var_declaration2
Rule 27    var_declaration2 -> NUMBER RBRACKET
Rule 28    var_declaration2 -> VARIABLE EQUAL LBRACKET CADENA1 COMMA var_declaration2
Rule 29    var_declaration2 -> CADENA1 COMMA var_declaration2
Rule 30    var_declaration2 -> CADENA1 RBRACKET
Rule 31    fun_declaration -> FUNCTION VARIABLE2 LPAREN params RPAREN statement
Rule 32    params -> param_list
Rule 33    param_list -> param_list COMMA param
Rule 34    param_list -> param
Rule 35    param -> VARIABLE
Rule 36    param -> VARIABLE LBRACKET RBRACKET
Rule 37    param -> empty_function
Rule 38    compount_stmt -> LBLOCK local_declarations statement_list RBLOCK
Rule 39    local_declarations -> var_declaration
Rule 40    local_declarations -> empty_function
Rule 41    statement_list -> statement_list statement
Rule 42    statement_list -> statement
Rule 43    statement_list -> empty_function
Rule 44    statement -> expression_stmt
Rule 45    statement -> compount_stmt
Rule 46    statement -> selection_stmt
Rule 47    statement -> iteration_stmt
Rule 48    statement -> show_in_screen
Rule 49    statement -> return_stmt
Rule 50    expression_stmt -> expression SEMICOLON
Rule 51    expression_stmt -> SEMICOLON
Rule 52    selection_stmt -> IF LPAREN expression RPAREN statement
Rule 53    selection_stmt -> IF LPAREN expression RPAREN statement ELSE statement
Rule 54    selection_stmt -> IF LPAREN expression RPAREN statement ELSEIF statement
Rule 55    selection_stmt -> SWITCH LPAREN var_val RPAREN statement
Rule 56    selection_stmt -> CASE NUMBER COLON statement BREAK SEMICOLON
Rule 57    selection_stmt -> DEFAULT COLON statement BREAK SEMICOLON
Rule 58    selection_stmt -> VARIABLE relop VARIABLE QUESTIONMARK expression COLON expression SEMICOLON
Rule 59    iteration_stmt -> WHILE LPAREN expression RPAREN statement
Rule 60    iteration_stmt -> FOR LPAREN var_declaration2 SEMICOLON expression SEMICOLON additive_expression RPAREN statement
Rule 61    iteration_stmt -> FOREACH LPAREN var_val AS var_val RPAREN statement
Rule 62    return_stmt -> RETURN SEMICOLON
Rule 63    return_stmt -> RETURN expression SEMICOLON
Rule 64    expression -> var_val EQUAL expression
Rule 65    expression -> simple_expression
Rule 66    var_val -> VARIABLE
Rule 67    var_val -> VARIABLE LBRACKET expression RBRACKET
Rule 68    simple_expression -> additive_expression relop additive_expression
Rule 69    simple_expression -> additive_expression
Rule 70    relop -> LESS
Rule 71    relop -> LESSEQUAL
Rule 72    relop -> GREATER
Rule 73    relop -> GREATEREQUAL
Rule 74    relop -> DEQUAL
Rule 75    relop -> DISTINT
Rule 76    relop -> ISEQUAL
Rule 77    additive_expression -> additive_expression addop term
Rule 78    additive_expression -> term
Rule 79    additive_expression -> term MINUSMINUS
Rule 80    additive_expression -> term PLUSPLUS
Rule 81    additive_expression -> addop term
Rule 82    addop -> PLUS
Rule 83    addop -> MINUS
Rule 84    term -> term mulop factor
Rule 85    term -> factor
Rule 86    term -> CADENA1
Rule 87    term -> CADENA2
Rule 88    mulop -> TIMES
Rule 89    mulop -> DIVIDE
Rule 90    factor -> LPAREN expression RPAREN
Rule 91    factor -> var_val
Rule 92    factor -> call
Rule 93    factor -> NUMBER
Rule 94    call -> VARIABLE2 LPAREN args RPAREN
Rule 95    args -> args_list
Rule 96    args -> empty_function
Rule 97    args_list -> args_list COMMA expression
Rule 98    args_list -> expression
Rule 99    empty_function -> <empty>

Terminals, with rules where they appear

AMPERSANT            : 
AND                  : 
ARRAY                : 
AS                   : 61
ASSIGN               : 
BREAK                : 56 57
CADENA1              : 13 28 29 30 86
CADENA2              : 87
CALLABLE             : 
CASE                 : 56
CATH                 : 
CLASS                : 
CLONE                : 
COLON                : 56 57 58
COMILLASDOBLES       : 
COMILLASIMPLE        : 
COMMA                : 18 19 21 23 25 26 28 29 33 97
CONST                : 
CONTINUE             : 
DECLARE              : 
DEFAULT              : 57
DEQUAL               : 74
DIE                  : 
DISTINT              : 75
DIVIDE               : 89
DO                   : 
DOLLAR               : 
DOT                  : 
ECHO                 : 12 13 14
ELSE                 : 53
ELSEIF               : 54
EMPTY                : 
ENDDECLARE           : 
ENDFOR               : 
ENDFOREACH           : 
ENDIF                : 
ENDSWITCH            : 
ENDWHILE             : 
EQUAL                : 19 20 21 22 24 25 28 64
EVAL                 : 
EXIT                 : 
EXTENDS              : 
FINAL                : 
FINALLY              : 
FN                   : 
FOR                  : 60
FOREACH              : 61
FUNCTION             : 31
GLOBAL               : 
GOTO                 : 
GREATER              : 11 72
GREATEREQUAL         : 73
HASHTAG              : 
ID                   : 
IF                   : 52 53 54
IMPLEMENTS           : 
INCLUDE              : 
INCLUDE_ONCE         : 
INSTANCEOF           : 
INSTEADOF            : 
INTERFACE            : 
ISEQUAL              : 76
ISSET                : 
LBLOCK               : 38
LBRACKET             : 16 25 28 36 67
LESS                 : 10 70
LESSEQUAL            : 71
LIST                 : 
LPAREN               : 31 52 53 54 55 59 60 61 90 94
MATCH                : 
MINUS                : 83
MINUSEQUAL           : 
MINUSMINUS           : 79
MOD                  : 
NAMESPACE            : 
NEW                  : 
NUMBER               : 16 19 20 25 26 27 56 93
OR                   : 
PHP                  : 10
PLUS                 : 82
PLUSEQUAL            : 
PLUSPLUS             : 80
PRINT                : 
PRIVATE              : 
PROTECTED            : 
PUBLIC               : 
QUESTIONMARK         : 10 11 58
RBLOCK               : 38
RBRACKET             : 16 27 30 36 67
REQUIRE              : 
REQUIRE_ONCE         : 
RETURN               : 62 63
RPAREN               : 31 52 53 54 55 59 60 61 90 94
SEMICOLON            : 12 13 15 16 50 51 56 57 58 60 60 62 63
STATIC               : 
SWITCH               : 55
THIS                 : 
THROW                : 
TIMES                : 88
TRAIT                : 
TRY                  : 
UNSET                : 
USE                  : 
VAR                  : 
VARIABLE             : 16 17 18 19 20 21 21 22 22 24 24 25 28 35 36 58 58 66 67
VARIABLE2            : 31 94
WHILE                : 59
XOR                  : 
error                : 

Nonterminals, with rules where they appear

additive_expression  : 60 68 68 69 77
addop                : 77 81
args                 : 94
args_list            : 95 97
call                 : 92
compount_stmt        : 45
declaration          : 2 3
declaration_list     : 1 2
empty_function       : 37 40 43 96
expression           : 50 52 53 54 58 58 59 60 63 64 67 90 97 98
expression_stmt      : 9 44
factor               : 84 85
footer_declaration   : 1
fun_declaration      : 7
header_declaration   : 1
iteration_stmt       : 6 47
local_declarations   : 38
mulop                : 84
param                : 33 34
param_list           : 32 33
params               : 31
program              : 0
relop                : 58 68
return_stmt          : 49
selection_stmt       : 5 14 46
show_in_screen       : 8 48
simple_expression    : 24 65
statement            : 31 41 42 52 53 53 54 54 55 56 57 59 60 61
statement_list       : 38 41
term                 : 77 78 79 80 81 84
var_declaration      : 4 39
var_declaration2     : 15 18 19 21 25 26 28 29 60
var_val              : 12 55 61 61 64 91

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . header_declaration declaration_list footer_declaration
    (10) header_declaration -> . LESS QUESTIONMARK PHP

    LESS            shift and go to state 3

    program                        shift and go to state 1
    header_declaration             shift and go to state 2

state 1

    (0) S' -> program .



state 2

    (1) program -> header_declaration . declaration_list footer_declaration
    (2) declaration_list -> . declaration_list declaration
    (3) declaration_list -> . declaration
    (4) declaration -> . var_declaration
    (5) declaration -> . selection_stmt
    (6) declaration -> . iteration_stmt
    (7) declaration -> . fun_declaration
    (8) declaration -> . show_in_screen
    (9) declaration -> . expression_stmt
    (15) var_declaration -> . var_declaration2 SEMICOLON
    (16) var_declaration -> . VARIABLE LBRACKET NUMBER RBRACKET SEMICOLON
    (52) selection_stmt -> . IF LPAREN expression RPAREN statement
    (53) selection_stmt -> . IF LPAREN expression RPAREN statement ELSE statement
    (54) selection_stmt -> . IF LPAREN expression RPAREN statement ELSEIF statement
    (55) selection_stmt -> . SWITCH LPAREN var_val RPAREN statement
    (56) selection_stmt -> . CASE NUMBER COLON statement BREAK SEMICOLON
    (57) selection_stmt -> . DEFAULT COLON statement BREAK SEMICOLON
    (58) selection_stmt -> . VARIABLE relop VARIABLE QUESTIONMARK expression COLON expression SEMICOLON
    (59) iteration_stmt -> . WHILE LPAREN expression RPAREN statement
    (60) iteration_stmt -> . FOR LPAREN var_declaration2 SEMICOLON expression SEMICOLON additive_expression RPAREN statement
    (61) iteration_stmt -> . FOREACH LPAREN var_val AS var_val RPAREN statement
    (31) fun_declaration -> . FUNCTION VARIABLE2 LPAREN params RPAREN statement
    (12) show_in_screen -> . ECHO var_val SEMICOLON
    (13) show_in_screen -> . ECHO CADENA1 SEMICOLON
    (14) show_in_screen -> . ECHO selection_stmt
    (50) expression_stmt -> . expression SEMICOLON
    (51) expression_stmt -> . SEMICOLON
    (17) var_declaration2 -> . VARIABLE
    (18) var_declaration2 -> . VARIABLE COMMA var_declaration2
    (19) var_declaration2 -> . VARIABLE EQUAL NUMBER COMMA var_declaration2
    (20) var_declaration2 -> . VARIABLE EQUAL NUMBER
    (21) var_declaration2 -> . VARIABLE EQUAL VARIABLE COMMA var_declaration2
    (22) var_declaration2 -> . VARIABLE EQUAL VARIABLE
    (23) var_declaration2 -> . COMMA
    (24) var_declaration2 -> . VARIABLE EQUAL VARIABLE simple_expression
    (25) var_declaration2 -> . VARIABLE EQUAL LBRACKET NUMBER COMMA var_declaration2
    (26) var_declaration2 -> . NUMBER COMMA var_declaration2
    (27) var_declaration2 -> . NUMBER RBRACKET
    (28) var_declaration2 -> . VARIABLE EQUAL LBRACKET CADENA1 COMMA var_declaration2
    (29) var_declaration2 -> . CADENA1 COMMA var_declaration2
    (30) var_declaration2 -> . CADENA1 RBRACKET
    (64) expression -> . var_val EQUAL expression
    (65) expression -> . simple_expression
    (66) var_val -> . VARIABLE
    (67) var_val -> . VARIABLE LBRACKET expression RBRACKET
    (68) simple_expression -> . additive_expression relop additive_expression
    (69) simple_expression -> . additive_expression
    (77) additive_expression -> . additive_expression addop term
    (78) additive_expression -> . term
    (79) additive_expression -> . term MINUSMINUS
    (80) additive_expression -> . term PLUSPLUS
    (81) additive_expression -> . addop term
    (84) term -> . term mulop factor
    (85) term -> . factor
    (86) term -> . CADENA1
    (87) term -> . CADENA2
    (82) addop -> . PLUS
    (83) addop -> . MINUS
    (90) factor -> . LPAREN expression RPAREN
    (91) factor -> . var_val
    (92) factor -> . call
    (93) factor -> . NUMBER
    (94) call -> . VARIABLE2 LPAREN args RPAREN

    VARIABLE        shift and go to state 14
    IF              shift and go to state 16
    SWITCH          shift and go to state 19
    CASE            shift and go to state 21
    DEFAULT         shift and go to state 22
    WHILE           shift and go to state 23
    FOR             shift and go to state 24
    FOREACH         shift and go to state 26
    FUNCTION        shift and go to state 27
    ECHO            shift and go to state 29
    SEMICOLON       shift and go to state 13
    COMMA           shift and go to state 31
    NUMBER          shift and go to state 15
    CADENA1         shift and go to state 30
    CADENA2         shift and go to state 36
    PLUS            shift and go to state 37
    MINUS           shift and go to state 38
    LPAREN          shift and go to state 17
    VARIABLE2       shift and go to state 28

    declaration_list               shift and go to state 4
    declaration                    shift and go to state 5
    var_declaration                shift and go to state 6
    selection_stmt                 shift and go to state 7
    iteration_stmt                 shift and go to state 8
    fun_declaration                shift and go to state 9
    show_in_screen                 shift and go to state 10
    expression_stmt                shift and go to state 11
    var_declaration2               shift and go to state 12
    expression                     shift and go to state 18
    var_val                        shift and go to state 20
    additive_expression            shift and go to state 25
    simple_expression              shift and go to state 32
    addop                          shift and go to state 33
    term                           shift and go to state 34
    factor                         shift and go to state 35
    call                           shift and go to state 39

state 3

    (10) header_declaration -> LESS . QUESTIONMARK PHP

    QUESTIONMARK    shift and go to state 40


state 4

    (1) program -> header_declaration declaration_list . footer_declaration
    (2) declaration_list -> declaration_list . declaration
    (11) footer_declaration -> . QUESTIONMARK GREATER
    (4) declaration -> . var_declaration
    (5) declaration -> . selection_stmt
    (6) declaration -> . iteration_stmt
    (7) declaration -> . fun_declaration
    (8) declaration -> . show_in_screen
    (9) declaration -> . expression_stmt
    (15) var_declaration -> . var_declaration2 SEMICOLON
    (16) var_declaration -> . VARIABLE LBRACKET NUMBER RBRACKET SEMICOLON
    (52) selection_stmt -> . IF LPAREN expression RPAREN statement
    (53) selection_stmt -> . IF LPAREN expression RPAREN statement ELSE statement
    (54) selection_stmt -> . IF LPAREN expression RPAREN statement ELSEIF statement
    (55) selection_stmt -> . SWITCH LPAREN var_val RPAREN statement
    (56) selection_stmt -> . CASE NUMBER COLON statement BREAK SEMICOLON
    (57) selection_stmt -> . DEFAULT COLON statement BREAK SEMICOLON
    (58) selection_stmt -> . VARIABLE relop VARIABLE QUESTIONMARK expression COLON expression SEMICOLON
    (59) iteration_stmt -> . WHILE LPAREN expression RPAREN statement
    (60) iteration_stmt -> . FOR LPAREN var_declaration2 SEMICOLON expression SEMICOLON additive_expression RPAREN statement
    (61) iteration_stmt -> . FOREACH LPAREN var_val AS var_val RPAREN statement
    (31) fun_declaration -> . FUNCTION VARIABLE2 LPAREN params RPAREN statement
    (12) show_in_screen -> . ECHO var_val SEMICOLON
    (13) show_in_screen -> . ECHO CADENA1 SEMICOLON
    (14) show_in_screen -> . ECHO selection_stmt
    (50) expression_stmt -> . expression SEMICOLON
    (51) expression_stmt -> . SEMICOLON
    (17) var_declaration2 -> . VARIABLE
    (18) var_declaration2 -> . VARIABLE COMMA var_declaration2
    (19) var_declaration2 -> . VARIABLE EQUAL NUMBER COMMA var_declaration2
    (20) var_declaration2 -> . VARIABLE EQUAL NUMBER
    (21) var_declaration2 -> . VARIABLE EQUAL VARIABLE COMMA var_declaration2
    (22) var_declaration2 -> . VARIABLE EQUAL VARIABLE
    (23) var_declaration2 -> . COMMA
    (24) var_declaration2 -> . VARIABLE EQUAL VARIABLE simple_expression
    (25) var_declaration2 -> . VARIABLE EQUAL LBRACKET NUMBER COMMA var_declaration2
    (26) var_declaration2 -> . NUMBER COMMA var_declaration2
    (27) var_declaration2 -> . NUMBER RBRACKET
    (28) var_declaration2 -> . VARIABLE EQUAL LBRACKET CADENA1 COMMA var_declaration2
    (29) var_declaration2 -> . CADENA1 COMMA var_declaration2
    (30) var_declaration2 -> . CADENA1 RBRACKET
    (64) expression -> . var_val EQUAL expression
    (65) expression -> . simple_expression
    (66) var_val -> . VARIABLE
    (67) var_val -> . VARIABLE LBRACKET expression RBRACKET
    (68) simple_expression -> . additive_expression relop additive_expression
    (69) simple_expression -> . additive_expression
    (77) additive_expression -> . additive_expression addop term
    (78) additive_expression -> . term
    (79) additive_expression -> . term MINUSMINUS
    (80) additive_expression -> . term PLUSPLUS
    (81) additive_expression -> . addop term
    (84) term -> . term mulop factor
    (85) term -> . factor
    (86) term -> . CADENA1
    (87) term -> . CADENA2
    (82) addop -> . PLUS
    (83) addop -> . MINUS
    (90) factor -> . LPAREN expression RPAREN
    (91) factor -> . var_val
    (92) factor -> . call
    (93) factor -> . NUMBER
    (94) call -> . VARIABLE2 LPAREN args RPAREN

    QUESTIONMARK    shift and go to state 43
    VARIABLE        shift and go to state 14
    IF              shift and go to state 16
    SWITCH          shift and go to state 19
    CASE            shift and go to state 21
    DEFAULT         shift and go to state 22
    WHILE           shift and go to state 23
    FOR             shift and go to state 24
    FOREACH         shift and go to state 26
    FUNCTION        shift and go to state 27
    ECHO            shift and go to state 29
    SEMICOLON       shift and go to state 13
    COMMA           shift and go to state 31
    NUMBER          shift and go to state 15
    CADENA1         shift and go to state 30
    CADENA2         shift and go to state 36
    PLUS            shift and go to state 37
    MINUS           shift and go to state 38
    LPAREN          shift and go to state 17
    VARIABLE2       shift and go to state 28

    footer_declaration             shift and go to state 41
    declaration                    shift and go to state 42
    var_declaration                shift and go to state 6
    selection_stmt                 shift and go to state 7
    iteration_stmt                 shift and go to state 8
    fun_declaration                shift and go to state 9
    show_in_screen                 shift and go to state 10
    expression_stmt                shift and go to state 11
    var_declaration2               shift and go to state 12
    expression                     shift and go to state 18
    var_val                        shift and go to state 20
    additive_expression            shift and go to state 25
    simple_expression              shift and go to state 32
    addop                          shift and go to state 33
    term                           shift and go to state 34
    factor                         shift and go to state 35
    call                           shift and go to state 39

state 5

    (3) declaration_list -> declaration .

    QUESTIONMARK    reduce using rule 3 (declaration_list -> declaration .)
    VARIABLE        reduce using rule 3 (declaration_list -> declaration .)
    IF              reduce using rule 3 (declaration_list -> declaration .)
    SWITCH          reduce using rule 3 (declaration_list -> declaration .)
    CASE            reduce using rule 3 (declaration_list -> declaration .)
    DEFAULT         reduce using rule 3 (declaration_list -> declaration .)
    WHILE           reduce using rule 3 (declaration_list -> declaration .)
    FOR             reduce using rule 3 (declaration_list -> declaration .)
    FOREACH         reduce using rule 3 (declaration_list -> declaration .)
    FUNCTION        reduce using rule 3 (declaration_list -> declaration .)
    ECHO            reduce using rule 3 (declaration_list -> declaration .)
    SEMICOLON       reduce using rule 3 (declaration_list -> declaration .)
    COMMA           reduce using rule 3 (declaration_list -> declaration .)
    NUMBER          reduce using rule 3 (declaration_list -> declaration .)
    CADENA1         reduce using rule 3 (declaration_list -> declaration .)
    CADENA2         reduce using rule 3 (declaration_list -> declaration .)
    PLUS            reduce using rule 3 (declaration_list -> declaration .)
    MINUS           reduce using rule 3 (declaration_list -> declaration .)
    LPAREN          reduce using rule 3 (declaration_list -> declaration .)
    VARIABLE2       reduce using rule 3 (declaration_list -> declaration .)


state 6

    (4) declaration -> var_declaration .

    QUESTIONMARK    reduce using rule 4 (declaration -> var_declaration .)
    VARIABLE        reduce using rule 4 (declaration -> var_declaration .)
    IF              reduce using rule 4 (declaration -> var_declaration .)
    SWITCH          reduce using rule 4 (declaration -> var_declaration .)
    CASE            reduce using rule 4 (declaration -> var_declaration .)
    DEFAULT         reduce using rule 4 (declaration -> var_declaration .)
    WHILE           reduce using rule 4 (declaration -> var_declaration .)
    FOR             reduce using rule 4 (declaration -> var_declaration .)
    FOREACH         reduce using rule 4 (declaration -> var_declaration .)
    FUNCTION        reduce using rule 4 (declaration -> var_declaration .)
    ECHO            reduce using rule 4 (declaration -> var_declaration .)
    SEMICOLON       reduce using rule 4 (declaration -> var_declaration .)
    COMMA           reduce using rule 4 (declaration -> var_declaration .)
    NUMBER          reduce using rule 4 (declaration -> var_declaration .)
    CADENA1         reduce using rule 4 (declaration -> var_declaration .)
    CADENA2         reduce using rule 4 (declaration -> var_declaration .)
    PLUS            reduce using rule 4 (declaration -> var_declaration .)
    MINUS           reduce using rule 4 (declaration -> var_declaration .)
    LPAREN          reduce using rule 4 (declaration -> var_declaration .)
    VARIABLE2       reduce using rule 4 (declaration -> var_declaration .)


state 7

    (5) declaration -> selection_stmt .

    QUESTIONMARK    reduce using rule 5 (declaration -> selection_stmt .)
    VARIABLE        reduce using rule 5 (declaration -> selection_stmt .)
    IF              reduce using rule 5 (declaration -> selection_stmt .)
    SWITCH          reduce using rule 5 (declaration -> selection_stmt .)
    CASE            reduce using rule 5 (declaration -> selection_stmt .)
    DEFAULT         reduce using rule 5 (declaration -> selection_stmt .)
    WHILE           reduce using rule 5 (declaration -> selection_stmt .)
    FOR             reduce using rule 5 (declaration -> selection_stmt .)
    FOREACH         reduce using rule 5 (declaration -> selection_stmt .)
    FUNCTION        reduce using rule 5 (declaration -> selection_stmt .)
    ECHO            reduce using rule 5 (declaration -> selection_stmt .)
    SEMICOLON       reduce using rule 5 (declaration -> selection_stmt .)
    COMMA           reduce using rule 5 (declaration -> selection_stmt .)
    NUMBER          reduce using rule 5 (declaration -> selection_stmt .)
    CADENA1         reduce using rule 5 (declaration -> selection_stmt .)
    CADENA2         reduce using rule 5 (declaration -> selection_stmt .)
    PLUS            reduce using rule 5 (declaration -> selection_stmt .)
    MINUS           reduce using rule 5 (declaration -> selection_stmt .)
    LPAREN          reduce using rule 5 (declaration -> selection_stmt .)
    VARIABLE2       reduce using rule 5 (declaration -> selection_stmt .)


state 8

    (6) declaration -> iteration_stmt .

    QUESTIONMARK    reduce using rule 6 (declaration -> iteration_stmt .)
    VARIABLE        reduce using rule 6 (declaration -> iteration_stmt .)
    IF              reduce using rule 6 (declaration -> iteration_stmt .)
    SWITCH          reduce using rule 6 (declaration -> iteration_stmt .)
    CASE            reduce using rule 6 (declaration -> iteration_stmt .)
    DEFAULT         reduce using rule 6 (declaration -> iteration_stmt .)
    WHILE           reduce using rule 6 (declaration -> iteration_stmt .)
    FOR             reduce using rule 6 (declaration -> iteration_stmt .)
    FOREACH         reduce using rule 6 (declaration -> iteration_stmt .)
    FUNCTION        reduce using rule 6 (declaration -> iteration_stmt .)
    ECHO            reduce using rule 6 (declaration -> iteration_stmt .)
    SEMICOLON       reduce using rule 6 (declaration -> iteration_stmt .)
    COMMA           reduce using rule 6 (declaration -> iteration_stmt .)
    NUMBER          reduce using rule 6 (declaration -> iteration_stmt .)
    CADENA1         reduce using rule 6 (declaration -> iteration_stmt .)
    CADENA2         reduce using rule 6 (declaration -> iteration_stmt .)
    PLUS            reduce using rule 6 (declaration -> iteration_stmt .)
    MINUS           reduce using rule 6 (declaration -> iteration_stmt .)
    LPAREN          reduce using rule 6 (declaration -> iteration_stmt .)
    VARIABLE2       reduce using rule 6 (declaration -> iteration_stmt .)


state 9

    (7) declaration -> fun_declaration .

    QUESTIONMARK    reduce using rule 7 (declaration -> fun_declaration .)
    VARIABLE        reduce using rule 7 (declaration -> fun_declaration .)
    IF              reduce using rule 7 (declaration -> fun_declaration .)
    SWITCH          reduce using rule 7 (declaration -> fun_declaration .)
    CASE            reduce using rule 7 (declaration -> fun_declaration .)
    DEFAULT         reduce using rule 7 (declaration -> fun_declaration .)
    WHILE           reduce using rule 7 (declaration -> fun_declaration .)
    FOR             reduce using rule 7 (declaration -> fun_declaration .)
    FOREACH         reduce using rule 7 (declaration -> fun_declaration .)
    FUNCTION        reduce using rule 7 (declaration -> fun_declaration .)
    ECHO            reduce using rule 7 (declaration -> fun_declaration .)
    SEMICOLON       reduce using rule 7 (declaration -> fun_declaration .)
    COMMA           reduce using rule 7 (declaration -> fun_declaration .)
    NUMBER          reduce using rule 7 (declaration -> fun_declaration .)
    CADENA1         reduce using rule 7 (declaration -> fun_declaration .)
    CADENA2         reduce using rule 7 (declaration -> fun_declaration .)
    PLUS            reduce using rule 7 (declaration -> fun_declaration .)
    MINUS           reduce using rule 7 (declaration -> fun_declaration .)
    LPAREN          reduce using rule 7 (declaration -> fun_declaration .)
    VARIABLE2       reduce using rule 7 (declaration -> fun_declaration .)


state 10

    (8) declaration -> show_in_screen .

    QUESTIONMARK    reduce using rule 8 (declaration -> show_in_screen .)
    VARIABLE        reduce using rule 8 (declaration -> show_in_screen .)
    IF              reduce using rule 8 (declaration -> show_in_screen .)
    SWITCH          reduce using rule 8 (declaration -> show_in_screen .)
    CASE            reduce using rule 8 (declaration -> show_in_screen .)
    DEFAULT         reduce using rule 8 (declaration -> show_in_screen .)
    WHILE           reduce using rule 8 (declaration -> show_in_screen .)
    FOR             reduce using rule 8 (declaration -> show_in_screen .)
    FOREACH         reduce using rule 8 (declaration -> show_in_screen .)
    FUNCTION        reduce using rule 8 (declaration -> show_in_screen .)
    ECHO            reduce using rule 8 (declaration -> show_in_screen .)
    SEMICOLON       reduce using rule 8 (declaration -> show_in_screen .)
    COMMA           reduce using rule 8 (declaration -> show_in_screen .)
    NUMBER          reduce using rule 8 (declaration -> show_in_screen .)
    CADENA1         reduce using rule 8 (declaration -> show_in_screen .)
    CADENA2         reduce using rule 8 (declaration -> show_in_screen .)
    PLUS            reduce using rule 8 (declaration -> show_in_screen .)
    MINUS           reduce using rule 8 (declaration -> show_in_screen .)
    LPAREN          reduce using rule 8 (declaration -> show_in_screen .)
    VARIABLE2       reduce using rule 8 (declaration -> show_in_screen .)


state 11

    (9) declaration -> expression_stmt .

    QUESTIONMARK    reduce using rule 9 (declaration -> expression_stmt .)
    VARIABLE        reduce using rule 9 (declaration -> expression_stmt .)
    IF              reduce using rule 9 (declaration -> expression_stmt .)
    SWITCH          reduce using rule 9 (declaration -> expression_stmt .)
    CASE            reduce using rule 9 (declaration -> expression_stmt .)
    DEFAULT         reduce using rule 9 (declaration -> expression_stmt .)
    WHILE           reduce using rule 9 (declaration -> expression_stmt .)
    FOR             reduce using rule 9 (declaration -> expression_stmt .)
    FOREACH         reduce using rule 9 (declaration -> expression_stmt .)
    FUNCTION        reduce using rule 9 (declaration -> expression_stmt .)
    ECHO            reduce using rule 9 (declaration -> expression_stmt .)
    SEMICOLON       reduce using rule 9 (declaration -> expression_stmt .)
    COMMA           reduce using rule 9 (declaration -> expression_stmt .)
    NUMBER          reduce using rule 9 (declaration -> expression_stmt .)
    CADENA1         reduce using rule 9 (declaration -> expression_stmt .)
    CADENA2         reduce using rule 9 (declaration -> expression_stmt .)
    PLUS            reduce using rule 9 (declaration -> expression_stmt .)
    MINUS           reduce using rule 9 (declaration -> expression_stmt .)
    LPAREN          reduce using rule 9 (declaration -> expression_stmt .)
    VARIABLE2       reduce using rule 9 (declaration -> expression_stmt .)


state 12

    (15) var_declaration -> var_declaration2 . SEMICOLON

    SEMICOLON       shift and go to state 44


state 13

    (51) expression_stmt -> SEMICOLON .

    QUESTIONMARK    reduce using rule 51 (expression_stmt -> SEMICOLON .)
    VARIABLE        reduce using rule 51 (expression_stmt -> SEMICOLON .)
    IF              reduce using rule 51 (expression_stmt -> SEMICOLON .)
    SWITCH          reduce using rule 51 (expression_stmt -> SEMICOLON .)
    CASE            reduce using rule 51 (expression_stmt -> SEMICOLON .)
    DEFAULT         reduce using rule 51 (expression_stmt -> SEMICOLON .)
    WHILE           reduce using rule 51 (expression_stmt -> SEMICOLON .)
    FOR             reduce using rule 51 (expression_stmt -> SEMICOLON .)
    FOREACH         reduce using rule 51 (expression_stmt -> SEMICOLON .)
    FUNCTION        reduce using rule 51 (expression_stmt -> SEMICOLON .)
    ECHO            reduce using rule 51 (expression_stmt -> SEMICOLON .)
    SEMICOLON       reduce using rule 51 (expression_stmt -> SEMICOLON .)
    COMMA           reduce using rule 51 (expression_stmt -> SEMICOLON .)
    NUMBER          reduce using rule 51 (expression_stmt -> SEMICOLON .)
    CADENA1         reduce using rule 51 (expression_stmt -> SEMICOLON .)
    CADENA2         reduce using rule 51 (expression_stmt -> SEMICOLON .)
    PLUS            reduce using rule 51 (expression_stmt -> SEMICOLON .)
    MINUS           reduce using rule 51 (expression_stmt -> SEMICOLON .)
    LPAREN          reduce using rule 51 (expression_stmt -> SEMICOLON .)
    VARIABLE2       reduce using rule 51 (expression_stmt -> SEMICOLON .)
    BREAK           reduce using rule 51 (expression_stmt -> SEMICOLON .)
    ELSE            reduce using rule 51 (expression_stmt -> SEMICOLON .)
    ELSEIF          reduce using rule 51 (expression_stmt -> SEMICOLON .)
    RBLOCK          reduce using rule 51 (expression_stmt -> SEMICOLON .)
    LBLOCK          reduce using rule 51 (expression_stmt -> SEMICOLON .)
    RETURN          reduce using rule 51 (expression_stmt -> SEMICOLON .)


state 14

    (16) var_declaration -> VARIABLE . LBRACKET NUMBER RBRACKET SEMICOLON
    (58) selection_stmt -> VARIABLE . relop VARIABLE QUESTIONMARK expression COLON expression SEMICOLON
    (17) var_declaration2 -> VARIABLE .
    (18) var_declaration2 -> VARIABLE . COMMA var_declaration2
    (19) var_declaration2 -> VARIABLE . EQUAL NUMBER COMMA var_declaration2
    (20) var_declaration2 -> VARIABLE . EQUAL NUMBER
    (21) var_declaration2 -> VARIABLE . EQUAL VARIABLE COMMA var_declaration2
    (22) var_declaration2 -> VARIABLE . EQUAL VARIABLE
    (24) var_declaration2 -> VARIABLE . EQUAL VARIABLE simple_expression
    (25) var_declaration2 -> VARIABLE . EQUAL LBRACKET NUMBER COMMA var_declaration2
    (28) var_declaration2 -> VARIABLE . EQUAL LBRACKET CADENA1 COMMA var_declaration2
    (66) var_val -> VARIABLE .
    (67) var_val -> VARIABLE . LBRACKET expression RBRACKET
    (70) relop -> . LESS
    (71) relop -> . LESSEQUAL
    (72) relop -> . GREATER
    (73) relop -> . GREATEREQUAL
    (74) relop -> . DEQUAL
    (75) relop -> . DISTINT
    (76) relop -> . ISEQUAL

  ! shift/reduce conflict for EQUAL resolved as shift
  ! reduce/reduce conflict for SEMICOLON resolved using rule 17 (var_declaration2 -> VARIABLE .)
  ! shift/reduce conflict for LESS resolved as shift
  ! shift/reduce conflict for LESSEQUAL resolved as shift
  ! shift/reduce conflict for GREATER resolved as shift
  ! shift/reduce conflict for GREATEREQUAL resolved as shift
  ! shift/reduce conflict for DEQUAL resolved as shift
  ! shift/reduce conflict for DISTINT resolved as shift
  ! shift/reduce conflict for ISEQUAL resolved as shift
    LBRACKET        shift and go to state 45
    SEMICOLON       reduce using rule 17 (var_declaration2 -> VARIABLE .)
    COMMA           shift and go to state 47
    EQUAL           shift and go to state 48
    MINUSMINUS      reduce using rule 66 (var_val -> VARIABLE .)
    PLUSPLUS        reduce using rule 66 (var_val -> VARIABLE .)
    TIMES           reduce using rule 66 (var_val -> VARIABLE .)
    DIVIDE          reduce using rule 66 (var_val -> VARIABLE .)
    PLUS            reduce using rule 66 (var_val -> VARIABLE .)
    MINUS           reduce using rule 66 (var_val -> VARIABLE .)
    LESS            shift and go to state 49
    LESSEQUAL       shift and go to state 50
    GREATER         shift and go to state 51
    GREATEREQUAL    shift and go to state 52
    DEQUAL          shift and go to state 53
    DISTINT         shift and go to state 54
    ISEQUAL         shift and go to state 55

  ! EQUAL           [ reduce using rule 66 (var_val -> VARIABLE .) ]
  ! LESS            [ reduce using rule 66 (var_val -> VARIABLE .) ]
  ! LESSEQUAL       [ reduce using rule 66 (var_val -> VARIABLE .) ]
  ! GREATER         [ reduce using rule 66 (var_val -> VARIABLE .) ]
  ! GREATEREQUAL    [ reduce using rule 66 (var_val -> VARIABLE .) ]
  ! DEQUAL          [ reduce using rule 66 (var_val -> VARIABLE .) ]
  ! DISTINT         [ reduce using rule 66 (var_val -> VARIABLE .) ]
  ! ISEQUAL         [ reduce using rule 66 (var_val -> VARIABLE .) ]
  ! SEMICOLON       [ reduce using rule 66 (var_val -> VARIABLE .) ]

    relop                          shift and go to state 46

state 15

    (26) var_declaration2 -> NUMBER . COMMA var_declaration2
    (27) var_declaration2 -> NUMBER . RBRACKET
    (93) factor -> NUMBER .

    COMMA           shift and go to state 56
    RBRACKET        shift and go to state 57
    MINUSMINUS      reduce using rule 93 (factor -> NUMBER .)
    PLUSPLUS        reduce using rule 93 (factor -> NUMBER .)
    TIMES           reduce using rule 93 (factor -> NUMBER .)
    DIVIDE          reduce using rule 93 (factor -> NUMBER .)
    LESS            reduce using rule 93 (factor -> NUMBER .)
    LESSEQUAL       reduce using rule 93 (factor -> NUMBER .)
    GREATER         reduce using rule 93 (factor -> NUMBER .)
    GREATEREQUAL    reduce using rule 93 (factor -> NUMBER .)
    DEQUAL          reduce using rule 93 (factor -> NUMBER .)
    DISTINT         reduce using rule 93 (factor -> NUMBER .)
    ISEQUAL         reduce using rule 93 (factor -> NUMBER .)
    PLUS            reduce using rule 93 (factor -> NUMBER .)
    MINUS           reduce using rule 93 (factor -> NUMBER .)
    SEMICOLON       reduce using rule 93 (factor -> NUMBER .)


state 16

    (52) selection_stmt -> IF . LPAREN expression RPAREN statement
    (53) selection_stmt -> IF . LPAREN expression RPAREN statement ELSE statement
    (54) selection_stmt -> IF . LPAREN expression RPAREN statement ELSEIF statement

    LPAREN          shift and go to state 58


state 17

    (90) factor -> LPAREN . expression RPAREN
    (64) expression -> . var_val EQUAL expression
    (65) expression -> . simple_expression
    (66) var_val -> . VARIABLE
    (67) var_val -> . VARIABLE LBRACKET expression RBRACKET
    (68) simple_expression -> . additive_expression relop additive_expression
    (69) simple_expression -> . additive_expression
    (77) additive_expression -> . additive_expression addop term
    (78) additive_expression -> . term
    (79) additive_expression -> . term MINUSMINUS
    (80) additive_expression -> . term PLUSPLUS
    (81) additive_expression -> . addop term
    (84) term -> . term mulop factor
    (85) term -> . factor
    (86) term -> . CADENA1
    (87) term -> . CADENA2
    (82) addop -> . PLUS
    (83) addop -> . MINUS
    (90) factor -> . LPAREN expression RPAREN
    (91) factor -> . var_val
    (92) factor -> . call
    (93) factor -> . NUMBER
    (94) call -> . VARIABLE2 LPAREN args RPAREN

    VARIABLE        shift and go to state 60
    CADENA1         shift and go to state 61
    CADENA2         shift and go to state 36
    PLUS            shift and go to state 37
    MINUS           shift and go to state 38
    LPAREN          shift and go to state 17
    NUMBER          shift and go to state 62
    VARIABLE2       shift and go to state 28

    expression                     shift and go to state 59
    var_val                        shift and go to state 20
    simple_expression              shift and go to state 32
    additive_expression            shift and go to state 25
    addop                          shift and go to state 33
    term                           shift and go to state 34
    factor                         shift and go to state 35
    call                           shift and go to state 39

state 18

    (50) expression_stmt -> expression . SEMICOLON

    SEMICOLON       shift and go to state 63


state 19

    (55) selection_stmt -> SWITCH . LPAREN var_val RPAREN statement

    LPAREN          shift and go to state 64


state 20

    (64) expression -> var_val . EQUAL expression
    (91) factor -> var_val .

    EQUAL           shift and go to state 65
    MINUSMINUS      reduce using rule 91 (factor -> var_val .)
    PLUSPLUS        reduce using rule 91 (factor -> var_val .)
    TIMES           reduce using rule 91 (factor -> var_val .)
    DIVIDE          reduce using rule 91 (factor -> var_val .)
    LESS            reduce using rule 91 (factor -> var_val .)
    LESSEQUAL       reduce using rule 91 (factor -> var_val .)
    GREATER         reduce using rule 91 (factor -> var_val .)
    GREATEREQUAL    reduce using rule 91 (factor -> var_val .)
    DEQUAL          reduce using rule 91 (factor -> var_val .)
    DISTINT         reduce using rule 91 (factor -> var_val .)
    ISEQUAL         reduce using rule 91 (factor -> var_val .)
    PLUS            reduce using rule 91 (factor -> var_val .)
    MINUS           reduce using rule 91 (factor -> var_val .)
    SEMICOLON       reduce using rule 91 (factor -> var_val .)
    RPAREN          reduce using rule 91 (factor -> var_val .)
    RBRACKET        reduce using rule 91 (factor -> var_val .)
    COMMA           reduce using rule 91 (factor -> var_val .)
    COLON           reduce using rule 91 (factor -> var_val .)


state 21

    (56) selection_stmt -> CASE . NUMBER COLON statement BREAK SEMICOLON

    NUMBER          shift and go to state 66


state 22

    (57) selection_stmt -> DEFAULT . COLON statement BREAK SEMICOLON

    COLON           shift and go to state 67


state 23

    (59) iteration_stmt -> WHILE . LPAREN expression RPAREN statement

    LPAREN          shift and go to state 68


state 24

    (60) iteration_stmt -> FOR . LPAREN var_declaration2 SEMICOLON expression SEMICOLON additive_expression RPAREN statement

    LPAREN          shift and go to state 69


state 25

    (68) simple_expression -> additive_expression . relop additive_expression
    (69) simple_expression -> additive_expression .
    (77) additive_expression -> additive_expression . addop term
    (70) relop -> . LESS
    (71) relop -> . LESSEQUAL
    (72) relop -> . GREATER
    (73) relop -> . GREATEREQUAL
    (74) relop -> . DEQUAL
    (75) relop -> . DISTINT
    (76) relop -> . ISEQUAL
    (82) addop -> . PLUS
    (83) addop -> . MINUS

    SEMICOLON       reduce using rule 69 (simple_expression -> additive_expression .)
    RPAREN          reduce using rule 69 (simple_expression -> additive_expression .)
    RBRACKET        reduce using rule 69 (simple_expression -> additive_expression .)
    COMMA           reduce using rule 69 (simple_expression -> additive_expression .)
    COLON           reduce using rule 69 (simple_expression -> additive_expression .)
    LESS            shift and go to state 49
    LESSEQUAL       shift and go to state 50
    GREATER         shift and go to state 51
    GREATEREQUAL    shift and go to state 52
    DEQUAL          shift and go to state 53
    DISTINT         shift and go to state 54
    ISEQUAL         shift and go to state 55
    PLUS            shift and go to state 37
    MINUS           shift and go to state 38

    relop                          shift and go to state 70
    addop                          shift and go to state 71

state 26

    (61) iteration_stmt -> FOREACH . LPAREN var_val AS var_val RPAREN statement

    LPAREN          shift and go to state 72


state 27

    (31) fun_declaration -> FUNCTION . VARIABLE2 LPAREN params RPAREN statement

    VARIABLE2       shift and go to state 73


state 28

    (94) call -> VARIABLE2 . LPAREN args RPAREN

    LPAREN          shift and go to state 74


state 29

    (12) show_in_screen -> ECHO . var_val SEMICOLON
    (13) show_in_screen -> ECHO . CADENA1 SEMICOLON
    (14) show_in_screen -> ECHO . selection_stmt
    (66) var_val -> . VARIABLE
    (67) var_val -> . VARIABLE LBRACKET expression RBRACKET
    (52) selection_stmt -> . IF LPAREN expression RPAREN statement
    (53) selection_stmt -> . IF LPAREN expression RPAREN statement ELSE statement
    (54) selection_stmt -> . IF LPAREN expression RPAREN statement ELSEIF statement
    (55) selection_stmt -> . SWITCH LPAREN var_val RPAREN statement
    (56) selection_stmt -> . CASE NUMBER COLON statement BREAK SEMICOLON
    (57) selection_stmt -> . DEFAULT COLON statement BREAK SEMICOLON
    (58) selection_stmt -> . VARIABLE relop VARIABLE QUESTIONMARK expression COLON expression SEMICOLON

    CADENA1         shift and go to state 76
    VARIABLE        shift and go to state 78
    IF              shift and go to state 16
    SWITCH          shift and go to state 19
    CASE            shift and go to state 21
    DEFAULT         shift and go to state 22

    var_val                        shift and go to state 75
    selection_stmt                 shift and go to state 77

state 30

    (29) var_declaration2 -> CADENA1 . COMMA var_declaration2
    (30) var_declaration2 -> CADENA1 . RBRACKET
    (86) term -> CADENA1 .

    COMMA           shift and go to state 79
    RBRACKET        shift and go to state 80
    MINUSMINUS      reduce using rule 86 (term -> CADENA1 .)
    PLUSPLUS        reduce using rule 86 (term -> CADENA1 .)
    TIMES           reduce using rule 86 (term -> CADENA1 .)
    DIVIDE          reduce using rule 86 (term -> CADENA1 .)
    LESS            reduce using rule 86 (term -> CADENA1 .)
    LESSEQUAL       reduce using rule 86 (term -> CADENA1 .)
    GREATER         reduce using rule 86 (term -> CADENA1 .)
    GREATEREQUAL    reduce using rule 86 (term -> CADENA1 .)
    DEQUAL          reduce using rule 86 (term -> CADENA1 .)
    DISTINT         reduce using rule 86 (term -> CADENA1 .)
    ISEQUAL         reduce using rule 86 (term -> CADENA1 .)
    PLUS            reduce using rule 86 (term -> CADENA1 .)
    MINUS           reduce using rule 86 (term -> CADENA1 .)
    SEMICOLON       reduce using rule 86 (term -> CADENA1 .)


state 31

    (23) var_declaration2 -> COMMA .

    SEMICOLON       reduce using rule 23 (var_declaration2 -> COMMA .)


state 32

    (65) expression -> simple_expression .

    SEMICOLON       reduce using rule 65 (expression -> simple_expression .)
    RPAREN          reduce using rule 65 (expression -> simple_expression .)
    RBRACKET        reduce using rule 65 (expression -> simple_expression .)
    COMMA           reduce using rule 65 (expression -> simple_expression .)
    COLON           reduce using rule 65 (expression -> simple_expression .)


state 33

    (81) additive_expression -> addop . term
    (84) term -> . term mulop factor
    (85) term -> . factor
    (86) term -> . CADENA1
    (87) term -> . CADENA2
    (90) factor -> . LPAREN expression RPAREN
    (91) factor -> . var_val
    (92) factor -> . call
    (93) factor -> . NUMBER
    (66) var_val -> . VARIABLE
    (67) var_val -> . VARIABLE LBRACKET expression RBRACKET
    (94) call -> . VARIABLE2 LPAREN args RPAREN

    CADENA1         shift and go to state 61
    CADENA2         shift and go to state 36
    LPAREN          shift and go to state 17
    NUMBER          shift and go to state 62
    VARIABLE        shift and go to state 60
    VARIABLE2       shift and go to state 28

    term                           shift and go to state 81
    factor                         shift and go to state 35
    var_val                        shift and go to state 82
    call                           shift and go to state 39

state 34

    (78) additive_expression -> term .
    (79) additive_expression -> term . MINUSMINUS
    (80) additive_expression -> term . PLUSPLUS
    (84) term -> term . mulop factor
    (88) mulop -> . TIMES
    (89) mulop -> . DIVIDE

    LESS            reduce using rule 78 (additive_expression -> term .)
    LESSEQUAL       reduce using rule 78 (additive_expression -> term .)
    GREATER         reduce using rule 78 (additive_expression -> term .)
    GREATEREQUAL    reduce using rule 78 (additive_expression -> term .)
    DEQUAL          reduce using rule 78 (additive_expression -> term .)
    DISTINT         reduce using rule 78 (additive_expression -> term .)
    ISEQUAL         reduce using rule 78 (additive_expression -> term .)
    PLUS            reduce using rule 78 (additive_expression -> term .)
    MINUS           reduce using rule 78 (additive_expression -> term .)
    SEMICOLON       reduce using rule 78 (additive_expression -> term .)
    RPAREN          reduce using rule 78 (additive_expression -> term .)
    RBRACKET        reduce using rule 78 (additive_expression -> term .)
    COMMA           reduce using rule 78 (additive_expression -> term .)
    COLON           reduce using rule 78 (additive_expression -> term .)
    MINUSMINUS      shift and go to state 83
    PLUSPLUS        shift and go to state 84
    TIMES           shift and go to state 86
    DIVIDE          shift and go to state 87

    mulop                          shift and go to state 85

state 35

    (85) term -> factor .

    MINUSMINUS      reduce using rule 85 (term -> factor .)
    PLUSPLUS        reduce using rule 85 (term -> factor .)
    TIMES           reduce using rule 85 (term -> factor .)
    DIVIDE          reduce using rule 85 (term -> factor .)
    LESS            reduce using rule 85 (term -> factor .)
    LESSEQUAL       reduce using rule 85 (term -> factor .)
    GREATER         reduce using rule 85 (term -> factor .)
    GREATEREQUAL    reduce using rule 85 (term -> factor .)
    DEQUAL          reduce using rule 85 (term -> factor .)
    DISTINT         reduce using rule 85 (term -> factor .)
    ISEQUAL         reduce using rule 85 (term -> factor .)
    PLUS            reduce using rule 85 (term -> factor .)
    MINUS           reduce using rule 85 (term -> factor .)
    SEMICOLON       reduce using rule 85 (term -> factor .)
    RPAREN          reduce using rule 85 (term -> factor .)
    RBRACKET        reduce using rule 85 (term -> factor .)
    COMMA           reduce using rule 85 (term -> factor .)
    COLON           reduce using rule 85 (term -> factor .)


state 36

    (87) term -> CADENA2 .

    MINUSMINUS      reduce using rule 87 (term -> CADENA2 .)
    PLUSPLUS        reduce using rule 87 (term -> CADENA2 .)
    TIMES           reduce using rule 87 (term -> CADENA2 .)
    DIVIDE          reduce using rule 87 (term -> CADENA2 .)
    LESS            reduce using rule 87 (term -> CADENA2 .)
    LESSEQUAL       reduce using rule 87 (term -> CADENA2 .)
    GREATER         reduce using rule 87 (term -> CADENA2 .)
    GREATEREQUAL    reduce using rule 87 (term -> CADENA2 .)
    DEQUAL          reduce using rule 87 (term -> CADENA2 .)
    DISTINT         reduce using rule 87 (term -> CADENA2 .)
    ISEQUAL         reduce using rule 87 (term -> CADENA2 .)
    PLUS            reduce using rule 87 (term -> CADENA2 .)
    MINUS           reduce using rule 87 (term -> CADENA2 .)
    SEMICOLON       reduce using rule 87 (term -> CADENA2 .)
    RPAREN          reduce using rule 87 (term -> CADENA2 .)
    RBRACKET        reduce using rule 87 (term -> CADENA2 .)
    COMMA           reduce using rule 87 (term -> CADENA2 .)
    COLON           reduce using rule 87 (term -> CADENA2 .)


state 37

    (82) addop -> PLUS .

    CADENA1         reduce using rule 82 (addop -> PLUS .)
    CADENA2         reduce using rule 82 (addop -> PLUS .)
    LPAREN          reduce using rule 82 (addop -> PLUS .)
    NUMBER          reduce using rule 82 (addop -> PLUS .)
    VARIABLE        reduce using rule 82 (addop -> PLUS .)
    VARIABLE2       reduce using rule 82 (addop -> PLUS .)


state 38

    (83) addop -> MINUS .

    CADENA1         reduce using rule 83 (addop -> MINUS .)
    CADENA2         reduce using rule 83 (addop -> MINUS .)
    LPAREN          reduce using rule 83 (addop -> MINUS .)
    NUMBER          reduce using rule 83 (addop -> MINUS .)
    VARIABLE        reduce using rule 83 (addop -> MINUS .)
    VARIABLE2       reduce using rule 83 (addop -> MINUS .)


state 39

    (92) factor -> call .

    MINUSMINUS      reduce using rule 92 (factor -> call .)
    PLUSPLUS        reduce using rule 92 (factor -> call .)
    TIMES           reduce using rule 92 (factor -> call .)
    DIVIDE          reduce using rule 92 (factor -> call .)
    LESS            reduce using rule 92 (factor -> call .)
    LESSEQUAL       reduce using rule 92 (factor -> call .)
    GREATER         reduce using rule 92 (factor -> call .)
    GREATEREQUAL    reduce using rule 92 (factor -> call .)
    DEQUAL          reduce using rule 92 (factor -> call .)
    DISTINT         reduce using rule 92 (factor -> call .)
    ISEQUAL         reduce using rule 92 (factor -> call .)
    PLUS            reduce using rule 92 (factor -> call .)
    MINUS           reduce using rule 92 (factor -> call .)
    SEMICOLON       reduce using rule 92 (factor -> call .)
    RPAREN          reduce using rule 92 (factor -> call .)
    RBRACKET        reduce using rule 92 (factor -> call .)
    COMMA           reduce using rule 92 (factor -> call .)
    COLON           reduce using rule 92 (factor -> call .)


state 40

    (10) header_declaration -> LESS QUESTIONMARK . PHP

    PHP             shift and go to state 88


state 41

    (1) program -> header_declaration declaration_list footer_declaration .

    $end            reduce using rule 1 (program -> header_declaration declaration_list footer_declaration .)


state 42

    (2) declaration_list -> declaration_list declaration .

    QUESTIONMARK    reduce using rule 2 (declaration_list -> declaration_list declaration .)
    VARIABLE        reduce using rule 2 (declaration_list -> declaration_list declaration .)
    IF              reduce using rule 2 (declaration_list -> declaration_list declaration .)
    SWITCH          reduce using rule 2 (declaration_list -> declaration_list declaration .)
    CASE            reduce using rule 2 (declaration_list -> declaration_list declaration .)
    DEFAULT         reduce using rule 2 (declaration_list -> declaration_list declaration .)
    WHILE           reduce using rule 2 (declaration_list -> declaration_list declaration .)
    FOR             reduce using rule 2 (declaration_list -> declaration_list declaration .)
    FOREACH         reduce using rule 2 (declaration_list -> declaration_list declaration .)
    FUNCTION        reduce using rule 2 (declaration_list -> declaration_list declaration .)
    ECHO            reduce using rule 2 (declaration_list -> declaration_list declaration .)
    SEMICOLON       reduce using rule 2 (declaration_list -> declaration_list declaration .)
    COMMA           reduce using rule 2 (declaration_list -> declaration_list declaration .)
    NUMBER          reduce using rule 2 (declaration_list -> declaration_list declaration .)
    CADENA1         reduce using rule 2 (declaration_list -> declaration_list declaration .)
    CADENA2         reduce using rule 2 (declaration_list -> declaration_list declaration .)
    PLUS            reduce using rule 2 (declaration_list -> declaration_list declaration .)
    MINUS           reduce using rule 2 (declaration_list -> declaration_list declaration .)
    LPAREN          reduce using rule 2 (declaration_list -> declaration_list declaration .)
    VARIABLE2       reduce using rule 2 (declaration_list -> declaration_list declaration .)


state 43

    (11) footer_declaration -> QUESTIONMARK . GREATER

    GREATER         shift and go to state 89


state 44

    (15) var_declaration -> var_declaration2 SEMICOLON .

    QUESTIONMARK    reduce using rule 15 (var_declaration -> var_declaration2 SEMICOLON .)
    VARIABLE        reduce using rule 15 (var_declaration -> var_declaration2 SEMICOLON .)
    IF              reduce using rule 15 (var_declaration -> var_declaration2 SEMICOLON .)
    SWITCH          reduce using rule 15 (var_declaration -> var_declaration2 SEMICOLON .)
    CASE            reduce using rule 15 (var_declaration -> var_declaration2 SEMICOLON .)
    DEFAULT         reduce using rule 15 (var_declaration -> var_declaration2 SEMICOLON .)
    WHILE           reduce using rule 15 (var_declaration -> var_declaration2 SEMICOLON .)
    FOR             reduce using rule 15 (var_declaration -> var_declaration2 SEMICOLON .)
    FOREACH         reduce using rule 15 (var_declaration -> var_declaration2 SEMICOLON .)
    FUNCTION        reduce using rule 15 (var_declaration -> var_declaration2 SEMICOLON .)
    ECHO            reduce using rule 15 (var_declaration -> var_declaration2 SEMICOLON .)
    SEMICOLON       reduce using rule 15 (var_declaration -> var_declaration2 SEMICOLON .)
    COMMA           reduce using rule 15 (var_declaration -> var_declaration2 SEMICOLON .)
    NUMBER          reduce using rule 15 (var_declaration -> var_declaration2 SEMICOLON .)
    CADENA1         reduce using rule 15 (var_declaration -> var_declaration2 SEMICOLON .)
    CADENA2         reduce using rule 15 (var_declaration -> var_declaration2 SEMICOLON .)
    PLUS            reduce using rule 15 (var_declaration -> var_declaration2 SEMICOLON .)
    MINUS           reduce using rule 15 (var_declaration -> var_declaration2 SEMICOLON .)
    LPAREN          reduce using rule 15 (var_declaration -> var_declaration2 SEMICOLON .)
    VARIABLE2       reduce using rule 15 (var_declaration -> var_declaration2 SEMICOLON .)
    LBLOCK          reduce using rule 15 (var_declaration -> var_declaration2 SEMICOLON .)
    RETURN          reduce using rule 15 (var_declaration -> var_declaration2 SEMICOLON .)
    RBLOCK          reduce using rule 15 (var_declaration -> var_declaration2 SEMICOLON .)


state 45

    (16) var_declaration -> VARIABLE LBRACKET . NUMBER RBRACKET SEMICOLON
    (67) var_val -> VARIABLE LBRACKET . expression RBRACKET
    (64) expression -> . var_val EQUAL expression
    (65) expression -> . simple_expression
    (66) var_val -> . VARIABLE
    (67) var_val -> . VARIABLE LBRACKET expression RBRACKET
    (68) simple_expression -> . additive_expression relop additive_expression
    (69) simple_expression -> . additive_expression
    (77) additive_expression -> . additive_expression addop term
    (78) additive_expression -> . term
    (79) additive_expression -> . term MINUSMINUS
    (80) additive_expression -> . term PLUSPLUS
    (81) additive_expression -> . addop term
    (84) term -> . term mulop factor
    (85) term -> . factor
    (86) term -> . CADENA1
    (87) term -> . CADENA2
    (82) addop -> . PLUS
    (83) addop -> . MINUS
    (90) factor -> . LPAREN expression RPAREN
    (91) factor -> . var_val
    (92) factor -> . call
    (93) factor -> . NUMBER
    (94) call -> . VARIABLE2 LPAREN args RPAREN

    NUMBER          shift and go to state 90
    VARIABLE        shift and go to state 60
    CADENA1         shift and go to state 61
    CADENA2         shift and go to state 36
    PLUS            shift and go to state 37
    MINUS           shift and go to state 38
    LPAREN          shift and go to state 17
    VARIABLE2       shift and go to state 28

    expression                     shift and go to state 91
    var_val                        shift and go to state 20
    simple_expression              shift and go to state 32
    additive_expression            shift and go to state 25
    addop                          shift and go to state 33
    term                           shift and go to state 34
    factor                         shift and go to state 35
    call                           shift and go to state 39

state 46

    (58) selection_stmt -> VARIABLE relop . VARIABLE QUESTIONMARK expression COLON expression SEMICOLON

    VARIABLE        shift and go to state 92


state 47

    (18) var_declaration2 -> VARIABLE COMMA . var_declaration2
    (17) var_declaration2 -> . VARIABLE
    (18) var_declaration2 -> . VARIABLE COMMA var_declaration2
    (19) var_declaration2 -> . VARIABLE EQUAL NUMBER COMMA var_declaration2
    (20) var_declaration2 -> . VARIABLE EQUAL NUMBER
    (21) var_declaration2 -> . VARIABLE EQUAL VARIABLE COMMA var_declaration2
    (22) var_declaration2 -> . VARIABLE EQUAL VARIABLE
    (23) var_declaration2 -> . COMMA
    (24) var_declaration2 -> . VARIABLE EQUAL VARIABLE simple_expression
    (25) var_declaration2 -> . VARIABLE EQUAL LBRACKET NUMBER COMMA var_declaration2
    (26) var_declaration2 -> . NUMBER COMMA var_declaration2
    (27) var_declaration2 -> . NUMBER RBRACKET
    (28) var_declaration2 -> . VARIABLE EQUAL LBRACKET CADENA1 COMMA var_declaration2
    (29) var_declaration2 -> . CADENA1 COMMA var_declaration2
    (30) var_declaration2 -> . CADENA1 RBRACKET

    VARIABLE        shift and go to state 93
    COMMA           shift and go to state 31
    NUMBER          shift and go to state 95
    CADENA1         shift and go to state 96

    var_declaration2               shift and go to state 94

state 48

    (19) var_declaration2 -> VARIABLE EQUAL . NUMBER COMMA var_declaration2
    (20) var_declaration2 -> VARIABLE EQUAL . NUMBER
    (21) var_declaration2 -> VARIABLE EQUAL . VARIABLE COMMA var_declaration2
    (22) var_declaration2 -> VARIABLE EQUAL . VARIABLE
    (24) var_declaration2 -> VARIABLE EQUAL . VARIABLE simple_expression
    (25) var_declaration2 -> VARIABLE EQUAL . LBRACKET NUMBER COMMA var_declaration2
    (28) var_declaration2 -> VARIABLE EQUAL . LBRACKET CADENA1 COMMA var_declaration2

    NUMBER          shift and go to state 98
    VARIABLE        shift and go to state 97
    LBRACKET        shift and go to state 99


state 49

    (70) relop -> LESS .

    VARIABLE        reduce using rule 70 (relop -> LESS .)
    CADENA1         reduce using rule 70 (relop -> LESS .)
    CADENA2         reduce using rule 70 (relop -> LESS .)
    PLUS            reduce using rule 70 (relop -> LESS .)
    MINUS           reduce using rule 70 (relop -> LESS .)
    LPAREN          reduce using rule 70 (relop -> LESS .)
    NUMBER          reduce using rule 70 (relop -> LESS .)
    VARIABLE2       reduce using rule 70 (relop -> LESS .)


state 50

    (71) relop -> LESSEQUAL .

    VARIABLE        reduce using rule 71 (relop -> LESSEQUAL .)
    CADENA1         reduce using rule 71 (relop -> LESSEQUAL .)
    CADENA2         reduce using rule 71 (relop -> LESSEQUAL .)
    PLUS            reduce using rule 71 (relop -> LESSEQUAL .)
    MINUS           reduce using rule 71 (relop -> LESSEQUAL .)
    LPAREN          reduce using rule 71 (relop -> LESSEQUAL .)
    NUMBER          reduce using rule 71 (relop -> LESSEQUAL .)
    VARIABLE2       reduce using rule 71 (relop -> LESSEQUAL .)


state 51

    (72) relop -> GREATER .

    VARIABLE        reduce using rule 72 (relop -> GREATER .)
    CADENA1         reduce using rule 72 (relop -> GREATER .)
    CADENA2         reduce using rule 72 (relop -> GREATER .)
    PLUS            reduce using rule 72 (relop -> GREATER .)
    MINUS           reduce using rule 72 (relop -> GREATER .)
    LPAREN          reduce using rule 72 (relop -> GREATER .)
    NUMBER          reduce using rule 72 (relop -> GREATER .)
    VARIABLE2       reduce using rule 72 (relop -> GREATER .)


state 52

    (73) relop -> GREATEREQUAL .

    VARIABLE        reduce using rule 73 (relop -> GREATEREQUAL .)
    CADENA1         reduce using rule 73 (relop -> GREATEREQUAL .)
    CADENA2         reduce using rule 73 (relop -> GREATEREQUAL .)
    PLUS            reduce using rule 73 (relop -> GREATEREQUAL .)
    MINUS           reduce using rule 73 (relop -> GREATEREQUAL .)
    LPAREN          reduce using rule 73 (relop -> GREATEREQUAL .)
    NUMBER          reduce using rule 73 (relop -> GREATEREQUAL .)
    VARIABLE2       reduce using rule 73 (relop -> GREATEREQUAL .)


state 53

    (74) relop -> DEQUAL .

    VARIABLE        reduce using rule 74 (relop -> DEQUAL .)
    CADENA1         reduce using rule 74 (relop -> DEQUAL .)
    CADENA2         reduce using rule 74 (relop -> DEQUAL .)
    PLUS            reduce using rule 74 (relop -> DEQUAL .)
    MINUS           reduce using rule 74 (relop -> DEQUAL .)
    LPAREN          reduce using rule 74 (relop -> DEQUAL .)
    NUMBER          reduce using rule 74 (relop -> DEQUAL .)
    VARIABLE2       reduce using rule 74 (relop -> DEQUAL .)


state 54

    (75) relop -> DISTINT .

    VARIABLE        reduce using rule 75 (relop -> DISTINT .)
    CADENA1         reduce using rule 75 (relop -> DISTINT .)
    CADENA2         reduce using rule 75 (relop -> DISTINT .)
    PLUS            reduce using rule 75 (relop -> DISTINT .)
    MINUS           reduce using rule 75 (relop -> DISTINT .)
    LPAREN          reduce using rule 75 (relop -> DISTINT .)
    NUMBER          reduce using rule 75 (relop -> DISTINT .)
    VARIABLE2       reduce using rule 75 (relop -> DISTINT .)


state 55

    (76) relop -> ISEQUAL .

    VARIABLE        reduce using rule 76 (relop -> ISEQUAL .)
    CADENA1         reduce using rule 76 (relop -> ISEQUAL .)
    CADENA2         reduce using rule 76 (relop -> ISEQUAL .)
    PLUS            reduce using rule 76 (relop -> ISEQUAL .)
    MINUS           reduce using rule 76 (relop -> ISEQUAL .)
    LPAREN          reduce using rule 76 (relop -> ISEQUAL .)
    NUMBER          reduce using rule 76 (relop -> ISEQUAL .)
    VARIABLE2       reduce using rule 76 (relop -> ISEQUAL .)


state 56

    (26) var_declaration2 -> NUMBER COMMA . var_declaration2
    (17) var_declaration2 -> . VARIABLE
    (18) var_declaration2 -> . VARIABLE COMMA var_declaration2
    (19) var_declaration2 -> . VARIABLE EQUAL NUMBER COMMA var_declaration2
    (20) var_declaration2 -> . VARIABLE EQUAL NUMBER
    (21) var_declaration2 -> . VARIABLE EQUAL VARIABLE COMMA var_declaration2
    (22) var_declaration2 -> . VARIABLE EQUAL VARIABLE
    (23) var_declaration2 -> . COMMA
    (24) var_declaration2 -> . VARIABLE EQUAL VARIABLE simple_expression
    (25) var_declaration2 -> . VARIABLE EQUAL LBRACKET NUMBER COMMA var_declaration2
    (26) var_declaration2 -> . NUMBER COMMA var_declaration2
    (27) var_declaration2 -> . NUMBER RBRACKET
    (28) var_declaration2 -> . VARIABLE EQUAL LBRACKET CADENA1 COMMA var_declaration2
    (29) var_declaration2 -> . CADENA1 COMMA var_declaration2
    (30) var_declaration2 -> . CADENA1 RBRACKET

    VARIABLE        shift and go to state 93
    COMMA           shift and go to state 31
    NUMBER          shift and go to state 95
    CADENA1         shift and go to state 96

    var_declaration2               shift and go to state 100

state 57

    (27) var_declaration2 -> NUMBER RBRACKET .

    SEMICOLON       reduce using rule 27 (var_declaration2 -> NUMBER RBRACKET .)


state 58

    (52) selection_stmt -> IF LPAREN . expression RPAREN statement
    (53) selection_stmt -> IF LPAREN . expression RPAREN statement ELSE statement
    (54) selection_stmt -> IF LPAREN . expression RPAREN statement ELSEIF statement
    (64) expression -> . var_val EQUAL expression
    (65) expression -> . simple_expression
    (66) var_val -> . VARIABLE
    (67) var_val -> . VARIABLE LBRACKET expression RBRACKET
    (68) simple_expression -> . additive_expression relop additive_expression
    (69) simple_expression -> . additive_expression
    (77) additive_expression -> . additive_expression addop term
    (78) additive_expression -> . term
    (79) additive_expression -> . term MINUSMINUS
    (80) additive_expression -> . term PLUSPLUS
    (81) additive_expression -> . addop term
    (84) term -> . term mulop factor
    (85) term -> . factor
    (86) term -> . CADENA1
    (87) term -> . CADENA2
    (82) addop -> . PLUS
    (83) addop -> . MINUS
    (90) factor -> . LPAREN expression RPAREN
    (91) factor -> . var_val
    (92) factor -> . call
    (93) factor -> . NUMBER
    (94) call -> . VARIABLE2 LPAREN args RPAREN

    VARIABLE        shift and go to state 60
    CADENA1         shift and go to state 61
    CADENA2         shift and go to state 36
    PLUS            shift and go to state 37
    MINUS           shift and go to state 38
    LPAREN          shift and go to state 17
    NUMBER          shift and go to state 62
    VARIABLE2       shift and go to state 28

    expression                     shift and go to state 101
    var_val                        shift and go to state 20
    simple_expression              shift and go to state 32
    additive_expression            shift and go to state 25
    addop                          shift and go to state 33
    term                           shift and go to state 34
    factor                         shift and go to state 35
    call                           shift and go to state 39

state 59

    (90) factor -> LPAREN expression . RPAREN

    RPAREN          shift and go to state 102


state 60

    (66) var_val -> VARIABLE .
    (67) var_val -> VARIABLE . LBRACKET expression RBRACKET

    EQUAL           reduce using rule 66 (var_val -> VARIABLE .)
    MINUSMINUS      reduce using rule 66 (var_val -> VARIABLE .)
    PLUSPLUS        reduce using rule 66 (var_val -> VARIABLE .)
    TIMES           reduce using rule 66 (var_val -> VARIABLE .)
    DIVIDE          reduce using rule 66 (var_val -> VARIABLE .)
    LESS            reduce using rule 66 (var_val -> VARIABLE .)
    LESSEQUAL       reduce using rule 66 (var_val -> VARIABLE .)
    GREATER         reduce using rule 66 (var_val -> VARIABLE .)
    GREATEREQUAL    reduce using rule 66 (var_val -> VARIABLE .)
    DEQUAL          reduce using rule 66 (var_val -> VARIABLE .)
    DISTINT         reduce using rule 66 (var_val -> VARIABLE .)
    ISEQUAL         reduce using rule 66 (var_val -> VARIABLE .)
    PLUS            reduce using rule 66 (var_val -> VARIABLE .)
    MINUS           reduce using rule 66 (var_val -> VARIABLE .)
    RPAREN          reduce using rule 66 (var_val -> VARIABLE .)
    SEMICOLON       reduce using rule 66 (var_val -> VARIABLE .)
    RBRACKET        reduce using rule 66 (var_val -> VARIABLE .)
    COMMA           reduce using rule 66 (var_val -> VARIABLE .)
    COLON           reduce using rule 66 (var_val -> VARIABLE .)
    AS              reduce using rule 66 (var_val -> VARIABLE .)
    LBRACKET        shift and go to state 103


state 61

    (86) term -> CADENA1 .

    MINUSMINUS      reduce using rule 86 (term -> CADENA1 .)
    PLUSPLUS        reduce using rule 86 (term -> CADENA1 .)
    TIMES           reduce using rule 86 (term -> CADENA1 .)
    DIVIDE          reduce using rule 86 (term -> CADENA1 .)
    LESS            reduce using rule 86 (term -> CADENA1 .)
    LESSEQUAL       reduce using rule 86 (term -> CADENA1 .)
    GREATER         reduce using rule 86 (term -> CADENA1 .)
    GREATEREQUAL    reduce using rule 86 (term -> CADENA1 .)
    DEQUAL          reduce using rule 86 (term -> CADENA1 .)
    DISTINT         reduce using rule 86 (term -> CADENA1 .)
    ISEQUAL         reduce using rule 86 (term -> CADENA1 .)
    PLUS            reduce using rule 86 (term -> CADENA1 .)
    MINUS           reduce using rule 86 (term -> CADENA1 .)
    RPAREN          reduce using rule 86 (term -> CADENA1 .)
    SEMICOLON       reduce using rule 86 (term -> CADENA1 .)
    RBRACKET        reduce using rule 86 (term -> CADENA1 .)
    COMMA           reduce using rule 86 (term -> CADENA1 .)
    COLON           reduce using rule 86 (term -> CADENA1 .)


state 62

    (93) factor -> NUMBER .

    MINUSMINUS      reduce using rule 93 (factor -> NUMBER .)
    PLUSPLUS        reduce using rule 93 (factor -> NUMBER .)
    TIMES           reduce using rule 93 (factor -> NUMBER .)
    DIVIDE          reduce using rule 93 (factor -> NUMBER .)
    LESS            reduce using rule 93 (factor -> NUMBER .)
    LESSEQUAL       reduce using rule 93 (factor -> NUMBER .)
    GREATER         reduce using rule 93 (factor -> NUMBER .)
    GREATEREQUAL    reduce using rule 93 (factor -> NUMBER .)
    DEQUAL          reduce using rule 93 (factor -> NUMBER .)
    DISTINT         reduce using rule 93 (factor -> NUMBER .)
    ISEQUAL         reduce using rule 93 (factor -> NUMBER .)
    PLUS            reduce using rule 93 (factor -> NUMBER .)
    MINUS           reduce using rule 93 (factor -> NUMBER .)
    RPAREN          reduce using rule 93 (factor -> NUMBER .)
    SEMICOLON       reduce using rule 93 (factor -> NUMBER .)
    RBRACKET        reduce using rule 93 (factor -> NUMBER .)
    COMMA           reduce using rule 93 (factor -> NUMBER .)
    COLON           reduce using rule 93 (factor -> NUMBER .)


state 63

    (50) expression_stmt -> expression SEMICOLON .

    QUESTIONMARK    reduce using rule 50 (expression_stmt -> expression SEMICOLON .)
    VARIABLE        reduce using rule 50 (expression_stmt -> expression SEMICOLON .)
    IF              reduce using rule 50 (expression_stmt -> expression SEMICOLON .)
    SWITCH          reduce using rule 50 (expression_stmt -> expression SEMICOLON .)
    CASE            reduce using rule 50 (expression_stmt -> expression SEMICOLON .)
    DEFAULT         reduce using rule 50 (expression_stmt -> expression SEMICOLON .)
    WHILE           reduce using rule 50 (expression_stmt -> expression SEMICOLON .)
    FOR             reduce using rule 50 (expression_stmt -> expression SEMICOLON .)
    FOREACH         reduce using rule 50 (expression_stmt -> expression SEMICOLON .)
    FUNCTION        reduce using rule 50 (expression_stmt -> expression SEMICOLON .)
    ECHO            reduce using rule 50 (expression_stmt -> expression SEMICOLON .)
    SEMICOLON       reduce using rule 50 (expression_stmt -> expression SEMICOLON .)
    COMMA           reduce using rule 50 (expression_stmt -> expression SEMICOLON .)
    NUMBER          reduce using rule 50 (expression_stmt -> expression SEMICOLON .)
    CADENA1         reduce using rule 50 (expression_stmt -> expression SEMICOLON .)
    CADENA2         reduce using rule 50 (expression_stmt -> expression SEMICOLON .)
    PLUS            reduce using rule 50 (expression_stmt -> expression SEMICOLON .)
    MINUS           reduce using rule 50 (expression_stmt -> expression SEMICOLON .)
    LPAREN          reduce using rule 50 (expression_stmt -> expression SEMICOLON .)
    VARIABLE2       reduce using rule 50 (expression_stmt -> expression SEMICOLON .)
    BREAK           reduce using rule 50 (expression_stmt -> expression SEMICOLON .)
    ELSE            reduce using rule 50 (expression_stmt -> expression SEMICOLON .)
    ELSEIF          reduce using rule 50 (expression_stmt -> expression SEMICOLON .)
    RBLOCK          reduce using rule 50 (expression_stmt -> expression SEMICOLON .)
    LBLOCK          reduce using rule 50 (expression_stmt -> expression SEMICOLON .)
    RETURN          reduce using rule 50 (expression_stmt -> expression SEMICOLON .)


state 64

    (55) selection_stmt -> SWITCH LPAREN . var_val RPAREN statement
    (66) var_val -> . VARIABLE
    (67) var_val -> . VARIABLE LBRACKET expression RBRACKET

    VARIABLE        shift and go to state 60

    var_val                        shift and go to state 104

state 65

    (64) expression -> var_val EQUAL . expression
    (64) expression -> . var_val EQUAL expression
    (65) expression -> . simple_expression
    (66) var_val -> . VARIABLE
    (67) var_val -> . VARIABLE LBRACKET expression RBRACKET
    (68) simple_expression -> . additive_expression relop additive_expression
    (69) simple_expression -> . additive_expression
    (77) additive_expression -> . additive_expression addop term
    (78) additive_expression -> . term
    (79) additive_expression -> . term MINUSMINUS
    (80) additive_expression -> . term PLUSPLUS
    (81) additive_expression -> . addop term
    (84) term -> . term mulop factor
    (85) term -> . factor
    (86) term -> . CADENA1
    (87) term -> . CADENA2
    (82) addop -> . PLUS
    (83) addop -> . MINUS
    (90) factor -> . LPAREN expression RPAREN
    (91) factor -> . var_val
    (92) factor -> . call
    (93) factor -> . NUMBER
    (94) call -> . VARIABLE2 LPAREN args RPAREN

    VARIABLE        shift and go to state 60
    CADENA1         shift and go to state 61
    CADENA2         shift and go to state 36
    PLUS            shift and go to state 37
    MINUS           shift and go to state 38
    LPAREN          shift and go to state 17
    NUMBER          shift and go to state 62
    VARIABLE2       shift and go to state 28

    var_val                        shift and go to state 20
    expression                     shift and go to state 105
    simple_expression              shift and go to state 32
    additive_expression            shift and go to state 25
    addop                          shift and go to state 33
    term                           shift and go to state 34
    factor                         shift and go to state 35
    call                           shift and go to state 39

state 66

    (56) selection_stmt -> CASE NUMBER . COLON statement BREAK SEMICOLON

    COLON           shift and go to state 106


state 67

    (57) selection_stmt -> DEFAULT COLON . statement BREAK SEMICOLON
    (44) statement -> . expression_stmt
    (45) statement -> . compount_stmt
    (46) statement -> . selection_stmt
    (47) statement -> . iteration_stmt
    (48) statement -> . show_in_screen
    (49) statement -> . return_stmt
    (50) expression_stmt -> . expression SEMICOLON
    (51) expression_stmt -> . SEMICOLON
    (38) compount_stmt -> . LBLOCK local_declarations statement_list RBLOCK
    (52) selection_stmt -> . IF LPAREN expression RPAREN statement
    (53) selection_stmt -> . IF LPAREN expression RPAREN statement ELSE statement
    (54) selection_stmt -> . IF LPAREN expression RPAREN statement ELSEIF statement
    (55) selection_stmt -> . SWITCH LPAREN var_val RPAREN statement
    (56) selection_stmt -> . CASE NUMBER COLON statement BREAK SEMICOLON
    (57) selection_stmt -> . DEFAULT COLON statement BREAK SEMICOLON
    (58) selection_stmt -> . VARIABLE relop VARIABLE QUESTIONMARK expression COLON expression SEMICOLON
    (59) iteration_stmt -> . WHILE LPAREN expression RPAREN statement
    (60) iteration_stmt -> . FOR LPAREN var_declaration2 SEMICOLON expression SEMICOLON additive_expression RPAREN statement
    (61) iteration_stmt -> . FOREACH LPAREN var_val AS var_val RPAREN statement
    (12) show_in_screen -> . ECHO var_val SEMICOLON
    (13) show_in_screen -> . ECHO CADENA1 SEMICOLON
    (14) show_in_screen -> . ECHO selection_stmt
    (62) return_stmt -> . RETURN SEMICOLON
    (63) return_stmt -> . RETURN expression SEMICOLON
    (64) expression -> . var_val EQUAL expression
    (65) expression -> . simple_expression
    (66) var_val -> . VARIABLE
    (67) var_val -> . VARIABLE LBRACKET expression RBRACKET
    (68) simple_expression -> . additive_expression relop additive_expression
    (69) simple_expression -> . additive_expression
    (77) additive_expression -> . additive_expression addop term
    (78) additive_expression -> . term
    (79) additive_expression -> . term MINUSMINUS
    (80) additive_expression -> . term PLUSPLUS
    (81) additive_expression -> . addop term
    (84) term -> . term mulop factor
    (85) term -> . factor
    (86) term -> . CADENA1
    (87) term -> . CADENA2
    (82) addop -> . PLUS
    (83) addop -> . MINUS
    (90) factor -> . LPAREN expression RPAREN
    (91) factor -> . var_val
    (92) factor -> . call
    (93) factor -> . NUMBER
    (94) call -> . VARIABLE2 LPAREN args RPAREN

    SEMICOLON       shift and go to state 13
    LBLOCK          shift and go to state 114
    IF              shift and go to state 16
    SWITCH          shift and go to state 19
    CASE            shift and go to state 21
    DEFAULT         shift and go to state 22
    VARIABLE        shift and go to state 115
    WHILE           shift and go to state 23
    FOR             shift and go to state 24
    FOREACH         shift and go to state 26
    ECHO            shift and go to state 29
    RETURN          shift and go to state 116
    CADENA1         shift and go to state 61
    CADENA2         shift and go to state 36
    PLUS            shift and go to state 37
    MINUS           shift and go to state 38
    LPAREN          shift and go to state 17
    NUMBER          shift and go to state 62
    VARIABLE2       shift and go to state 28

    statement                      shift and go to state 107
    expression_stmt                shift and go to state 108
    compount_stmt                  shift and go to state 109
    selection_stmt                 shift and go to state 110
    iteration_stmt                 shift and go to state 111
    show_in_screen                 shift and go to state 112
    return_stmt                    shift and go to state 113
    expression                     shift and go to state 18
    var_val                        shift and go to state 20
    additive_expression            shift and go to state 25
    simple_expression              shift and go to state 32
    addop                          shift and go to state 33
    term                           shift and go to state 34
    factor                         shift and go to state 35
    call                           shift and go to state 39

state 68

    (59) iteration_stmt -> WHILE LPAREN . expression RPAREN statement
    (64) expression -> . var_val EQUAL expression
    (65) expression -> . simple_expression
    (66) var_val -> . VARIABLE
    (67) var_val -> . VARIABLE LBRACKET expression RBRACKET
    (68) simple_expression -> . additive_expression relop additive_expression
    (69) simple_expression -> . additive_expression
    (77) additive_expression -> . additive_expression addop term
    (78) additive_expression -> . term
    (79) additive_expression -> . term MINUSMINUS
    (80) additive_expression -> . term PLUSPLUS
    (81) additive_expression -> . addop term
    (84) term -> . term mulop factor
    (85) term -> . factor
    (86) term -> . CADENA1
    (87) term -> . CADENA2
    (82) addop -> . PLUS
    (83) addop -> . MINUS
    (90) factor -> . LPAREN expression RPAREN
    (91) factor -> . var_val
    (92) factor -> . call
    (93) factor -> . NUMBER
    (94) call -> . VARIABLE2 LPAREN args RPAREN

    VARIABLE        shift and go to state 60
    CADENA1         shift and go to state 61
    CADENA2         shift and go to state 36
    PLUS            shift and go to state 37
    MINUS           shift and go to state 38
    LPAREN          shift and go to state 17
    NUMBER          shift and go to state 62
    VARIABLE2       shift and go to state 28

    expression                     shift and go to state 117
    var_val                        shift and go to state 20
    simple_expression              shift and go to state 32
    additive_expression            shift and go to state 25
    addop                          shift and go to state 33
    term                           shift and go to state 34
    factor                         shift and go to state 35
    call                           shift and go to state 39

state 69

    (60) iteration_stmt -> FOR LPAREN . var_declaration2 SEMICOLON expression SEMICOLON additive_expression RPAREN statement
    (17) var_declaration2 -> . VARIABLE
    (18) var_declaration2 -> . VARIABLE COMMA var_declaration2
    (19) var_declaration2 -> . VARIABLE EQUAL NUMBER COMMA var_declaration2
    (20) var_declaration2 -> . VARIABLE EQUAL NUMBER
    (21) var_declaration2 -> . VARIABLE EQUAL VARIABLE COMMA var_declaration2
    (22) var_declaration2 -> . VARIABLE EQUAL VARIABLE
    (23) var_declaration2 -> . COMMA
    (24) var_declaration2 -> . VARIABLE EQUAL VARIABLE simple_expression
    (25) var_declaration2 -> . VARIABLE EQUAL LBRACKET NUMBER COMMA var_declaration2
    (26) var_declaration2 -> . NUMBER COMMA var_declaration2
    (27) var_declaration2 -> . NUMBER RBRACKET
    (28) var_declaration2 -> . VARIABLE EQUAL LBRACKET CADENA1 COMMA var_declaration2
    (29) var_declaration2 -> . CADENA1 COMMA var_declaration2
    (30) var_declaration2 -> . CADENA1 RBRACKET

    VARIABLE        shift and go to state 93
    COMMA           shift and go to state 31
    NUMBER          shift and go to state 95
    CADENA1         shift and go to state 96

    var_declaration2               shift and go to state 118

state 70

    (68) simple_expression -> additive_expression relop . additive_expression
    (77) additive_expression -> . additive_expression addop term
    (78) additive_expression -> . term
    (79) additive_expression -> . term MINUSMINUS
    (80) additive_expression -> . term PLUSPLUS
    (81) additive_expression -> . addop term
    (84) term -> . term mulop factor
    (85) term -> . factor
    (86) term -> . CADENA1
    (87) term -> . CADENA2
    (82) addop -> . PLUS
    (83) addop -> . MINUS
    (90) factor -> . LPAREN expression RPAREN
    (91) factor -> . var_val
    (92) factor -> . call
    (93) factor -> . NUMBER
    (66) var_val -> . VARIABLE
    (67) var_val -> . VARIABLE LBRACKET expression RBRACKET
    (94) call -> . VARIABLE2 LPAREN args RPAREN

    CADENA1         shift and go to state 61
    CADENA2         shift and go to state 36
    PLUS            shift and go to state 37
    MINUS           shift and go to state 38
    LPAREN          shift and go to state 17
    NUMBER          shift and go to state 62
    VARIABLE        shift and go to state 60
    VARIABLE2       shift and go to state 28

    additive_expression            shift and go to state 119
    addop                          shift and go to state 33
    term                           shift and go to state 34
    factor                         shift and go to state 35
    var_val                        shift and go to state 82
    call                           shift and go to state 39

state 71

    (77) additive_expression -> additive_expression addop . term
    (84) term -> . term mulop factor
    (85) term -> . factor
    (86) term -> . CADENA1
    (87) term -> . CADENA2
    (90) factor -> . LPAREN expression RPAREN
    (91) factor -> . var_val
    (92) factor -> . call
    (93) factor -> . NUMBER
    (66) var_val -> . VARIABLE
    (67) var_val -> . VARIABLE LBRACKET expression RBRACKET
    (94) call -> . VARIABLE2 LPAREN args RPAREN

    CADENA1         shift and go to state 61
    CADENA2         shift and go to state 36
    LPAREN          shift and go to state 17
    NUMBER          shift and go to state 62
    VARIABLE        shift and go to state 60
    VARIABLE2       shift and go to state 28

    term                           shift and go to state 120
    factor                         shift and go to state 35
    var_val                        shift and go to state 82
    call                           shift and go to state 39

state 72

    (61) iteration_stmt -> FOREACH LPAREN . var_val AS var_val RPAREN statement
    (66) var_val -> . VARIABLE
    (67) var_val -> . VARIABLE LBRACKET expression RBRACKET

    VARIABLE        shift and go to state 60

    var_val                        shift and go to state 121

state 73

    (31) fun_declaration -> FUNCTION VARIABLE2 . LPAREN params RPAREN statement

    LPAREN          shift and go to state 122


state 74

    (94) call -> VARIABLE2 LPAREN . args RPAREN
    (95) args -> . args_list
    (96) args -> . empty_function
    (97) args_list -> . args_list COMMA expression
    (98) args_list -> . expression
    (99) empty_function -> .
    (64) expression -> . var_val EQUAL expression
    (65) expression -> . simple_expression
    (66) var_val -> . VARIABLE
    (67) var_val -> . VARIABLE LBRACKET expression RBRACKET
    (68) simple_expression -> . additive_expression relop additive_expression
    (69) simple_expression -> . additive_expression
    (77) additive_expression -> . additive_expression addop term
    (78) additive_expression -> . term
    (79) additive_expression -> . term MINUSMINUS
    (80) additive_expression -> . term PLUSPLUS
    (81) additive_expression -> . addop term
    (84) term -> . term mulop factor
    (85) term -> . factor
    (86) term -> . CADENA1
    (87) term -> . CADENA2
    (82) addop -> . PLUS
    (83) addop -> . MINUS
    (90) factor -> . LPAREN expression RPAREN
    (91) factor -> . var_val
    (92) factor -> . call
    (93) factor -> . NUMBER
    (94) call -> . VARIABLE2 LPAREN args RPAREN

    RPAREN          reduce using rule 99 (empty_function -> .)
    VARIABLE        shift and go to state 60
    CADENA1         shift and go to state 61
    CADENA2         shift and go to state 36
    PLUS            shift and go to state 37
    MINUS           shift and go to state 38
    LPAREN          shift and go to state 17
    NUMBER          shift and go to state 62
    VARIABLE2       shift and go to state 28

    args                           shift and go to state 123
    args_list                      shift and go to state 124
    empty_function                 shift and go to state 125
    expression                     shift and go to state 126
    var_val                        shift and go to state 20
    simple_expression              shift and go to state 32
    additive_expression            shift and go to state 25
    addop                          shift and go to state 33
    term                           shift and go to state 34
    factor                         shift and go to state 35
    call                           shift and go to state 39

state 75

    (12) show_in_screen -> ECHO var_val . SEMICOLON

    SEMICOLON       shift and go to state 127


state 76

    (13) show_in_screen -> ECHO CADENA1 . SEMICOLON

    SEMICOLON       shift and go to state 128


state 77

    (14) show_in_screen -> ECHO selection_stmt .

    QUESTIONMARK    reduce using rule 14 (show_in_screen -> ECHO selection_stmt .)
    VARIABLE        reduce using rule 14 (show_in_screen -> ECHO selection_stmt .)
    IF              reduce using rule 14 (show_in_screen -> ECHO selection_stmt .)
    SWITCH          reduce using rule 14 (show_in_screen -> ECHO selection_stmt .)
    CASE            reduce using rule 14 (show_in_screen -> ECHO selection_stmt .)
    DEFAULT         reduce using rule 14 (show_in_screen -> ECHO selection_stmt .)
    WHILE           reduce using rule 14 (show_in_screen -> ECHO selection_stmt .)
    FOR             reduce using rule 14 (show_in_screen -> ECHO selection_stmt .)
    FOREACH         reduce using rule 14 (show_in_screen -> ECHO selection_stmt .)
    FUNCTION        reduce using rule 14 (show_in_screen -> ECHO selection_stmt .)
    ECHO            reduce using rule 14 (show_in_screen -> ECHO selection_stmt .)
    SEMICOLON       reduce using rule 14 (show_in_screen -> ECHO selection_stmt .)
    COMMA           reduce using rule 14 (show_in_screen -> ECHO selection_stmt .)
    NUMBER          reduce using rule 14 (show_in_screen -> ECHO selection_stmt .)
    CADENA1         reduce using rule 14 (show_in_screen -> ECHO selection_stmt .)
    CADENA2         reduce using rule 14 (show_in_screen -> ECHO selection_stmt .)
    PLUS            reduce using rule 14 (show_in_screen -> ECHO selection_stmt .)
    MINUS           reduce using rule 14 (show_in_screen -> ECHO selection_stmt .)
    LPAREN          reduce using rule 14 (show_in_screen -> ECHO selection_stmt .)
    VARIABLE2       reduce using rule 14 (show_in_screen -> ECHO selection_stmt .)
    BREAK           reduce using rule 14 (show_in_screen -> ECHO selection_stmt .)
    ELSE            reduce using rule 14 (show_in_screen -> ECHO selection_stmt .)
    ELSEIF          reduce using rule 14 (show_in_screen -> ECHO selection_stmt .)
    RBLOCK          reduce using rule 14 (show_in_screen -> ECHO selection_stmt .)
    LBLOCK          reduce using rule 14 (show_in_screen -> ECHO selection_stmt .)
    RETURN          reduce using rule 14 (show_in_screen -> ECHO selection_stmt .)


state 78

    (66) var_val -> VARIABLE .
    (67) var_val -> VARIABLE . LBRACKET expression RBRACKET
    (58) selection_stmt -> VARIABLE . relop VARIABLE QUESTIONMARK expression COLON expression SEMICOLON
    (70) relop -> . LESS
    (71) relop -> . LESSEQUAL
    (72) relop -> . GREATER
    (73) relop -> . GREATEREQUAL
    (74) relop -> . DEQUAL
    (75) relop -> . DISTINT
    (76) relop -> . ISEQUAL

    SEMICOLON       reduce using rule 66 (var_val -> VARIABLE .)
    LBRACKET        shift and go to state 103
    LESS            shift and go to state 49
    LESSEQUAL       shift and go to state 50
    GREATER         shift and go to state 51
    GREATEREQUAL    shift and go to state 52
    DEQUAL          shift and go to state 53
    DISTINT         shift and go to state 54
    ISEQUAL         shift and go to state 55

    relop                          shift and go to state 46

state 79

    (29) var_declaration2 -> CADENA1 COMMA . var_declaration2
    (17) var_declaration2 -> . VARIABLE
    (18) var_declaration2 -> . VARIABLE COMMA var_declaration2
    (19) var_declaration2 -> . VARIABLE EQUAL NUMBER COMMA var_declaration2
    (20) var_declaration2 -> . VARIABLE EQUAL NUMBER
    (21) var_declaration2 -> . VARIABLE EQUAL VARIABLE COMMA var_declaration2
    (22) var_declaration2 -> . VARIABLE EQUAL VARIABLE
    (23) var_declaration2 -> . COMMA
    (24) var_declaration2 -> . VARIABLE EQUAL VARIABLE simple_expression
    (25) var_declaration2 -> . VARIABLE EQUAL LBRACKET NUMBER COMMA var_declaration2
    (26) var_declaration2 -> . NUMBER COMMA var_declaration2
    (27) var_declaration2 -> . NUMBER RBRACKET
    (28) var_declaration2 -> . VARIABLE EQUAL LBRACKET CADENA1 COMMA var_declaration2
    (29) var_declaration2 -> . CADENA1 COMMA var_declaration2
    (30) var_declaration2 -> . CADENA1 RBRACKET

    VARIABLE        shift and go to state 93
    COMMA           shift and go to state 31
    NUMBER          shift and go to state 95
    CADENA1         shift and go to state 96

    var_declaration2               shift and go to state 129

state 80

    (30) var_declaration2 -> CADENA1 RBRACKET .

    SEMICOLON       reduce using rule 30 (var_declaration2 -> CADENA1 RBRACKET .)


state 81

    (81) additive_expression -> addop term .
    (84) term -> term . mulop factor
    (88) mulop -> . TIMES
    (89) mulop -> . DIVIDE

    LESS            reduce using rule 81 (additive_expression -> addop term .)
    LESSEQUAL       reduce using rule 81 (additive_expression -> addop term .)
    GREATER         reduce using rule 81 (additive_expression -> addop term .)
    GREATEREQUAL    reduce using rule 81 (additive_expression -> addop term .)
    DEQUAL          reduce using rule 81 (additive_expression -> addop term .)
    DISTINT         reduce using rule 81 (additive_expression -> addop term .)
    ISEQUAL         reduce using rule 81 (additive_expression -> addop term .)
    PLUS            reduce using rule 81 (additive_expression -> addop term .)
    MINUS           reduce using rule 81 (additive_expression -> addop term .)
    SEMICOLON       reduce using rule 81 (additive_expression -> addop term .)
    RPAREN          reduce using rule 81 (additive_expression -> addop term .)
    RBRACKET        reduce using rule 81 (additive_expression -> addop term .)
    COMMA           reduce using rule 81 (additive_expression -> addop term .)
    COLON           reduce using rule 81 (additive_expression -> addop term .)
    TIMES           shift and go to state 86
    DIVIDE          shift and go to state 87

    mulop                          shift and go to state 85

state 82

    (91) factor -> var_val .

    TIMES           reduce using rule 91 (factor -> var_val .)
    DIVIDE          reduce using rule 91 (factor -> var_val .)
    LESS            reduce using rule 91 (factor -> var_val .)
    LESSEQUAL       reduce using rule 91 (factor -> var_val .)
    GREATER         reduce using rule 91 (factor -> var_val .)
    GREATEREQUAL    reduce using rule 91 (factor -> var_val .)
    DEQUAL          reduce using rule 91 (factor -> var_val .)
    DISTINT         reduce using rule 91 (factor -> var_val .)
    ISEQUAL         reduce using rule 91 (factor -> var_val .)
    PLUS            reduce using rule 91 (factor -> var_val .)
    MINUS           reduce using rule 91 (factor -> var_val .)
    SEMICOLON       reduce using rule 91 (factor -> var_val .)
    RPAREN          reduce using rule 91 (factor -> var_val .)
    RBRACKET        reduce using rule 91 (factor -> var_val .)
    COMMA           reduce using rule 91 (factor -> var_val .)
    COLON           reduce using rule 91 (factor -> var_val .)
    MINUSMINUS      reduce using rule 91 (factor -> var_val .)
    PLUSPLUS        reduce using rule 91 (factor -> var_val .)


state 83

    (79) additive_expression -> term MINUSMINUS .

    LESS            reduce using rule 79 (additive_expression -> term MINUSMINUS .)
    LESSEQUAL       reduce using rule 79 (additive_expression -> term MINUSMINUS .)
    GREATER         reduce using rule 79 (additive_expression -> term MINUSMINUS .)
    GREATEREQUAL    reduce using rule 79 (additive_expression -> term MINUSMINUS .)
    DEQUAL          reduce using rule 79 (additive_expression -> term MINUSMINUS .)
    DISTINT         reduce using rule 79 (additive_expression -> term MINUSMINUS .)
    ISEQUAL         reduce using rule 79 (additive_expression -> term MINUSMINUS .)
    PLUS            reduce using rule 79 (additive_expression -> term MINUSMINUS .)
    MINUS           reduce using rule 79 (additive_expression -> term MINUSMINUS .)
    SEMICOLON       reduce using rule 79 (additive_expression -> term MINUSMINUS .)
    RPAREN          reduce using rule 79 (additive_expression -> term MINUSMINUS .)
    RBRACKET        reduce using rule 79 (additive_expression -> term MINUSMINUS .)
    COMMA           reduce using rule 79 (additive_expression -> term MINUSMINUS .)
    COLON           reduce using rule 79 (additive_expression -> term MINUSMINUS .)


state 84

    (80) additive_expression -> term PLUSPLUS .

    LESS            reduce using rule 80 (additive_expression -> term PLUSPLUS .)
    LESSEQUAL       reduce using rule 80 (additive_expression -> term PLUSPLUS .)
    GREATER         reduce using rule 80 (additive_expression -> term PLUSPLUS .)
    GREATEREQUAL    reduce using rule 80 (additive_expression -> term PLUSPLUS .)
    DEQUAL          reduce using rule 80 (additive_expression -> term PLUSPLUS .)
    DISTINT         reduce using rule 80 (additive_expression -> term PLUSPLUS .)
    ISEQUAL         reduce using rule 80 (additive_expression -> term PLUSPLUS .)
    PLUS            reduce using rule 80 (additive_expression -> term PLUSPLUS .)
    MINUS           reduce using rule 80 (additive_expression -> term PLUSPLUS .)
    SEMICOLON       reduce using rule 80 (additive_expression -> term PLUSPLUS .)
    RPAREN          reduce using rule 80 (additive_expression -> term PLUSPLUS .)
    RBRACKET        reduce using rule 80 (additive_expression -> term PLUSPLUS .)
    COMMA           reduce using rule 80 (additive_expression -> term PLUSPLUS .)
    COLON           reduce using rule 80 (additive_expression -> term PLUSPLUS .)


state 85

    (84) term -> term mulop . factor
    (90) factor -> . LPAREN expression RPAREN
    (91) factor -> . var_val
    (92) factor -> . call
    (93) factor -> . NUMBER
    (66) var_val -> . VARIABLE
    (67) var_val -> . VARIABLE LBRACKET expression RBRACKET
    (94) call -> . VARIABLE2 LPAREN args RPAREN

    LPAREN          shift and go to state 17
    NUMBER          shift and go to state 62
    VARIABLE        shift and go to state 60
    VARIABLE2       shift and go to state 28

    factor                         shift and go to state 130
    var_val                        shift and go to state 82
    call                           shift and go to state 39

state 86

    (88) mulop -> TIMES .

    LPAREN          reduce using rule 88 (mulop -> TIMES .)
    NUMBER          reduce using rule 88 (mulop -> TIMES .)
    VARIABLE        reduce using rule 88 (mulop -> TIMES .)
    VARIABLE2       reduce using rule 88 (mulop -> TIMES .)


state 87

    (89) mulop -> DIVIDE .

    LPAREN          reduce using rule 89 (mulop -> DIVIDE .)
    NUMBER          reduce using rule 89 (mulop -> DIVIDE .)
    VARIABLE        reduce using rule 89 (mulop -> DIVIDE .)
    VARIABLE2       reduce using rule 89 (mulop -> DIVIDE .)


state 88

    (10) header_declaration -> LESS QUESTIONMARK PHP .

    VARIABLE        reduce using rule 10 (header_declaration -> LESS QUESTIONMARK PHP .)
    IF              reduce using rule 10 (header_declaration -> LESS QUESTIONMARK PHP .)
    SWITCH          reduce using rule 10 (header_declaration -> LESS QUESTIONMARK PHP .)
    CASE            reduce using rule 10 (header_declaration -> LESS QUESTIONMARK PHP .)
    DEFAULT         reduce using rule 10 (header_declaration -> LESS QUESTIONMARK PHP .)
    WHILE           reduce using rule 10 (header_declaration -> LESS QUESTIONMARK PHP .)
    FOR             reduce using rule 10 (header_declaration -> LESS QUESTIONMARK PHP .)
    FOREACH         reduce using rule 10 (header_declaration -> LESS QUESTIONMARK PHP .)
    FUNCTION        reduce using rule 10 (header_declaration -> LESS QUESTIONMARK PHP .)
    ECHO            reduce using rule 10 (header_declaration -> LESS QUESTIONMARK PHP .)
    SEMICOLON       reduce using rule 10 (header_declaration -> LESS QUESTIONMARK PHP .)
    COMMA           reduce using rule 10 (header_declaration -> LESS QUESTIONMARK PHP .)
    NUMBER          reduce using rule 10 (header_declaration -> LESS QUESTIONMARK PHP .)
    CADENA1         reduce using rule 10 (header_declaration -> LESS QUESTIONMARK PHP .)
    CADENA2         reduce using rule 10 (header_declaration -> LESS QUESTIONMARK PHP .)
    PLUS            reduce using rule 10 (header_declaration -> LESS QUESTIONMARK PHP .)
    MINUS           reduce using rule 10 (header_declaration -> LESS QUESTIONMARK PHP .)
    LPAREN          reduce using rule 10 (header_declaration -> LESS QUESTIONMARK PHP .)
    VARIABLE2       reduce using rule 10 (header_declaration -> LESS QUESTIONMARK PHP .)


state 89

    (11) footer_declaration -> QUESTIONMARK GREATER .

    $end            reduce using rule 11 (footer_declaration -> QUESTIONMARK GREATER .)


state 90

    (16) var_declaration -> VARIABLE LBRACKET NUMBER . RBRACKET SEMICOLON
    (93) factor -> NUMBER .

  ! shift/reduce conflict for RBRACKET resolved as shift
    RBRACKET        shift and go to state 131
    MINUSMINUS      reduce using rule 93 (factor -> NUMBER .)
    PLUSPLUS        reduce using rule 93 (factor -> NUMBER .)
    TIMES           reduce using rule 93 (factor -> NUMBER .)
    DIVIDE          reduce using rule 93 (factor -> NUMBER .)
    LESS            reduce using rule 93 (factor -> NUMBER .)
    LESSEQUAL       reduce using rule 93 (factor -> NUMBER .)
    GREATER         reduce using rule 93 (factor -> NUMBER .)
    GREATEREQUAL    reduce using rule 93 (factor -> NUMBER .)
    DEQUAL          reduce using rule 93 (factor -> NUMBER .)
    DISTINT         reduce using rule 93 (factor -> NUMBER .)
    ISEQUAL         reduce using rule 93 (factor -> NUMBER .)
    PLUS            reduce using rule 93 (factor -> NUMBER .)
    MINUS           reduce using rule 93 (factor -> NUMBER .)

  ! RBRACKET        [ reduce using rule 93 (factor -> NUMBER .) ]


state 91

    (67) var_val -> VARIABLE LBRACKET expression . RBRACKET

    RBRACKET        shift and go to state 132


state 92

    (58) selection_stmt -> VARIABLE relop VARIABLE . QUESTIONMARK expression COLON expression SEMICOLON

    QUESTIONMARK    shift and go to state 133


state 93

    (17) var_declaration2 -> VARIABLE .
    (18) var_declaration2 -> VARIABLE . COMMA var_declaration2
    (19) var_declaration2 -> VARIABLE . EQUAL NUMBER COMMA var_declaration2
    (20) var_declaration2 -> VARIABLE . EQUAL NUMBER
    (21) var_declaration2 -> VARIABLE . EQUAL VARIABLE COMMA var_declaration2
    (22) var_declaration2 -> VARIABLE . EQUAL VARIABLE
    (24) var_declaration2 -> VARIABLE . EQUAL VARIABLE simple_expression
    (25) var_declaration2 -> VARIABLE . EQUAL LBRACKET NUMBER COMMA var_declaration2
    (28) var_declaration2 -> VARIABLE . EQUAL LBRACKET CADENA1 COMMA var_declaration2

    SEMICOLON       reduce using rule 17 (var_declaration2 -> VARIABLE .)
    COMMA           shift and go to state 47
    EQUAL           shift and go to state 48


state 94

    (18) var_declaration2 -> VARIABLE COMMA var_declaration2 .

    SEMICOLON       reduce using rule 18 (var_declaration2 -> VARIABLE COMMA var_declaration2 .)


state 95

    (26) var_declaration2 -> NUMBER . COMMA var_declaration2
    (27) var_declaration2 -> NUMBER . RBRACKET

    COMMA           shift and go to state 56
    RBRACKET        shift and go to state 57


state 96

    (29) var_declaration2 -> CADENA1 . COMMA var_declaration2
    (30) var_declaration2 -> CADENA1 . RBRACKET

    COMMA           shift and go to state 79
    RBRACKET        shift and go to state 80


state 97

    (21) var_declaration2 -> VARIABLE EQUAL VARIABLE . COMMA var_declaration2
    (22) var_declaration2 -> VARIABLE EQUAL VARIABLE .
    (24) var_declaration2 -> VARIABLE EQUAL VARIABLE . simple_expression
    (68) simple_expression -> . additive_expression relop additive_expression
    (69) simple_expression -> . additive_expression
    (77) additive_expression -> . additive_expression addop term
    (78) additive_expression -> . term
    (79) additive_expression -> . term MINUSMINUS
    (80) additive_expression -> . term PLUSPLUS
    (81) additive_expression -> . addop term
    (84) term -> . term mulop factor
    (85) term -> . factor
    (86) term -> . CADENA1
    (87) term -> . CADENA2
    (82) addop -> . PLUS
    (83) addop -> . MINUS
    (90) factor -> . LPAREN expression RPAREN
    (91) factor -> . var_val
    (92) factor -> . call
    (93) factor -> . NUMBER
    (66) var_val -> . VARIABLE
    (67) var_val -> . VARIABLE LBRACKET expression RBRACKET
    (94) call -> . VARIABLE2 LPAREN args RPAREN

    COMMA           shift and go to state 134
    SEMICOLON       reduce using rule 22 (var_declaration2 -> VARIABLE EQUAL VARIABLE .)
    CADENA1         shift and go to state 61
    CADENA2         shift and go to state 36
    PLUS            shift and go to state 37
    MINUS           shift and go to state 38
    LPAREN          shift and go to state 17
    NUMBER          shift and go to state 62
    VARIABLE        shift and go to state 60
    VARIABLE2       shift and go to state 28

    simple_expression              shift and go to state 135
    additive_expression            shift and go to state 25
    addop                          shift and go to state 33
    term                           shift and go to state 34
    factor                         shift and go to state 35
    var_val                        shift and go to state 82
    call                           shift and go to state 39

state 98

    (19) var_declaration2 -> VARIABLE EQUAL NUMBER . COMMA var_declaration2
    (20) var_declaration2 -> VARIABLE EQUAL NUMBER .

    COMMA           shift and go to state 136
    SEMICOLON       reduce using rule 20 (var_declaration2 -> VARIABLE EQUAL NUMBER .)


state 99

    (25) var_declaration2 -> VARIABLE EQUAL LBRACKET . NUMBER COMMA var_declaration2
    (28) var_declaration2 -> VARIABLE EQUAL LBRACKET . CADENA1 COMMA var_declaration2

    NUMBER          shift and go to state 137
    CADENA1         shift and go to state 138


state 100

    (26) var_declaration2 -> NUMBER COMMA var_declaration2 .

    SEMICOLON       reduce using rule 26 (var_declaration2 -> NUMBER COMMA var_declaration2 .)


state 101

    (52) selection_stmt -> IF LPAREN expression . RPAREN statement
    (53) selection_stmt -> IF LPAREN expression . RPAREN statement ELSE statement
    (54) selection_stmt -> IF LPAREN expression . RPAREN statement ELSEIF statement

    RPAREN          shift and go to state 139


state 102

    (90) factor -> LPAREN expression RPAREN .

    MINUSMINUS      reduce using rule 90 (factor -> LPAREN expression RPAREN .)
    PLUSPLUS        reduce using rule 90 (factor -> LPAREN expression RPAREN .)
    TIMES           reduce using rule 90 (factor -> LPAREN expression RPAREN .)
    DIVIDE          reduce using rule 90 (factor -> LPAREN expression RPAREN .)
    LESS            reduce using rule 90 (factor -> LPAREN expression RPAREN .)
    LESSEQUAL       reduce using rule 90 (factor -> LPAREN expression RPAREN .)
    GREATER         reduce using rule 90 (factor -> LPAREN expression RPAREN .)
    GREATEREQUAL    reduce using rule 90 (factor -> LPAREN expression RPAREN .)
    DEQUAL          reduce using rule 90 (factor -> LPAREN expression RPAREN .)
    DISTINT         reduce using rule 90 (factor -> LPAREN expression RPAREN .)
    ISEQUAL         reduce using rule 90 (factor -> LPAREN expression RPAREN .)
    PLUS            reduce using rule 90 (factor -> LPAREN expression RPAREN .)
    MINUS           reduce using rule 90 (factor -> LPAREN expression RPAREN .)
    SEMICOLON       reduce using rule 90 (factor -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 90 (factor -> LPAREN expression RPAREN .)
    RBRACKET        reduce using rule 90 (factor -> LPAREN expression RPAREN .)
    COMMA           reduce using rule 90 (factor -> LPAREN expression RPAREN .)
    COLON           reduce using rule 90 (factor -> LPAREN expression RPAREN .)


state 103

    (67) var_val -> VARIABLE LBRACKET . expression RBRACKET
    (64) expression -> . var_val EQUAL expression
    (65) expression -> . simple_expression
    (66) var_val -> . VARIABLE
    (67) var_val -> . VARIABLE LBRACKET expression RBRACKET
    (68) simple_expression -> . additive_expression relop additive_expression
    (69) simple_expression -> . additive_expression
    (77) additive_expression -> . additive_expression addop term
    (78) additive_expression -> . term
    (79) additive_expression -> . term MINUSMINUS
    (80) additive_expression -> . term PLUSPLUS
    (81) additive_expression -> . addop term
    (84) term -> . term mulop factor
    (85) term -> . factor
    (86) term -> . CADENA1
    (87) term -> . CADENA2
    (82) addop -> . PLUS
    (83) addop -> . MINUS
    (90) factor -> . LPAREN expression RPAREN
    (91) factor -> . var_val
    (92) factor -> . call
    (93) factor -> . NUMBER
    (94) call -> . VARIABLE2 LPAREN args RPAREN

    VARIABLE        shift and go to state 60
    CADENA1         shift and go to state 61
    CADENA2         shift and go to state 36
    PLUS            shift and go to state 37
    MINUS           shift and go to state 38
    LPAREN          shift and go to state 17
    NUMBER          shift and go to state 62
    VARIABLE2       shift and go to state 28

    expression                     shift and go to state 91
    var_val                        shift and go to state 20
    simple_expression              shift and go to state 32
    additive_expression            shift and go to state 25
    addop                          shift and go to state 33
    term                           shift and go to state 34
    factor                         shift and go to state 35
    call                           shift and go to state 39

state 104

    (55) selection_stmt -> SWITCH LPAREN var_val . RPAREN statement

    RPAREN          shift and go to state 140


state 105

    (64) expression -> var_val EQUAL expression .

    SEMICOLON       reduce using rule 64 (expression -> var_val EQUAL expression .)
    RPAREN          reduce using rule 64 (expression -> var_val EQUAL expression .)
    RBRACKET        reduce using rule 64 (expression -> var_val EQUAL expression .)
    COMMA           reduce using rule 64 (expression -> var_val EQUAL expression .)
    COLON           reduce using rule 64 (expression -> var_val EQUAL expression .)


state 106

    (56) selection_stmt -> CASE NUMBER COLON . statement BREAK SEMICOLON
    (44) statement -> . expression_stmt
    (45) statement -> . compount_stmt
    (46) statement -> . selection_stmt
    (47) statement -> . iteration_stmt
    (48) statement -> . show_in_screen
    (49) statement -> . return_stmt
    (50) expression_stmt -> . expression SEMICOLON
    (51) expression_stmt -> . SEMICOLON
    (38) compount_stmt -> . LBLOCK local_declarations statement_list RBLOCK
    (52) selection_stmt -> . IF LPAREN expression RPAREN statement
    (53) selection_stmt -> . IF LPAREN expression RPAREN statement ELSE statement
    (54) selection_stmt -> . IF LPAREN expression RPAREN statement ELSEIF statement
    (55) selection_stmt -> . SWITCH LPAREN var_val RPAREN statement
    (56) selection_stmt -> . CASE NUMBER COLON statement BREAK SEMICOLON
    (57) selection_stmt -> . DEFAULT COLON statement BREAK SEMICOLON
    (58) selection_stmt -> . VARIABLE relop VARIABLE QUESTIONMARK expression COLON expression SEMICOLON
    (59) iteration_stmt -> . WHILE LPAREN expression RPAREN statement
    (60) iteration_stmt -> . FOR LPAREN var_declaration2 SEMICOLON expression SEMICOLON additive_expression RPAREN statement
    (61) iteration_stmt -> . FOREACH LPAREN var_val AS var_val RPAREN statement
    (12) show_in_screen -> . ECHO var_val SEMICOLON
    (13) show_in_screen -> . ECHO CADENA1 SEMICOLON
    (14) show_in_screen -> . ECHO selection_stmt
    (62) return_stmt -> . RETURN SEMICOLON
    (63) return_stmt -> . RETURN expression SEMICOLON
    (64) expression -> . var_val EQUAL expression
    (65) expression -> . simple_expression
    (66) var_val -> . VARIABLE
    (67) var_val -> . VARIABLE LBRACKET expression RBRACKET
    (68) simple_expression -> . additive_expression relop additive_expression
    (69) simple_expression -> . additive_expression
    (77) additive_expression -> . additive_expression addop term
    (78) additive_expression -> . term
    (79) additive_expression -> . term MINUSMINUS
    (80) additive_expression -> . term PLUSPLUS
    (81) additive_expression -> . addop term
    (84) term -> . term mulop factor
    (85) term -> . factor
    (86) term -> . CADENA1
    (87) term -> . CADENA2
    (82) addop -> . PLUS
    (83) addop -> . MINUS
    (90) factor -> . LPAREN expression RPAREN
    (91) factor -> . var_val
    (92) factor -> . call
    (93) factor -> . NUMBER
    (94) call -> . VARIABLE2 LPAREN args RPAREN

    SEMICOLON       shift and go to state 13
    LBLOCK          shift and go to state 114
    IF              shift and go to state 16
    SWITCH          shift and go to state 19
    CASE            shift and go to state 21
    DEFAULT         shift and go to state 22
    VARIABLE        shift and go to state 115
    WHILE           shift and go to state 23
    FOR             shift and go to state 24
    FOREACH         shift and go to state 26
    ECHO            shift and go to state 29
    RETURN          shift and go to state 116
    CADENA1         shift and go to state 61
    CADENA2         shift and go to state 36
    PLUS            shift and go to state 37
    MINUS           shift and go to state 38
    LPAREN          shift and go to state 17
    NUMBER          shift and go to state 62
    VARIABLE2       shift and go to state 28

    statement                      shift and go to state 141
    expression_stmt                shift and go to state 108
    compount_stmt                  shift and go to state 109
    selection_stmt                 shift and go to state 110
    iteration_stmt                 shift and go to state 111
    show_in_screen                 shift and go to state 112
    return_stmt                    shift and go to state 113
    expression                     shift and go to state 18
    var_val                        shift and go to state 20
    additive_expression            shift and go to state 25
    simple_expression              shift and go to state 32
    addop                          shift and go to state 33
    term                           shift and go to state 34
    factor                         shift and go to state 35
    call                           shift and go to state 39

state 107

    (57) selection_stmt -> DEFAULT COLON statement . BREAK SEMICOLON

    BREAK           shift and go to state 142


state 108

    (44) statement -> expression_stmt .

    BREAK           reduce using rule 44 (statement -> expression_stmt .)
    QUESTIONMARK    reduce using rule 44 (statement -> expression_stmt .)
    VARIABLE        reduce using rule 44 (statement -> expression_stmt .)
    IF              reduce using rule 44 (statement -> expression_stmt .)
    SWITCH          reduce using rule 44 (statement -> expression_stmt .)
    CASE            reduce using rule 44 (statement -> expression_stmt .)
    DEFAULT         reduce using rule 44 (statement -> expression_stmt .)
    WHILE           reduce using rule 44 (statement -> expression_stmt .)
    FOR             reduce using rule 44 (statement -> expression_stmt .)
    FOREACH         reduce using rule 44 (statement -> expression_stmt .)
    FUNCTION        reduce using rule 44 (statement -> expression_stmt .)
    ECHO            reduce using rule 44 (statement -> expression_stmt .)
    SEMICOLON       reduce using rule 44 (statement -> expression_stmt .)
    COMMA           reduce using rule 44 (statement -> expression_stmt .)
    NUMBER          reduce using rule 44 (statement -> expression_stmt .)
    CADENA1         reduce using rule 44 (statement -> expression_stmt .)
    CADENA2         reduce using rule 44 (statement -> expression_stmt .)
    PLUS            reduce using rule 44 (statement -> expression_stmt .)
    MINUS           reduce using rule 44 (statement -> expression_stmt .)
    LPAREN          reduce using rule 44 (statement -> expression_stmt .)
    VARIABLE2       reduce using rule 44 (statement -> expression_stmt .)
    ELSE            reduce using rule 44 (statement -> expression_stmt .)
    ELSEIF          reduce using rule 44 (statement -> expression_stmt .)
    RBLOCK          reduce using rule 44 (statement -> expression_stmt .)
    LBLOCK          reduce using rule 44 (statement -> expression_stmt .)
    RETURN          reduce using rule 44 (statement -> expression_stmt .)


state 109

    (45) statement -> compount_stmt .

    BREAK           reduce using rule 45 (statement -> compount_stmt .)
    QUESTIONMARK    reduce using rule 45 (statement -> compount_stmt .)
    VARIABLE        reduce using rule 45 (statement -> compount_stmt .)
    IF              reduce using rule 45 (statement -> compount_stmt .)
    SWITCH          reduce using rule 45 (statement -> compount_stmt .)
    CASE            reduce using rule 45 (statement -> compount_stmt .)
    DEFAULT         reduce using rule 45 (statement -> compount_stmt .)
    WHILE           reduce using rule 45 (statement -> compount_stmt .)
    FOR             reduce using rule 45 (statement -> compount_stmt .)
    FOREACH         reduce using rule 45 (statement -> compount_stmt .)
    FUNCTION        reduce using rule 45 (statement -> compount_stmt .)
    ECHO            reduce using rule 45 (statement -> compount_stmt .)
    SEMICOLON       reduce using rule 45 (statement -> compount_stmt .)
    COMMA           reduce using rule 45 (statement -> compount_stmt .)
    NUMBER          reduce using rule 45 (statement -> compount_stmt .)
    CADENA1         reduce using rule 45 (statement -> compount_stmt .)
    CADENA2         reduce using rule 45 (statement -> compount_stmt .)
    PLUS            reduce using rule 45 (statement -> compount_stmt .)
    MINUS           reduce using rule 45 (statement -> compount_stmt .)
    LPAREN          reduce using rule 45 (statement -> compount_stmt .)
    VARIABLE2       reduce using rule 45 (statement -> compount_stmt .)
    ELSE            reduce using rule 45 (statement -> compount_stmt .)
    ELSEIF          reduce using rule 45 (statement -> compount_stmt .)
    RBLOCK          reduce using rule 45 (statement -> compount_stmt .)
    LBLOCK          reduce using rule 45 (statement -> compount_stmt .)
    RETURN          reduce using rule 45 (statement -> compount_stmt .)


state 110

    (46) statement -> selection_stmt .

    BREAK           reduce using rule 46 (statement -> selection_stmt .)
    QUESTIONMARK    reduce using rule 46 (statement -> selection_stmt .)
    VARIABLE        reduce using rule 46 (statement -> selection_stmt .)
    IF              reduce using rule 46 (statement -> selection_stmt .)
    SWITCH          reduce using rule 46 (statement -> selection_stmt .)
    CASE            reduce using rule 46 (statement -> selection_stmt .)
    DEFAULT         reduce using rule 46 (statement -> selection_stmt .)
    WHILE           reduce using rule 46 (statement -> selection_stmt .)
    FOR             reduce using rule 46 (statement -> selection_stmt .)
    FOREACH         reduce using rule 46 (statement -> selection_stmt .)
    FUNCTION        reduce using rule 46 (statement -> selection_stmt .)
    ECHO            reduce using rule 46 (statement -> selection_stmt .)
    SEMICOLON       reduce using rule 46 (statement -> selection_stmt .)
    COMMA           reduce using rule 46 (statement -> selection_stmt .)
    NUMBER          reduce using rule 46 (statement -> selection_stmt .)
    CADENA1         reduce using rule 46 (statement -> selection_stmt .)
    CADENA2         reduce using rule 46 (statement -> selection_stmt .)
    PLUS            reduce using rule 46 (statement -> selection_stmt .)
    MINUS           reduce using rule 46 (statement -> selection_stmt .)
    LPAREN          reduce using rule 46 (statement -> selection_stmt .)
    VARIABLE2       reduce using rule 46 (statement -> selection_stmt .)
    ELSE            reduce using rule 46 (statement -> selection_stmt .)
    ELSEIF          reduce using rule 46 (statement -> selection_stmt .)
    RBLOCK          reduce using rule 46 (statement -> selection_stmt .)
    LBLOCK          reduce using rule 46 (statement -> selection_stmt .)
    RETURN          reduce using rule 46 (statement -> selection_stmt .)


state 111

    (47) statement -> iteration_stmt .

    BREAK           reduce using rule 47 (statement -> iteration_stmt .)
    QUESTIONMARK    reduce using rule 47 (statement -> iteration_stmt .)
    VARIABLE        reduce using rule 47 (statement -> iteration_stmt .)
    IF              reduce using rule 47 (statement -> iteration_stmt .)
    SWITCH          reduce using rule 47 (statement -> iteration_stmt .)
    CASE            reduce using rule 47 (statement -> iteration_stmt .)
    DEFAULT         reduce using rule 47 (statement -> iteration_stmt .)
    WHILE           reduce using rule 47 (statement -> iteration_stmt .)
    FOR             reduce using rule 47 (statement -> iteration_stmt .)
    FOREACH         reduce using rule 47 (statement -> iteration_stmt .)
    FUNCTION        reduce using rule 47 (statement -> iteration_stmt .)
    ECHO            reduce using rule 47 (statement -> iteration_stmt .)
    SEMICOLON       reduce using rule 47 (statement -> iteration_stmt .)
    COMMA           reduce using rule 47 (statement -> iteration_stmt .)
    NUMBER          reduce using rule 47 (statement -> iteration_stmt .)
    CADENA1         reduce using rule 47 (statement -> iteration_stmt .)
    CADENA2         reduce using rule 47 (statement -> iteration_stmt .)
    PLUS            reduce using rule 47 (statement -> iteration_stmt .)
    MINUS           reduce using rule 47 (statement -> iteration_stmt .)
    LPAREN          reduce using rule 47 (statement -> iteration_stmt .)
    VARIABLE2       reduce using rule 47 (statement -> iteration_stmt .)
    ELSE            reduce using rule 47 (statement -> iteration_stmt .)
    ELSEIF          reduce using rule 47 (statement -> iteration_stmt .)
    RBLOCK          reduce using rule 47 (statement -> iteration_stmt .)
    LBLOCK          reduce using rule 47 (statement -> iteration_stmt .)
    RETURN          reduce using rule 47 (statement -> iteration_stmt .)


state 112

    (48) statement -> show_in_screen .

    BREAK           reduce using rule 48 (statement -> show_in_screen .)
    QUESTIONMARK    reduce using rule 48 (statement -> show_in_screen .)
    VARIABLE        reduce using rule 48 (statement -> show_in_screen .)
    IF              reduce using rule 48 (statement -> show_in_screen .)
    SWITCH          reduce using rule 48 (statement -> show_in_screen .)
    CASE            reduce using rule 48 (statement -> show_in_screen .)
    DEFAULT         reduce using rule 48 (statement -> show_in_screen .)
    WHILE           reduce using rule 48 (statement -> show_in_screen .)
    FOR             reduce using rule 48 (statement -> show_in_screen .)
    FOREACH         reduce using rule 48 (statement -> show_in_screen .)
    FUNCTION        reduce using rule 48 (statement -> show_in_screen .)
    ECHO            reduce using rule 48 (statement -> show_in_screen .)
    SEMICOLON       reduce using rule 48 (statement -> show_in_screen .)
    COMMA           reduce using rule 48 (statement -> show_in_screen .)
    NUMBER          reduce using rule 48 (statement -> show_in_screen .)
    CADENA1         reduce using rule 48 (statement -> show_in_screen .)
    CADENA2         reduce using rule 48 (statement -> show_in_screen .)
    PLUS            reduce using rule 48 (statement -> show_in_screen .)
    MINUS           reduce using rule 48 (statement -> show_in_screen .)
    LPAREN          reduce using rule 48 (statement -> show_in_screen .)
    VARIABLE2       reduce using rule 48 (statement -> show_in_screen .)
    ELSE            reduce using rule 48 (statement -> show_in_screen .)
    ELSEIF          reduce using rule 48 (statement -> show_in_screen .)
    RBLOCK          reduce using rule 48 (statement -> show_in_screen .)
    LBLOCK          reduce using rule 48 (statement -> show_in_screen .)
    RETURN          reduce using rule 48 (statement -> show_in_screen .)


state 113

    (49) statement -> return_stmt .

    BREAK           reduce using rule 49 (statement -> return_stmt .)
    QUESTIONMARK    reduce using rule 49 (statement -> return_stmt .)
    VARIABLE        reduce using rule 49 (statement -> return_stmt .)
    IF              reduce using rule 49 (statement -> return_stmt .)
    SWITCH          reduce using rule 49 (statement -> return_stmt .)
    CASE            reduce using rule 49 (statement -> return_stmt .)
    DEFAULT         reduce using rule 49 (statement -> return_stmt .)
    WHILE           reduce using rule 49 (statement -> return_stmt .)
    FOR             reduce using rule 49 (statement -> return_stmt .)
    FOREACH         reduce using rule 49 (statement -> return_stmt .)
    FUNCTION        reduce using rule 49 (statement -> return_stmt .)
    ECHO            reduce using rule 49 (statement -> return_stmt .)
    SEMICOLON       reduce using rule 49 (statement -> return_stmt .)
    COMMA           reduce using rule 49 (statement -> return_stmt .)
    NUMBER          reduce using rule 49 (statement -> return_stmt .)
    CADENA1         reduce using rule 49 (statement -> return_stmt .)
    CADENA2         reduce using rule 49 (statement -> return_stmt .)
    PLUS            reduce using rule 49 (statement -> return_stmt .)
    MINUS           reduce using rule 49 (statement -> return_stmt .)
    LPAREN          reduce using rule 49 (statement -> return_stmt .)
    VARIABLE2       reduce using rule 49 (statement -> return_stmt .)
    ELSE            reduce using rule 49 (statement -> return_stmt .)
    ELSEIF          reduce using rule 49 (statement -> return_stmt .)
    RBLOCK          reduce using rule 49 (statement -> return_stmt .)
    LBLOCK          reduce using rule 49 (statement -> return_stmt .)
    RETURN          reduce using rule 49 (statement -> return_stmt .)


state 114

    (38) compount_stmt -> LBLOCK . local_declarations statement_list RBLOCK
    (39) local_declarations -> . var_declaration
    (40) local_declarations -> . empty_function
    (15) var_declaration -> . var_declaration2 SEMICOLON
    (16) var_declaration -> . VARIABLE LBRACKET NUMBER RBRACKET SEMICOLON
    (99) empty_function -> .
    (17) var_declaration2 -> . VARIABLE
    (18) var_declaration2 -> . VARIABLE COMMA var_declaration2
    (19) var_declaration2 -> . VARIABLE EQUAL NUMBER COMMA var_declaration2
    (20) var_declaration2 -> . VARIABLE EQUAL NUMBER
    (21) var_declaration2 -> . VARIABLE EQUAL VARIABLE COMMA var_declaration2
    (22) var_declaration2 -> . VARIABLE EQUAL VARIABLE
    (23) var_declaration2 -> . COMMA
    (24) var_declaration2 -> . VARIABLE EQUAL VARIABLE simple_expression
    (25) var_declaration2 -> . VARIABLE EQUAL LBRACKET NUMBER COMMA var_declaration2
    (26) var_declaration2 -> . NUMBER COMMA var_declaration2
    (27) var_declaration2 -> . NUMBER RBRACKET
    (28) var_declaration2 -> . VARIABLE EQUAL LBRACKET CADENA1 COMMA var_declaration2
    (29) var_declaration2 -> . CADENA1 COMMA var_declaration2
    (30) var_declaration2 -> . CADENA1 RBRACKET

  ! shift/reduce conflict for VARIABLE resolved as shift
  ! shift/reduce conflict for NUMBER resolved as shift
  ! shift/reduce conflict for CADENA1 resolved as shift
    VARIABLE        shift and go to state 146
    SEMICOLON       reduce using rule 99 (empty_function -> .)
    LBLOCK          reduce using rule 99 (empty_function -> .)
    IF              reduce using rule 99 (empty_function -> .)
    SWITCH          reduce using rule 99 (empty_function -> .)
    CASE            reduce using rule 99 (empty_function -> .)
    DEFAULT         reduce using rule 99 (empty_function -> .)
    WHILE           reduce using rule 99 (empty_function -> .)
    FOR             reduce using rule 99 (empty_function -> .)
    FOREACH         reduce using rule 99 (empty_function -> .)
    ECHO            reduce using rule 99 (empty_function -> .)
    RETURN          reduce using rule 99 (empty_function -> .)
    CADENA2         reduce using rule 99 (empty_function -> .)
    PLUS            reduce using rule 99 (empty_function -> .)
    MINUS           reduce using rule 99 (empty_function -> .)
    LPAREN          reduce using rule 99 (empty_function -> .)
    VARIABLE2       reduce using rule 99 (empty_function -> .)
    RBLOCK          reduce using rule 99 (empty_function -> .)
    COMMA           shift and go to state 31
    NUMBER          shift and go to state 95
    CADENA1         shift and go to state 96

  ! VARIABLE        [ reduce using rule 99 (empty_function -> .) ]
  ! CADENA1         [ reduce using rule 99 (empty_function -> .) ]
  ! NUMBER          [ reduce using rule 99 (empty_function -> .) ]

    local_declarations             shift and go to state 143
    var_declaration                shift and go to state 144
    empty_function                 shift and go to state 145
    var_declaration2               shift and go to state 12

state 115

    (58) selection_stmt -> VARIABLE . relop VARIABLE QUESTIONMARK expression COLON expression SEMICOLON
    (66) var_val -> VARIABLE .
    (67) var_val -> VARIABLE . LBRACKET expression RBRACKET
    (70) relop -> . LESS
    (71) relop -> . LESSEQUAL
    (72) relop -> . GREATER
    (73) relop -> . GREATEREQUAL
    (74) relop -> . DEQUAL
    (75) relop -> . DISTINT
    (76) relop -> . ISEQUAL

  ! shift/reduce conflict for LESS resolved as shift
  ! shift/reduce conflict for LESSEQUAL resolved as shift
  ! shift/reduce conflict for GREATER resolved as shift
  ! shift/reduce conflict for GREATEREQUAL resolved as shift
  ! shift/reduce conflict for DEQUAL resolved as shift
  ! shift/reduce conflict for DISTINT resolved as shift
  ! shift/reduce conflict for ISEQUAL resolved as shift
    EQUAL           reduce using rule 66 (var_val -> VARIABLE .)
    MINUSMINUS      reduce using rule 66 (var_val -> VARIABLE .)
    PLUSPLUS        reduce using rule 66 (var_val -> VARIABLE .)
    TIMES           reduce using rule 66 (var_val -> VARIABLE .)
    DIVIDE          reduce using rule 66 (var_val -> VARIABLE .)
    PLUS            reduce using rule 66 (var_val -> VARIABLE .)
    MINUS           reduce using rule 66 (var_val -> VARIABLE .)
    SEMICOLON       reduce using rule 66 (var_val -> VARIABLE .)
    LBRACKET        shift and go to state 103
    LESS            shift and go to state 49
    LESSEQUAL       shift and go to state 50
    GREATER         shift and go to state 51
    GREATEREQUAL    shift and go to state 52
    DEQUAL          shift and go to state 53
    DISTINT         shift and go to state 54
    ISEQUAL         shift and go to state 55

  ! LESS            [ reduce using rule 66 (var_val -> VARIABLE .) ]
  ! LESSEQUAL       [ reduce using rule 66 (var_val -> VARIABLE .) ]
  ! GREATER         [ reduce using rule 66 (var_val -> VARIABLE .) ]
  ! GREATEREQUAL    [ reduce using rule 66 (var_val -> VARIABLE .) ]
  ! DEQUAL          [ reduce using rule 66 (var_val -> VARIABLE .) ]
  ! DISTINT         [ reduce using rule 66 (var_val -> VARIABLE .) ]
  ! ISEQUAL         [ reduce using rule 66 (var_val -> VARIABLE .) ]

    relop                          shift and go to state 46

state 116

    (62) return_stmt -> RETURN . SEMICOLON
    (63) return_stmt -> RETURN . expression SEMICOLON
    (64) expression -> . var_val EQUAL expression
    (65) expression -> . simple_expression
    (66) var_val -> . VARIABLE
    (67) var_val -> . VARIABLE LBRACKET expression RBRACKET
    (68) simple_expression -> . additive_expression relop additive_expression
    (69) simple_expression -> . additive_expression
    (77) additive_expression -> . additive_expression addop term
    (78) additive_expression -> . term
    (79) additive_expression -> . term MINUSMINUS
    (80) additive_expression -> . term PLUSPLUS
    (81) additive_expression -> . addop term
    (84) term -> . term mulop factor
    (85) term -> . factor
    (86) term -> . CADENA1
    (87) term -> . CADENA2
    (82) addop -> . PLUS
    (83) addop -> . MINUS
    (90) factor -> . LPAREN expression RPAREN
    (91) factor -> . var_val
    (92) factor -> . call
    (93) factor -> . NUMBER
    (94) call -> . VARIABLE2 LPAREN args RPAREN

    SEMICOLON       shift and go to state 147
    VARIABLE        shift and go to state 60
    CADENA1         shift and go to state 61
    CADENA2         shift and go to state 36
    PLUS            shift and go to state 37
    MINUS           shift and go to state 38
    LPAREN          shift and go to state 17
    NUMBER          shift and go to state 62
    VARIABLE2       shift and go to state 28

    expression                     shift and go to state 148
    var_val                        shift and go to state 20
    simple_expression              shift and go to state 32
    additive_expression            shift and go to state 25
    addop                          shift and go to state 33
    term                           shift and go to state 34
    factor                         shift and go to state 35
    call                           shift and go to state 39

state 117

    (59) iteration_stmt -> WHILE LPAREN expression . RPAREN statement

    RPAREN          shift and go to state 149


state 118

    (60) iteration_stmt -> FOR LPAREN var_declaration2 . SEMICOLON expression SEMICOLON additive_expression RPAREN statement

    SEMICOLON       shift and go to state 150


state 119

    (68) simple_expression -> additive_expression relop additive_expression .
    (77) additive_expression -> additive_expression . addop term
    (82) addop -> . PLUS
    (83) addop -> . MINUS

    SEMICOLON       reduce using rule 68 (simple_expression -> additive_expression relop additive_expression .)
    RPAREN          reduce using rule 68 (simple_expression -> additive_expression relop additive_expression .)
    RBRACKET        reduce using rule 68 (simple_expression -> additive_expression relop additive_expression .)
    COMMA           reduce using rule 68 (simple_expression -> additive_expression relop additive_expression .)
    COLON           reduce using rule 68 (simple_expression -> additive_expression relop additive_expression .)
    PLUS            shift and go to state 37
    MINUS           shift and go to state 38

    addop                          shift and go to state 71

state 120

    (77) additive_expression -> additive_expression addop term .
    (84) term -> term . mulop factor
    (88) mulop -> . TIMES
    (89) mulop -> . DIVIDE

    LESS            reduce using rule 77 (additive_expression -> additive_expression addop term .)
    LESSEQUAL       reduce using rule 77 (additive_expression -> additive_expression addop term .)
    GREATER         reduce using rule 77 (additive_expression -> additive_expression addop term .)
    GREATEREQUAL    reduce using rule 77 (additive_expression -> additive_expression addop term .)
    DEQUAL          reduce using rule 77 (additive_expression -> additive_expression addop term .)
    DISTINT         reduce using rule 77 (additive_expression -> additive_expression addop term .)
    ISEQUAL         reduce using rule 77 (additive_expression -> additive_expression addop term .)
    PLUS            reduce using rule 77 (additive_expression -> additive_expression addop term .)
    MINUS           reduce using rule 77 (additive_expression -> additive_expression addop term .)
    SEMICOLON       reduce using rule 77 (additive_expression -> additive_expression addop term .)
    RPAREN          reduce using rule 77 (additive_expression -> additive_expression addop term .)
    RBRACKET        reduce using rule 77 (additive_expression -> additive_expression addop term .)
    COMMA           reduce using rule 77 (additive_expression -> additive_expression addop term .)
    COLON           reduce using rule 77 (additive_expression -> additive_expression addop term .)
    TIMES           shift and go to state 86
    DIVIDE          shift and go to state 87

    mulop                          shift and go to state 85

state 121

    (61) iteration_stmt -> FOREACH LPAREN var_val . AS var_val RPAREN statement

    AS              shift and go to state 151


state 122

    (31) fun_declaration -> FUNCTION VARIABLE2 LPAREN . params RPAREN statement
    (32) params -> . param_list
    (33) param_list -> . param_list COMMA param
    (34) param_list -> . param
    (35) param -> . VARIABLE
    (36) param -> . VARIABLE LBRACKET RBRACKET
    (37) param -> . empty_function
    (99) empty_function -> .

    VARIABLE        shift and go to state 155
    COMMA           reduce using rule 99 (empty_function -> .)
    RPAREN          reduce using rule 99 (empty_function -> .)

    params                         shift and go to state 152
    param_list                     shift and go to state 153
    param                          shift and go to state 154
    empty_function                 shift and go to state 156

state 123

    (94) call -> VARIABLE2 LPAREN args . RPAREN

    RPAREN          shift and go to state 157


state 124

    (95) args -> args_list .
    (97) args_list -> args_list . COMMA expression

    RPAREN          reduce using rule 95 (args -> args_list .)
    COMMA           shift and go to state 158


state 125

    (96) args -> empty_function .

    RPAREN          reduce using rule 96 (args -> empty_function .)


state 126

    (98) args_list -> expression .

    COMMA           reduce using rule 98 (args_list -> expression .)
    RPAREN          reduce using rule 98 (args_list -> expression .)


state 127

    (12) show_in_screen -> ECHO var_val SEMICOLON .

    QUESTIONMARK    reduce using rule 12 (show_in_screen -> ECHO var_val SEMICOLON .)
    VARIABLE        reduce using rule 12 (show_in_screen -> ECHO var_val SEMICOLON .)
    IF              reduce using rule 12 (show_in_screen -> ECHO var_val SEMICOLON .)
    SWITCH          reduce using rule 12 (show_in_screen -> ECHO var_val SEMICOLON .)
    CASE            reduce using rule 12 (show_in_screen -> ECHO var_val SEMICOLON .)
    DEFAULT         reduce using rule 12 (show_in_screen -> ECHO var_val SEMICOLON .)
    WHILE           reduce using rule 12 (show_in_screen -> ECHO var_val SEMICOLON .)
    FOR             reduce using rule 12 (show_in_screen -> ECHO var_val SEMICOLON .)
    FOREACH         reduce using rule 12 (show_in_screen -> ECHO var_val SEMICOLON .)
    FUNCTION        reduce using rule 12 (show_in_screen -> ECHO var_val SEMICOLON .)
    ECHO            reduce using rule 12 (show_in_screen -> ECHO var_val SEMICOLON .)
    SEMICOLON       reduce using rule 12 (show_in_screen -> ECHO var_val SEMICOLON .)
    COMMA           reduce using rule 12 (show_in_screen -> ECHO var_val SEMICOLON .)
    NUMBER          reduce using rule 12 (show_in_screen -> ECHO var_val SEMICOLON .)
    CADENA1         reduce using rule 12 (show_in_screen -> ECHO var_val SEMICOLON .)
    CADENA2         reduce using rule 12 (show_in_screen -> ECHO var_val SEMICOLON .)
    PLUS            reduce using rule 12 (show_in_screen -> ECHO var_val SEMICOLON .)
    MINUS           reduce using rule 12 (show_in_screen -> ECHO var_val SEMICOLON .)
    LPAREN          reduce using rule 12 (show_in_screen -> ECHO var_val SEMICOLON .)
    VARIABLE2       reduce using rule 12 (show_in_screen -> ECHO var_val SEMICOLON .)
    BREAK           reduce using rule 12 (show_in_screen -> ECHO var_val SEMICOLON .)
    ELSE            reduce using rule 12 (show_in_screen -> ECHO var_val SEMICOLON .)
    ELSEIF          reduce using rule 12 (show_in_screen -> ECHO var_val SEMICOLON .)
    RBLOCK          reduce using rule 12 (show_in_screen -> ECHO var_val SEMICOLON .)
    LBLOCK          reduce using rule 12 (show_in_screen -> ECHO var_val SEMICOLON .)
    RETURN          reduce using rule 12 (show_in_screen -> ECHO var_val SEMICOLON .)


state 128

    (13) show_in_screen -> ECHO CADENA1 SEMICOLON .

    QUESTIONMARK    reduce using rule 13 (show_in_screen -> ECHO CADENA1 SEMICOLON .)
    VARIABLE        reduce using rule 13 (show_in_screen -> ECHO CADENA1 SEMICOLON .)
    IF              reduce using rule 13 (show_in_screen -> ECHO CADENA1 SEMICOLON .)
    SWITCH          reduce using rule 13 (show_in_screen -> ECHO CADENA1 SEMICOLON .)
    CASE            reduce using rule 13 (show_in_screen -> ECHO CADENA1 SEMICOLON .)
    DEFAULT         reduce using rule 13 (show_in_screen -> ECHO CADENA1 SEMICOLON .)
    WHILE           reduce using rule 13 (show_in_screen -> ECHO CADENA1 SEMICOLON .)
    FOR             reduce using rule 13 (show_in_screen -> ECHO CADENA1 SEMICOLON .)
    FOREACH         reduce using rule 13 (show_in_screen -> ECHO CADENA1 SEMICOLON .)
    FUNCTION        reduce using rule 13 (show_in_screen -> ECHO CADENA1 SEMICOLON .)
    ECHO            reduce using rule 13 (show_in_screen -> ECHO CADENA1 SEMICOLON .)
    SEMICOLON       reduce using rule 13 (show_in_screen -> ECHO CADENA1 SEMICOLON .)
    COMMA           reduce using rule 13 (show_in_screen -> ECHO CADENA1 SEMICOLON .)
    NUMBER          reduce using rule 13 (show_in_screen -> ECHO CADENA1 SEMICOLON .)
    CADENA1         reduce using rule 13 (show_in_screen -> ECHO CADENA1 SEMICOLON .)
    CADENA2         reduce using rule 13 (show_in_screen -> ECHO CADENA1 SEMICOLON .)
    PLUS            reduce using rule 13 (show_in_screen -> ECHO CADENA1 SEMICOLON .)
    MINUS           reduce using rule 13 (show_in_screen -> ECHO CADENA1 SEMICOLON .)
    LPAREN          reduce using rule 13 (show_in_screen -> ECHO CADENA1 SEMICOLON .)
    VARIABLE2       reduce using rule 13 (show_in_screen -> ECHO CADENA1 SEMICOLON .)
    BREAK           reduce using rule 13 (show_in_screen -> ECHO CADENA1 SEMICOLON .)
    ELSE            reduce using rule 13 (show_in_screen -> ECHO CADENA1 SEMICOLON .)
    ELSEIF          reduce using rule 13 (show_in_screen -> ECHO CADENA1 SEMICOLON .)
    RBLOCK          reduce using rule 13 (show_in_screen -> ECHO CADENA1 SEMICOLON .)
    LBLOCK          reduce using rule 13 (show_in_screen -> ECHO CADENA1 SEMICOLON .)
    RETURN          reduce using rule 13 (show_in_screen -> ECHO CADENA1 SEMICOLON .)


state 129

    (29) var_declaration2 -> CADENA1 COMMA var_declaration2 .

    SEMICOLON       reduce using rule 29 (var_declaration2 -> CADENA1 COMMA var_declaration2 .)


state 130

    (84) term -> term mulop factor .

    MINUSMINUS      reduce using rule 84 (term -> term mulop factor .)
    PLUSPLUS        reduce using rule 84 (term -> term mulop factor .)
    TIMES           reduce using rule 84 (term -> term mulop factor .)
    DIVIDE          reduce using rule 84 (term -> term mulop factor .)
    LESS            reduce using rule 84 (term -> term mulop factor .)
    LESSEQUAL       reduce using rule 84 (term -> term mulop factor .)
    GREATER         reduce using rule 84 (term -> term mulop factor .)
    GREATEREQUAL    reduce using rule 84 (term -> term mulop factor .)
    DEQUAL          reduce using rule 84 (term -> term mulop factor .)
    DISTINT         reduce using rule 84 (term -> term mulop factor .)
    ISEQUAL         reduce using rule 84 (term -> term mulop factor .)
    PLUS            reduce using rule 84 (term -> term mulop factor .)
    MINUS           reduce using rule 84 (term -> term mulop factor .)
    SEMICOLON       reduce using rule 84 (term -> term mulop factor .)
    RPAREN          reduce using rule 84 (term -> term mulop factor .)
    RBRACKET        reduce using rule 84 (term -> term mulop factor .)
    COMMA           reduce using rule 84 (term -> term mulop factor .)
    COLON           reduce using rule 84 (term -> term mulop factor .)


state 131

    (16) var_declaration -> VARIABLE LBRACKET NUMBER RBRACKET . SEMICOLON

    SEMICOLON       shift and go to state 159


state 132

    (67) var_val -> VARIABLE LBRACKET expression RBRACKET .

    EQUAL           reduce using rule 67 (var_val -> VARIABLE LBRACKET expression RBRACKET .)
    MINUSMINUS      reduce using rule 67 (var_val -> VARIABLE LBRACKET expression RBRACKET .)
    PLUSPLUS        reduce using rule 67 (var_val -> VARIABLE LBRACKET expression RBRACKET .)
    TIMES           reduce using rule 67 (var_val -> VARIABLE LBRACKET expression RBRACKET .)
    DIVIDE          reduce using rule 67 (var_val -> VARIABLE LBRACKET expression RBRACKET .)
    LESS            reduce using rule 67 (var_val -> VARIABLE LBRACKET expression RBRACKET .)
    LESSEQUAL       reduce using rule 67 (var_val -> VARIABLE LBRACKET expression RBRACKET .)
    GREATER         reduce using rule 67 (var_val -> VARIABLE LBRACKET expression RBRACKET .)
    GREATEREQUAL    reduce using rule 67 (var_val -> VARIABLE LBRACKET expression RBRACKET .)
    DEQUAL          reduce using rule 67 (var_val -> VARIABLE LBRACKET expression RBRACKET .)
    DISTINT         reduce using rule 67 (var_val -> VARIABLE LBRACKET expression RBRACKET .)
    ISEQUAL         reduce using rule 67 (var_val -> VARIABLE LBRACKET expression RBRACKET .)
    PLUS            reduce using rule 67 (var_val -> VARIABLE LBRACKET expression RBRACKET .)
    MINUS           reduce using rule 67 (var_val -> VARIABLE LBRACKET expression RBRACKET .)
    SEMICOLON       reduce using rule 67 (var_val -> VARIABLE LBRACKET expression RBRACKET .)
    RPAREN          reduce using rule 67 (var_val -> VARIABLE LBRACKET expression RBRACKET .)
    RBRACKET        reduce using rule 67 (var_val -> VARIABLE LBRACKET expression RBRACKET .)
    COMMA           reduce using rule 67 (var_val -> VARIABLE LBRACKET expression RBRACKET .)
    COLON           reduce using rule 67 (var_val -> VARIABLE LBRACKET expression RBRACKET .)
    AS              reduce using rule 67 (var_val -> VARIABLE LBRACKET expression RBRACKET .)


state 133

    (58) selection_stmt -> VARIABLE relop VARIABLE QUESTIONMARK . expression COLON expression SEMICOLON
    (64) expression -> . var_val EQUAL expression
    (65) expression -> . simple_expression
    (66) var_val -> . VARIABLE
    (67) var_val -> . VARIABLE LBRACKET expression RBRACKET
    (68) simple_expression -> . additive_expression relop additive_expression
    (69) simple_expression -> . additive_expression
    (77) additive_expression -> . additive_expression addop term
    (78) additive_expression -> . term
    (79) additive_expression -> . term MINUSMINUS
    (80) additive_expression -> . term PLUSPLUS
    (81) additive_expression -> . addop term
    (84) term -> . term mulop factor
    (85) term -> . factor
    (86) term -> . CADENA1
    (87) term -> . CADENA2
    (82) addop -> . PLUS
    (83) addop -> . MINUS
    (90) factor -> . LPAREN expression RPAREN
    (91) factor -> . var_val
    (92) factor -> . call
    (93) factor -> . NUMBER
    (94) call -> . VARIABLE2 LPAREN args RPAREN

    VARIABLE        shift and go to state 60
    CADENA1         shift and go to state 61
    CADENA2         shift and go to state 36
    PLUS            shift and go to state 37
    MINUS           shift and go to state 38
    LPAREN          shift and go to state 17
    NUMBER          shift and go to state 62
    VARIABLE2       shift and go to state 28

    expression                     shift and go to state 160
    var_val                        shift and go to state 20
    simple_expression              shift and go to state 32
    additive_expression            shift and go to state 25
    addop                          shift and go to state 33
    term                           shift and go to state 34
    factor                         shift and go to state 35
    call                           shift and go to state 39

state 134

    (21) var_declaration2 -> VARIABLE EQUAL VARIABLE COMMA . var_declaration2
    (17) var_declaration2 -> . VARIABLE
    (18) var_declaration2 -> . VARIABLE COMMA var_declaration2
    (19) var_declaration2 -> . VARIABLE EQUAL NUMBER COMMA var_declaration2
    (20) var_declaration2 -> . VARIABLE EQUAL NUMBER
    (21) var_declaration2 -> . VARIABLE EQUAL VARIABLE COMMA var_declaration2
    (22) var_declaration2 -> . VARIABLE EQUAL VARIABLE
    (23) var_declaration2 -> . COMMA
    (24) var_declaration2 -> . VARIABLE EQUAL VARIABLE simple_expression
    (25) var_declaration2 -> . VARIABLE EQUAL LBRACKET NUMBER COMMA var_declaration2
    (26) var_declaration2 -> . NUMBER COMMA var_declaration2
    (27) var_declaration2 -> . NUMBER RBRACKET
    (28) var_declaration2 -> . VARIABLE EQUAL LBRACKET CADENA1 COMMA var_declaration2
    (29) var_declaration2 -> . CADENA1 COMMA var_declaration2
    (30) var_declaration2 -> . CADENA1 RBRACKET

    VARIABLE        shift and go to state 93
    COMMA           shift and go to state 31
    NUMBER          shift and go to state 95
    CADENA1         shift and go to state 96

    var_declaration2               shift and go to state 161

state 135

    (24) var_declaration2 -> VARIABLE EQUAL VARIABLE simple_expression .

    SEMICOLON       reduce using rule 24 (var_declaration2 -> VARIABLE EQUAL VARIABLE simple_expression .)


state 136

    (19) var_declaration2 -> VARIABLE EQUAL NUMBER COMMA . var_declaration2
    (17) var_declaration2 -> . VARIABLE
    (18) var_declaration2 -> . VARIABLE COMMA var_declaration2
    (19) var_declaration2 -> . VARIABLE EQUAL NUMBER COMMA var_declaration2
    (20) var_declaration2 -> . VARIABLE EQUAL NUMBER
    (21) var_declaration2 -> . VARIABLE EQUAL VARIABLE COMMA var_declaration2
    (22) var_declaration2 -> . VARIABLE EQUAL VARIABLE
    (23) var_declaration2 -> . COMMA
    (24) var_declaration2 -> . VARIABLE EQUAL VARIABLE simple_expression
    (25) var_declaration2 -> . VARIABLE EQUAL LBRACKET NUMBER COMMA var_declaration2
    (26) var_declaration2 -> . NUMBER COMMA var_declaration2
    (27) var_declaration2 -> . NUMBER RBRACKET
    (28) var_declaration2 -> . VARIABLE EQUAL LBRACKET CADENA1 COMMA var_declaration2
    (29) var_declaration2 -> . CADENA1 COMMA var_declaration2
    (30) var_declaration2 -> . CADENA1 RBRACKET

    VARIABLE        shift and go to state 93
    COMMA           shift and go to state 31
    NUMBER          shift and go to state 95
    CADENA1         shift and go to state 96

    var_declaration2               shift and go to state 162

state 137

    (25) var_declaration2 -> VARIABLE EQUAL LBRACKET NUMBER . COMMA var_declaration2

    COMMA           shift and go to state 163


state 138

    (28) var_declaration2 -> VARIABLE EQUAL LBRACKET CADENA1 . COMMA var_declaration2

    COMMA           shift and go to state 164


state 139

    (52) selection_stmt -> IF LPAREN expression RPAREN . statement
    (53) selection_stmt -> IF LPAREN expression RPAREN . statement ELSE statement
    (54) selection_stmt -> IF LPAREN expression RPAREN . statement ELSEIF statement
    (44) statement -> . expression_stmt
    (45) statement -> . compount_stmt
    (46) statement -> . selection_stmt
    (47) statement -> . iteration_stmt
    (48) statement -> . show_in_screen
    (49) statement -> . return_stmt
    (50) expression_stmt -> . expression SEMICOLON
    (51) expression_stmt -> . SEMICOLON
    (38) compount_stmt -> . LBLOCK local_declarations statement_list RBLOCK
    (52) selection_stmt -> . IF LPAREN expression RPAREN statement
    (53) selection_stmt -> . IF LPAREN expression RPAREN statement ELSE statement
    (54) selection_stmt -> . IF LPAREN expression RPAREN statement ELSEIF statement
    (55) selection_stmt -> . SWITCH LPAREN var_val RPAREN statement
    (56) selection_stmt -> . CASE NUMBER COLON statement BREAK SEMICOLON
    (57) selection_stmt -> . DEFAULT COLON statement BREAK SEMICOLON
    (58) selection_stmt -> . VARIABLE relop VARIABLE QUESTIONMARK expression COLON expression SEMICOLON
    (59) iteration_stmt -> . WHILE LPAREN expression RPAREN statement
    (60) iteration_stmt -> . FOR LPAREN var_declaration2 SEMICOLON expression SEMICOLON additive_expression RPAREN statement
    (61) iteration_stmt -> . FOREACH LPAREN var_val AS var_val RPAREN statement
    (12) show_in_screen -> . ECHO var_val SEMICOLON
    (13) show_in_screen -> . ECHO CADENA1 SEMICOLON
    (14) show_in_screen -> . ECHO selection_stmt
    (62) return_stmt -> . RETURN SEMICOLON
    (63) return_stmt -> . RETURN expression SEMICOLON
    (64) expression -> . var_val EQUAL expression
    (65) expression -> . simple_expression
    (66) var_val -> . VARIABLE
    (67) var_val -> . VARIABLE LBRACKET expression RBRACKET
    (68) simple_expression -> . additive_expression relop additive_expression
    (69) simple_expression -> . additive_expression
    (77) additive_expression -> . additive_expression addop term
    (78) additive_expression -> . term
    (79) additive_expression -> . term MINUSMINUS
    (80) additive_expression -> . term PLUSPLUS
    (81) additive_expression -> . addop term
    (84) term -> . term mulop factor
    (85) term -> . factor
    (86) term -> . CADENA1
    (87) term -> . CADENA2
    (82) addop -> . PLUS
    (83) addop -> . MINUS
    (90) factor -> . LPAREN expression RPAREN
    (91) factor -> . var_val
    (92) factor -> . call
    (93) factor -> . NUMBER
    (94) call -> . VARIABLE2 LPAREN args RPAREN

    SEMICOLON       shift and go to state 13
    LBLOCK          shift and go to state 114
    IF              shift and go to state 16
    SWITCH          shift and go to state 19
    CASE            shift and go to state 21
    DEFAULT         shift and go to state 22
    VARIABLE        shift and go to state 115
    WHILE           shift and go to state 23
    FOR             shift and go to state 24
    FOREACH         shift and go to state 26
    ECHO            shift and go to state 29
    RETURN          shift and go to state 116
    CADENA1         shift and go to state 61
    CADENA2         shift and go to state 36
    PLUS            shift and go to state 37
    MINUS           shift and go to state 38
    LPAREN          shift and go to state 17
    NUMBER          shift and go to state 62
    VARIABLE2       shift and go to state 28

    expression                     shift and go to state 18
    statement                      shift and go to state 165
    expression_stmt                shift and go to state 108
    compount_stmt                  shift and go to state 109
    selection_stmt                 shift and go to state 110
    iteration_stmt                 shift and go to state 111
    show_in_screen                 shift and go to state 112
    return_stmt                    shift and go to state 113
    var_val                        shift and go to state 20
    additive_expression            shift and go to state 25
    simple_expression              shift and go to state 32
    addop                          shift and go to state 33
    term                           shift and go to state 34
    factor                         shift and go to state 35
    call                           shift and go to state 39

state 140

    (55) selection_stmt -> SWITCH LPAREN var_val RPAREN . statement
    (44) statement -> . expression_stmt
    (45) statement -> . compount_stmt
    (46) statement -> . selection_stmt
    (47) statement -> . iteration_stmt
    (48) statement -> . show_in_screen
    (49) statement -> . return_stmt
    (50) expression_stmt -> . expression SEMICOLON
    (51) expression_stmt -> . SEMICOLON
    (38) compount_stmt -> . LBLOCK local_declarations statement_list RBLOCK
    (52) selection_stmt -> . IF LPAREN expression RPAREN statement
    (53) selection_stmt -> . IF LPAREN expression RPAREN statement ELSE statement
    (54) selection_stmt -> . IF LPAREN expression RPAREN statement ELSEIF statement
    (55) selection_stmt -> . SWITCH LPAREN var_val RPAREN statement
    (56) selection_stmt -> . CASE NUMBER COLON statement BREAK SEMICOLON
    (57) selection_stmt -> . DEFAULT COLON statement BREAK SEMICOLON
    (58) selection_stmt -> . VARIABLE relop VARIABLE QUESTIONMARK expression COLON expression SEMICOLON
    (59) iteration_stmt -> . WHILE LPAREN expression RPAREN statement
    (60) iteration_stmt -> . FOR LPAREN var_declaration2 SEMICOLON expression SEMICOLON additive_expression RPAREN statement
    (61) iteration_stmt -> . FOREACH LPAREN var_val AS var_val RPAREN statement
    (12) show_in_screen -> . ECHO var_val SEMICOLON
    (13) show_in_screen -> . ECHO CADENA1 SEMICOLON
    (14) show_in_screen -> . ECHO selection_stmt
    (62) return_stmt -> . RETURN SEMICOLON
    (63) return_stmt -> . RETURN expression SEMICOLON
    (64) expression -> . var_val EQUAL expression
    (65) expression -> . simple_expression
    (66) var_val -> . VARIABLE
    (67) var_val -> . VARIABLE LBRACKET expression RBRACKET
    (68) simple_expression -> . additive_expression relop additive_expression
    (69) simple_expression -> . additive_expression
    (77) additive_expression -> . additive_expression addop term
    (78) additive_expression -> . term
    (79) additive_expression -> . term MINUSMINUS
    (80) additive_expression -> . term PLUSPLUS
    (81) additive_expression -> . addop term
    (84) term -> . term mulop factor
    (85) term -> . factor
    (86) term -> . CADENA1
    (87) term -> . CADENA2
    (82) addop -> . PLUS
    (83) addop -> . MINUS
    (90) factor -> . LPAREN expression RPAREN
    (91) factor -> . var_val
    (92) factor -> . call
    (93) factor -> . NUMBER
    (94) call -> . VARIABLE2 LPAREN args RPAREN

    SEMICOLON       shift and go to state 13
    LBLOCK          shift and go to state 114
    IF              shift and go to state 16
    SWITCH          shift and go to state 19
    CASE            shift and go to state 21
    DEFAULT         shift and go to state 22
    VARIABLE        shift and go to state 115
    WHILE           shift and go to state 23
    FOR             shift and go to state 24
    FOREACH         shift and go to state 26
    ECHO            shift and go to state 29
    RETURN          shift and go to state 116
    CADENA1         shift and go to state 61
    CADENA2         shift and go to state 36
    PLUS            shift and go to state 37
    MINUS           shift and go to state 38
    LPAREN          shift and go to state 17
    NUMBER          shift and go to state 62
    VARIABLE2       shift and go to state 28

    var_val                        shift and go to state 20
    statement                      shift and go to state 166
    expression_stmt                shift and go to state 108
    compount_stmt                  shift and go to state 109
    selection_stmt                 shift and go to state 110
    iteration_stmt                 shift and go to state 111
    show_in_screen                 shift and go to state 112
    return_stmt                    shift and go to state 113
    expression                     shift and go to state 18
    additive_expression            shift and go to state 25
    simple_expression              shift and go to state 32
    addop                          shift and go to state 33
    term                           shift and go to state 34
    factor                         shift and go to state 35
    call                           shift and go to state 39

state 141

    (56) selection_stmt -> CASE NUMBER COLON statement . BREAK SEMICOLON

    BREAK           shift and go to state 167


state 142

    (57) selection_stmt -> DEFAULT COLON statement BREAK . SEMICOLON

    SEMICOLON       shift and go to state 168


state 143

    (38) compount_stmt -> LBLOCK local_declarations . statement_list RBLOCK
    (41) statement_list -> . statement_list statement
    (42) statement_list -> . statement
    (43) statement_list -> . empty_function
    (44) statement -> . expression_stmt
    (45) statement -> . compount_stmt
    (46) statement -> . selection_stmt
    (47) statement -> . iteration_stmt
    (48) statement -> . show_in_screen
    (49) statement -> . return_stmt
    (99) empty_function -> .
    (50) expression_stmt -> . expression SEMICOLON
    (51) expression_stmt -> . SEMICOLON
    (38) compount_stmt -> . LBLOCK local_declarations statement_list RBLOCK
    (52) selection_stmt -> . IF LPAREN expression RPAREN statement
    (53) selection_stmt -> . IF LPAREN expression RPAREN statement ELSE statement
    (54) selection_stmt -> . IF LPAREN expression RPAREN statement ELSEIF statement
    (55) selection_stmt -> . SWITCH LPAREN var_val RPAREN statement
    (56) selection_stmt -> . CASE NUMBER COLON statement BREAK SEMICOLON
    (57) selection_stmt -> . DEFAULT COLON statement BREAK SEMICOLON
    (58) selection_stmt -> . VARIABLE relop VARIABLE QUESTIONMARK expression COLON expression SEMICOLON
    (59) iteration_stmt -> . WHILE LPAREN expression RPAREN statement
    (60) iteration_stmt -> . FOR LPAREN var_declaration2 SEMICOLON expression SEMICOLON additive_expression RPAREN statement
    (61) iteration_stmt -> . FOREACH LPAREN var_val AS var_val RPAREN statement
    (12) show_in_screen -> . ECHO var_val SEMICOLON
    (13) show_in_screen -> . ECHO CADENA1 SEMICOLON
    (14) show_in_screen -> . ECHO selection_stmt
    (62) return_stmt -> . RETURN SEMICOLON
    (63) return_stmt -> . RETURN expression SEMICOLON
    (64) expression -> . var_val EQUAL expression
    (65) expression -> . simple_expression
    (66) var_val -> . VARIABLE
    (67) var_val -> . VARIABLE LBRACKET expression RBRACKET
    (68) simple_expression -> . additive_expression relop additive_expression
    (69) simple_expression -> . additive_expression
    (77) additive_expression -> . additive_expression addop term
    (78) additive_expression -> . term
    (79) additive_expression -> . term MINUSMINUS
    (80) additive_expression -> . term PLUSPLUS
    (81) additive_expression -> . addop term
    (84) term -> . term mulop factor
    (85) term -> . factor
    (86) term -> . CADENA1
    (87) term -> . CADENA2
    (82) addop -> . PLUS
    (83) addop -> . MINUS
    (90) factor -> . LPAREN expression RPAREN
    (91) factor -> . var_val
    (92) factor -> . call
    (93) factor -> . NUMBER
    (94) call -> . VARIABLE2 LPAREN args RPAREN

  ! shift/reduce conflict for SEMICOLON resolved as shift
  ! shift/reduce conflict for LBLOCK resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! shift/reduce conflict for CASE resolved as shift
  ! shift/reduce conflict for DEFAULT resolved as shift
  ! shift/reduce conflict for VARIABLE resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for FOREACH resolved as shift
  ! shift/reduce conflict for ECHO resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for CADENA1 resolved as shift
  ! shift/reduce conflict for CADENA2 resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for NUMBER resolved as shift
  ! shift/reduce conflict for VARIABLE2 resolved as shift
    RBLOCK          reduce using rule 99 (empty_function -> .)
    SEMICOLON       shift and go to state 13
    LBLOCK          shift and go to state 114
    IF              shift and go to state 16
    SWITCH          shift and go to state 19
    CASE            shift and go to state 21
    DEFAULT         shift and go to state 22
    VARIABLE        shift and go to state 115
    WHILE           shift and go to state 23
    FOR             shift and go to state 24
    FOREACH         shift and go to state 26
    ECHO            shift and go to state 29
    RETURN          shift and go to state 116
    CADENA1         shift and go to state 61
    CADENA2         shift and go to state 36
    PLUS            shift and go to state 37
    MINUS           shift and go to state 38
    LPAREN          shift and go to state 17
    NUMBER          shift and go to state 62
    VARIABLE2       shift and go to state 28

  ! SEMICOLON       [ reduce using rule 99 (empty_function -> .) ]
  ! LBLOCK          [ reduce using rule 99 (empty_function -> .) ]
  ! IF              [ reduce using rule 99 (empty_function -> .) ]
  ! SWITCH          [ reduce using rule 99 (empty_function -> .) ]
  ! CASE            [ reduce using rule 99 (empty_function -> .) ]
  ! DEFAULT         [ reduce using rule 99 (empty_function -> .) ]
  ! VARIABLE        [ reduce using rule 99 (empty_function -> .) ]
  ! WHILE           [ reduce using rule 99 (empty_function -> .) ]
  ! FOR             [ reduce using rule 99 (empty_function -> .) ]
  ! FOREACH         [ reduce using rule 99 (empty_function -> .) ]
  ! ECHO            [ reduce using rule 99 (empty_function -> .) ]
  ! RETURN          [ reduce using rule 99 (empty_function -> .) ]
  ! CADENA1         [ reduce using rule 99 (empty_function -> .) ]
  ! CADENA2         [ reduce using rule 99 (empty_function -> .) ]
  ! PLUS            [ reduce using rule 99 (empty_function -> .) ]
  ! MINUS           [ reduce using rule 99 (empty_function -> .) ]
  ! LPAREN          [ reduce using rule 99 (empty_function -> .) ]
  ! NUMBER          [ reduce using rule 99 (empty_function -> .) ]
  ! VARIABLE2       [ reduce using rule 99 (empty_function -> .) ]

    statement_list                 shift and go to state 169
    statement                      shift and go to state 170
    empty_function                 shift and go to state 171
    expression_stmt                shift and go to state 108
    compount_stmt                  shift and go to state 109
    selection_stmt                 shift and go to state 110
    iteration_stmt                 shift and go to state 111
    show_in_screen                 shift and go to state 112
    return_stmt                    shift and go to state 113
    expression                     shift and go to state 18
    var_val                        shift and go to state 20
    additive_expression            shift and go to state 25
    simple_expression              shift and go to state 32
    addop                          shift and go to state 33
    term                           shift and go to state 34
    factor                         shift and go to state 35
    call                           shift and go to state 39

state 144

    (39) local_declarations -> var_declaration .

    SEMICOLON       reduce using rule 39 (local_declarations -> var_declaration .)
    LBLOCK          reduce using rule 39 (local_declarations -> var_declaration .)
    IF              reduce using rule 39 (local_declarations -> var_declaration .)
    SWITCH          reduce using rule 39 (local_declarations -> var_declaration .)
    CASE            reduce using rule 39 (local_declarations -> var_declaration .)
    DEFAULT         reduce using rule 39 (local_declarations -> var_declaration .)
    VARIABLE        reduce using rule 39 (local_declarations -> var_declaration .)
    WHILE           reduce using rule 39 (local_declarations -> var_declaration .)
    FOR             reduce using rule 39 (local_declarations -> var_declaration .)
    FOREACH         reduce using rule 39 (local_declarations -> var_declaration .)
    ECHO            reduce using rule 39 (local_declarations -> var_declaration .)
    RETURN          reduce using rule 39 (local_declarations -> var_declaration .)
    CADENA1         reduce using rule 39 (local_declarations -> var_declaration .)
    CADENA2         reduce using rule 39 (local_declarations -> var_declaration .)
    PLUS            reduce using rule 39 (local_declarations -> var_declaration .)
    MINUS           reduce using rule 39 (local_declarations -> var_declaration .)
    LPAREN          reduce using rule 39 (local_declarations -> var_declaration .)
    NUMBER          reduce using rule 39 (local_declarations -> var_declaration .)
    VARIABLE2       reduce using rule 39 (local_declarations -> var_declaration .)
    RBLOCK          reduce using rule 39 (local_declarations -> var_declaration .)


state 145

    (40) local_declarations -> empty_function .

    SEMICOLON       reduce using rule 40 (local_declarations -> empty_function .)
    LBLOCK          reduce using rule 40 (local_declarations -> empty_function .)
    IF              reduce using rule 40 (local_declarations -> empty_function .)
    SWITCH          reduce using rule 40 (local_declarations -> empty_function .)
    CASE            reduce using rule 40 (local_declarations -> empty_function .)
    DEFAULT         reduce using rule 40 (local_declarations -> empty_function .)
    VARIABLE        reduce using rule 40 (local_declarations -> empty_function .)
    WHILE           reduce using rule 40 (local_declarations -> empty_function .)
    FOR             reduce using rule 40 (local_declarations -> empty_function .)
    FOREACH         reduce using rule 40 (local_declarations -> empty_function .)
    ECHO            reduce using rule 40 (local_declarations -> empty_function .)
    RETURN          reduce using rule 40 (local_declarations -> empty_function .)
    CADENA1         reduce using rule 40 (local_declarations -> empty_function .)
    CADENA2         reduce using rule 40 (local_declarations -> empty_function .)
    PLUS            reduce using rule 40 (local_declarations -> empty_function .)
    MINUS           reduce using rule 40 (local_declarations -> empty_function .)
    LPAREN          reduce using rule 40 (local_declarations -> empty_function .)
    NUMBER          reduce using rule 40 (local_declarations -> empty_function .)
    VARIABLE2       reduce using rule 40 (local_declarations -> empty_function .)
    RBLOCK          reduce using rule 40 (local_declarations -> empty_function .)


state 146

    (16) var_declaration -> VARIABLE . LBRACKET NUMBER RBRACKET SEMICOLON
    (17) var_declaration2 -> VARIABLE .
    (18) var_declaration2 -> VARIABLE . COMMA var_declaration2
    (19) var_declaration2 -> VARIABLE . EQUAL NUMBER COMMA var_declaration2
    (20) var_declaration2 -> VARIABLE . EQUAL NUMBER
    (21) var_declaration2 -> VARIABLE . EQUAL VARIABLE COMMA var_declaration2
    (22) var_declaration2 -> VARIABLE . EQUAL VARIABLE
    (24) var_declaration2 -> VARIABLE . EQUAL VARIABLE simple_expression
    (25) var_declaration2 -> VARIABLE . EQUAL LBRACKET NUMBER COMMA var_declaration2
    (28) var_declaration2 -> VARIABLE . EQUAL LBRACKET CADENA1 COMMA var_declaration2

    LBRACKET        shift and go to state 172
    SEMICOLON       reduce using rule 17 (var_declaration2 -> VARIABLE .)
    COMMA           shift and go to state 47
    EQUAL           shift and go to state 48


state 147

    (62) return_stmt -> RETURN SEMICOLON .

    BREAK           reduce using rule 62 (return_stmt -> RETURN SEMICOLON .)
    QUESTIONMARK    reduce using rule 62 (return_stmt -> RETURN SEMICOLON .)
    VARIABLE        reduce using rule 62 (return_stmt -> RETURN SEMICOLON .)
    IF              reduce using rule 62 (return_stmt -> RETURN SEMICOLON .)
    SWITCH          reduce using rule 62 (return_stmt -> RETURN SEMICOLON .)
    CASE            reduce using rule 62 (return_stmt -> RETURN SEMICOLON .)
    DEFAULT         reduce using rule 62 (return_stmt -> RETURN SEMICOLON .)
    WHILE           reduce using rule 62 (return_stmt -> RETURN SEMICOLON .)
    FOR             reduce using rule 62 (return_stmt -> RETURN SEMICOLON .)
    FOREACH         reduce using rule 62 (return_stmt -> RETURN SEMICOLON .)
    FUNCTION        reduce using rule 62 (return_stmt -> RETURN SEMICOLON .)
    ECHO            reduce using rule 62 (return_stmt -> RETURN SEMICOLON .)
    SEMICOLON       reduce using rule 62 (return_stmt -> RETURN SEMICOLON .)
    COMMA           reduce using rule 62 (return_stmt -> RETURN SEMICOLON .)
    NUMBER          reduce using rule 62 (return_stmt -> RETURN SEMICOLON .)
    CADENA1         reduce using rule 62 (return_stmt -> RETURN SEMICOLON .)
    CADENA2         reduce using rule 62 (return_stmt -> RETURN SEMICOLON .)
    PLUS            reduce using rule 62 (return_stmt -> RETURN SEMICOLON .)
    MINUS           reduce using rule 62 (return_stmt -> RETURN SEMICOLON .)
    LPAREN          reduce using rule 62 (return_stmt -> RETURN SEMICOLON .)
    VARIABLE2       reduce using rule 62 (return_stmt -> RETURN SEMICOLON .)
    ELSE            reduce using rule 62 (return_stmt -> RETURN SEMICOLON .)
    ELSEIF          reduce using rule 62 (return_stmt -> RETURN SEMICOLON .)
    RBLOCK          reduce using rule 62 (return_stmt -> RETURN SEMICOLON .)
    LBLOCK          reduce using rule 62 (return_stmt -> RETURN SEMICOLON .)
    RETURN          reduce using rule 62 (return_stmt -> RETURN SEMICOLON .)


state 148

    (63) return_stmt -> RETURN expression . SEMICOLON

    SEMICOLON       shift and go to state 173


state 149

    (59) iteration_stmt -> WHILE LPAREN expression RPAREN . statement
    (44) statement -> . expression_stmt
    (45) statement -> . compount_stmt
    (46) statement -> . selection_stmt
    (47) statement -> . iteration_stmt
    (48) statement -> . show_in_screen
    (49) statement -> . return_stmt
    (50) expression_stmt -> . expression SEMICOLON
    (51) expression_stmt -> . SEMICOLON
    (38) compount_stmt -> . LBLOCK local_declarations statement_list RBLOCK
    (52) selection_stmt -> . IF LPAREN expression RPAREN statement
    (53) selection_stmt -> . IF LPAREN expression RPAREN statement ELSE statement
    (54) selection_stmt -> . IF LPAREN expression RPAREN statement ELSEIF statement
    (55) selection_stmt -> . SWITCH LPAREN var_val RPAREN statement
    (56) selection_stmt -> . CASE NUMBER COLON statement BREAK SEMICOLON
    (57) selection_stmt -> . DEFAULT COLON statement BREAK SEMICOLON
    (58) selection_stmt -> . VARIABLE relop VARIABLE QUESTIONMARK expression COLON expression SEMICOLON
    (59) iteration_stmt -> . WHILE LPAREN expression RPAREN statement
    (60) iteration_stmt -> . FOR LPAREN var_declaration2 SEMICOLON expression SEMICOLON additive_expression RPAREN statement
    (61) iteration_stmt -> . FOREACH LPAREN var_val AS var_val RPAREN statement
    (12) show_in_screen -> . ECHO var_val SEMICOLON
    (13) show_in_screen -> . ECHO CADENA1 SEMICOLON
    (14) show_in_screen -> . ECHO selection_stmt
    (62) return_stmt -> . RETURN SEMICOLON
    (63) return_stmt -> . RETURN expression SEMICOLON
    (64) expression -> . var_val EQUAL expression
    (65) expression -> . simple_expression
    (66) var_val -> . VARIABLE
    (67) var_val -> . VARIABLE LBRACKET expression RBRACKET
    (68) simple_expression -> . additive_expression relop additive_expression
    (69) simple_expression -> . additive_expression
    (77) additive_expression -> . additive_expression addop term
    (78) additive_expression -> . term
    (79) additive_expression -> . term MINUSMINUS
    (80) additive_expression -> . term PLUSPLUS
    (81) additive_expression -> . addop term
    (84) term -> . term mulop factor
    (85) term -> . factor
    (86) term -> . CADENA1
    (87) term -> . CADENA2
    (82) addop -> . PLUS
    (83) addop -> . MINUS
    (90) factor -> . LPAREN expression RPAREN
    (91) factor -> . var_val
    (92) factor -> . call
    (93) factor -> . NUMBER
    (94) call -> . VARIABLE2 LPAREN args RPAREN

    SEMICOLON       shift and go to state 13
    LBLOCK          shift and go to state 114
    IF              shift and go to state 16
    SWITCH          shift and go to state 19
    CASE            shift and go to state 21
    DEFAULT         shift and go to state 22
    VARIABLE        shift and go to state 115
    WHILE           shift and go to state 23
    FOR             shift and go to state 24
    FOREACH         shift and go to state 26
    ECHO            shift and go to state 29
    RETURN          shift and go to state 116
    CADENA1         shift and go to state 61
    CADENA2         shift and go to state 36
    PLUS            shift and go to state 37
    MINUS           shift and go to state 38
    LPAREN          shift and go to state 17
    NUMBER          shift and go to state 62
    VARIABLE2       shift and go to state 28

    expression                     shift and go to state 18
    statement                      shift and go to state 174
    expression_stmt                shift and go to state 108
    compount_stmt                  shift and go to state 109
    selection_stmt                 shift and go to state 110
    iteration_stmt                 shift and go to state 111
    show_in_screen                 shift and go to state 112
    return_stmt                    shift and go to state 113
    var_val                        shift and go to state 20
    additive_expression            shift and go to state 25
    simple_expression              shift and go to state 32
    addop                          shift and go to state 33
    term                           shift and go to state 34
    factor                         shift and go to state 35
    call                           shift and go to state 39

state 150

    (60) iteration_stmt -> FOR LPAREN var_declaration2 SEMICOLON . expression SEMICOLON additive_expression RPAREN statement
    (64) expression -> . var_val EQUAL expression
    (65) expression -> . simple_expression
    (66) var_val -> . VARIABLE
    (67) var_val -> . VARIABLE LBRACKET expression RBRACKET
    (68) simple_expression -> . additive_expression relop additive_expression
    (69) simple_expression -> . additive_expression
    (77) additive_expression -> . additive_expression addop term
    (78) additive_expression -> . term
    (79) additive_expression -> . term MINUSMINUS
    (80) additive_expression -> . term PLUSPLUS
    (81) additive_expression -> . addop term
    (84) term -> . term mulop factor
    (85) term -> . factor
    (86) term -> . CADENA1
    (87) term -> . CADENA2
    (82) addop -> . PLUS
    (83) addop -> . MINUS
    (90) factor -> . LPAREN expression RPAREN
    (91) factor -> . var_val
    (92) factor -> . call
    (93) factor -> . NUMBER
    (94) call -> . VARIABLE2 LPAREN args RPAREN

    VARIABLE        shift and go to state 60
    CADENA1         shift and go to state 61
    CADENA2         shift and go to state 36
    PLUS            shift and go to state 37
    MINUS           shift and go to state 38
    LPAREN          shift and go to state 17
    NUMBER          shift and go to state 62
    VARIABLE2       shift and go to state 28

    expression                     shift and go to state 175
    additive_expression            shift and go to state 25
    var_val                        shift and go to state 20
    simple_expression              shift and go to state 32
    addop                          shift and go to state 33
    term                           shift and go to state 34
    factor                         shift and go to state 35
    call                           shift and go to state 39

state 151

    (61) iteration_stmt -> FOREACH LPAREN var_val AS . var_val RPAREN statement
    (66) var_val -> . VARIABLE
    (67) var_val -> . VARIABLE LBRACKET expression RBRACKET

    VARIABLE        shift and go to state 60

    var_val                        shift and go to state 176

state 152

    (31) fun_declaration -> FUNCTION VARIABLE2 LPAREN params . RPAREN statement

    RPAREN          shift and go to state 177


state 153

    (32) params -> param_list .
    (33) param_list -> param_list . COMMA param

    RPAREN          reduce using rule 32 (params -> param_list .)
    COMMA           shift and go to state 178


state 154

    (34) param_list -> param .

    COMMA           reduce using rule 34 (param_list -> param .)
    RPAREN          reduce using rule 34 (param_list -> param .)


state 155

    (35) param -> VARIABLE .
    (36) param -> VARIABLE . LBRACKET RBRACKET

    COMMA           reduce using rule 35 (param -> VARIABLE .)
    RPAREN          reduce using rule 35 (param -> VARIABLE .)
    LBRACKET        shift and go to state 179


state 156

    (37) param -> empty_function .

    COMMA           reduce using rule 37 (param -> empty_function .)
    RPAREN          reduce using rule 37 (param -> empty_function .)


state 157

    (94) call -> VARIABLE2 LPAREN args RPAREN .

    MINUSMINUS      reduce using rule 94 (call -> VARIABLE2 LPAREN args RPAREN .)
    PLUSPLUS        reduce using rule 94 (call -> VARIABLE2 LPAREN args RPAREN .)
    TIMES           reduce using rule 94 (call -> VARIABLE2 LPAREN args RPAREN .)
    DIVIDE          reduce using rule 94 (call -> VARIABLE2 LPAREN args RPAREN .)
    LESS            reduce using rule 94 (call -> VARIABLE2 LPAREN args RPAREN .)
    LESSEQUAL       reduce using rule 94 (call -> VARIABLE2 LPAREN args RPAREN .)
    GREATER         reduce using rule 94 (call -> VARIABLE2 LPAREN args RPAREN .)
    GREATEREQUAL    reduce using rule 94 (call -> VARIABLE2 LPAREN args RPAREN .)
    DEQUAL          reduce using rule 94 (call -> VARIABLE2 LPAREN args RPAREN .)
    DISTINT         reduce using rule 94 (call -> VARIABLE2 LPAREN args RPAREN .)
    ISEQUAL         reduce using rule 94 (call -> VARIABLE2 LPAREN args RPAREN .)
    PLUS            reduce using rule 94 (call -> VARIABLE2 LPAREN args RPAREN .)
    MINUS           reduce using rule 94 (call -> VARIABLE2 LPAREN args RPAREN .)
    SEMICOLON       reduce using rule 94 (call -> VARIABLE2 LPAREN args RPAREN .)
    RPAREN          reduce using rule 94 (call -> VARIABLE2 LPAREN args RPAREN .)
    RBRACKET        reduce using rule 94 (call -> VARIABLE2 LPAREN args RPAREN .)
    COMMA           reduce using rule 94 (call -> VARIABLE2 LPAREN args RPAREN .)
    COLON           reduce using rule 94 (call -> VARIABLE2 LPAREN args RPAREN .)


state 158

    (97) args_list -> args_list COMMA . expression
    (64) expression -> . var_val EQUAL expression
    (65) expression -> . simple_expression
    (66) var_val -> . VARIABLE
    (67) var_val -> . VARIABLE LBRACKET expression RBRACKET
    (68) simple_expression -> . additive_expression relop additive_expression
    (69) simple_expression -> . additive_expression
    (77) additive_expression -> . additive_expression addop term
    (78) additive_expression -> . term
    (79) additive_expression -> . term MINUSMINUS
    (80) additive_expression -> . term PLUSPLUS
    (81) additive_expression -> . addop term
    (84) term -> . term mulop factor
    (85) term -> . factor
    (86) term -> . CADENA1
    (87) term -> . CADENA2
    (82) addop -> . PLUS
    (83) addop -> . MINUS
    (90) factor -> . LPAREN expression RPAREN
    (91) factor -> . var_val
    (92) factor -> . call
    (93) factor -> . NUMBER
    (94) call -> . VARIABLE2 LPAREN args RPAREN

    VARIABLE        shift and go to state 60
    CADENA1         shift and go to state 61
    CADENA2         shift and go to state 36
    PLUS            shift and go to state 37
    MINUS           shift and go to state 38
    LPAREN          shift and go to state 17
    NUMBER          shift and go to state 62
    VARIABLE2       shift and go to state 28

    expression                     shift and go to state 180
    var_val                        shift and go to state 20
    simple_expression              shift and go to state 32
    additive_expression            shift and go to state 25
    addop                          shift and go to state 33
    term                           shift and go to state 34
    factor                         shift and go to state 35
    call                           shift and go to state 39

state 159

    (16) var_declaration -> VARIABLE LBRACKET NUMBER RBRACKET SEMICOLON .

    QUESTIONMARK    reduce using rule 16 (var_declaration -> VARIABLE LBRACKET NUMBER RBRACKET SEMICOLON .)
    VARIABLE        reduce using rule 16 (var_declaration -> VARIABLE LBRACKET NUMBER RBRACKET SEMICOLON .)
    IF              reduce using rule 16 (var_declaration -> VARIABLE LBRACKET NUMBER RBRACKET SEMICOLON .)
    SWITCH          reduce using rule 16 (var_declaration -> VARIABLE LBRACKET NUMBER RBRACKET SEMICOLON .)
    CASE            reduce using rule 16 (var_declaration -> VARIABLE LBRACKET NUMBER RBRACKET SEMICOLON .)
    DEFAULT         reduce using rule 16 (var_declaration -> VARIABLE LBRACKET NUMBER RBRACKET SEMICOLON .)
    WHILE           reduce using rule 16 (var_declaration -> VARIABLE LBRACKET NUMBER RBRACKET SEMICOLON .)
    FOR             reduce using rule 16 (var_declaration -> VARIABLE LBRACKET NUMBER RBRACKET SEMICOLON .)
    FOREACH         reduce using rule 16 (var_declaration -> VARIABLE LBRACKET NUMBER RBRACKET SEMICOLON .)
    FUNCTION        reduce using rule 16 (var_declaration -> VARIABLE LBRACKET NUMBER RBRACKET SEMICOLON .)
    ECHO            reduce using rule 16 (var_declaration -> VARIABLE LBRACKET NUMBER RBRACKET SEMICOLON .)
    SEMICOLON       reduce using rule 16 (var_declaration -> VARIABLE LBRACKET NUMBER RBRACKET SEMICOLON .)
    COMMA           reduce using rule 16 (var_declaration -> VARIABLE LBRACKET NUMBER RBRACKET SEMICOLON .)
    NUMBER          reduce using rule 16 (var_declaration -> VARIABLE LBRACKET NUMBER RBRACKET SEMICOLON .)
    CADENA1         reduce using rule 16 (var_declaration -> VARIABLE LBRACKET NUMBER RBRACKET SEMICOLON .)
    CADENA2         reduce using rule 16 (var_declaration -> VARIABLE LBRACKET NUMBER RBRACKET SEMICOLON .)
    PLUS            reduce using rule 16 (var_declaration -> VARIABLE LBRACKET NUMBER RBRACKET SEMICOLON .)
    MINUS           reduce using rule 16 (var_declaration -> VARIABLE LBRACKET NUMBER RBRACKET SEMICOLON .)
    LPAREN          reduce using rule 16 (var_declaration -> VARIABLE LBRACKET NUMBER RBRACKET SEMICOLON .)
    VARIABLE2       reduce using rule 16 (var_declaration -> VARIABLE LBRACKET NUMBER RBRACKET SEMICOLON .)
    LBLOCK          reduce using rule 16 (var_declaration -> VARIABLE LBRACKET NUMBER RBRACKET SEMICOLON .)
    RETURN          reduce using rule 16 (var_declaration -> VARIABLE LBRACKET NUMBER RBRACKET SEMICOLON .)
    RBLOCK          reduce using rule 16 (var_declaration -> VARIABLE LBRACKET NUMBER RBRACKET SEMICOLON .)


state 160

    (58) selection_stmt -> VARIABLE relop VARIABLE QUESTIONMARK expression . COLON expression SEMICOLON

    COLON           shift and go to state 181


state 161

    (21) var_declaration2 -> VARIABLE EQUAL VARIABLE COMMA var_declaration2 .

    SEMICOLON       reduce using rule 21 (var_declaration2 -> VARIABLE EQUAL VARIABLE COMMA var_declaration2 .)


state 162

    (19) var_declaration2 -> VARIABLE EQUAL NUMBER COMMA var_declaration2 .

    SEMICOLON       reduce using rule 19 (var_declaration2 -> VARIABLE EQUAL NUMBER COMMA var_declaration2 .)


state 163

    (25) var_declaration2 -> VARIABLE EQUAL LBRACKET NUMBER COMMA . var_declaration2
    (17) var_declaration2 -> . VARIABLE
    (18) var_declaration2 -> . VARIABLE COMMA var_declaration2
    (19) var_declaration2 -> . VARIABLE EQUAL NUMBER COMMA var_declaration2
    (20) var_declaration2 -> . VARIABLE EQUAL NUMBER
    (21) var_declaration2 -> . VARIABLE EQUAL VARIABLE COMMA var_declaration2
    (22) var_declaration2 -> . VARIABLE EQUAL VARIABLE
    (23) var_declaration2 -> . COMMA
    (24) var_declaration2 -> . VARIABLE EQUAL VARIABLE simple_expression
    (25) var_declaration2 -> . VARIABLE EQUAL LBRACKET NUMBER COMMA var_declaration2
    (26) var_declaration2 -> . NUMBER COMMA var_declaration2
    (27) var_declaration2 -> . NUMBER RBRACKET
    (28) var_declaration2 -> . VARIABLE EQUAL LBRACKET CADENA1 COMMA var_declaration2
    (29) var_declaration2 -> . CADENA1 COMMA var_declaration2
    (30) var_declaration2 -> . CADENA1 RBRACKET

    VARIABLE        shift and go to state 93
    COMMA           shift and go to state 31
    NUMBER          shift and go to state 95
    CADENA1         shift and go to state 96

    var_declaration2               shift and go to state 182

state 164

    (28) var_declaration2 -> VARIABLE EQUAL LBRACKET CADENA1 COMMA . var_declaration2
    (17) var_declaration2 -> . VARIABLE
    (18) var_declaration2 -> . VARIABLE COMMA var_declaration2
    (19) var_declaration2 -> . VARIABLE EQUAL NUMBER COMMA var_declaration2
    (20) var_declaration2 -> . VARIABLE EQUAL NUMBER
    (21) var_declaration2 -> . VARIABLE EQUAL VARIABLE COMMA var_declaration2
    (22) var_declaration2 -> . VARIABLE EQUAL VARIABLE
    (23) var_declaration2 -> . COMMA
    (24) var_declaration2 -> . VARIABLE EQUAL VARIABLE simple_expression
    (25) var_declaration2 -> . VARIABLE EQUAL LBRACKET NUMBER COMMA var_declaration2
    (26) var_declaration2 -> . NUMBER COMMA var_declaration2
    (27) var_declaration2 -> . NUMBER RBRACKET
    (28) var_declaration2 -> . VARIABLE EQUAL LBRACKET CADENA1 COMMA var_declaration2
    (29) var_declaration2 -> . CADENA1 COMMA var_declaration2
    (30) var_declaration2 -> . CADENA1 RBRACKET

    VARIABLE        shift and go to state 93
    COMMA           shift and go to state 31
    NUMBER          shift and go to state 95
    CADENA1         shift and go to state 96

    var_declaration2               shift and go to state 183

state 165

    (52) selection_stmt -> IF LPAREN expression RPAREN statement .
    (53) selection_stmt -> IF LPAREN expression RPAREN statement . ELSE statement
    (54) selection_stmt -> IF LPAREN expression RPAREN statement . ELSEIF statement

  ! shift/reduce conflict for ELSE resolved as shift
  ! shift/reduce conflict for ELSEIF resolved as shift
    QUESTIONMARK    reduce using rule 52 (selection_stmt -> IF LPAREN expression RPAREN statement .)
    VARIABLE        reduce using rule 52 (selection_stmt -> IF LPAREN expression RPAREN statement .)
    IF              reduce using rule 52 (selection_stmt -> IF LPAREN expression RPAREN statement .)
    SWITCH          reduce using rule 52 (selection_stmt -> IF LPAREN expression RPAREN statement .)
    CASE            reduce using rule 52 (selection_stmt -> IF LPAREN expression RPAREN statement .)
    DEFAULT         reduce using rule 52 (selection_stmt -> IF LPAREN expression RPAREN statement .)
    WHILE           reduce using rule 52 (selection_stmt -> IF LPAREN expression RPAREN statement .)
    FOR             reduce using rule 52 (selection_stmt -> IF LPAREN expression RPAREN statement .)
    FOREACH         reduce using rule 52 (selection_stmt -> IF LPAREN expression RPAREN statement .)
    FUNCTION        reduce using rule 52 (selection_stmt -> IF LPAREN expression RPAREN statement .)
    ECHO            reduce using rule 52 (selection_stmt -> IF LPAREN expression RPAREN statement .)
    SEMICOLON       reduce using rule 52 (selection_stmt -> IF LPAREN expression RPAREN statement .)
    COMMA           reduce using rule 52 (selection_stmt -> IF LPAREN expression RPAREN statement .)
    NUMBER          reduce using rule 52 (selection_stmt -> IF LPAREN expression RPAREN statement .)
    CADENA1         reduce using rule 52 (selection_stmt -> IF LPAREN expression RPAREN statement .)
    CADENA2         reduce using rule 52 (selection_stmt -> IF LPAREN expression RPAREN statement .)
    PLUS            reduce using rule 52 (selection_stmt -> IF LPAREN expression RPAREN statement .)
    MINUS           reduce using rule 52 (selection_stmt -> IF LPAREN expression RPAREN statement .)
    LPAREN          reduce using rule 52 (selection_stmt -> IF LPAREN expression RPAREN statement .)
    VARIABLE2       reduce using rule 52 (selection_stmt -> IF LPAREN expression RPAREN statement .)
    BREAK           reduce using rule 52 (selection_stmt -> IF LPAREN expression RPAREN statement .)
    RBLOCK          reduce using rule 52 (selection_stmt -> IF LPAREN expression RPAREN statement .)
    LBLOCK          reduce using rule 52 (selection_stmt -> IF LPAREN expression RPAREN statement .)
    RETURN          reduce using rule 52 (selection_stmt -> IF LPAREN expression RPAREN statement .)
    ELSE            shift and go to state 184
    ELSEIF          shift and go to state 185

  ! ELSE            [ reduce using rule 52 (selection_stmt -> IF LPAREN expression RPAREN statement .) ]
  ! ELSEIF          [ reduce using rule 52 (selection_stmt -> IF LPAREN expression RPAREN statement .) ]


state 166

    (55) selection_stmt -> SWITCH LPAREN var_val RPAREN statement .

    QUESTIONMARK    reduce using rule 55 (selection_stmt -> SWITCH LPAREN var_val RPAREN statement .)
    VARIABLE        reduce using rule 55 (selection_stmt -> SWITCH LPAREN var_val RPAREN statement .)
    IF              reduce using rule 55 (selection_stmt -> SWITCH LPAREN var_val RPAREN statement .)
    SWITCH          reduce using rule 55 (selection_stmt -> SWITCH LPAREN var_val RPAREN statement .)
    CASE            reduce using rule 55 (selection_stmt -> SWITCH LPAREN var_val RPAREN statement .)
    DEFAULT         reduce using rule 55 (selection_stmt -> SWITCH LPAREN var_val RPAREN statement .)
    WHILE           reduce using rule 55 (selection_stmt -> SWITCH LPAREN var_val RPAREN statement .)
    FOR             reduce using rule 55 (selection_stmt -> SWITCH LPAREN var_val RPAREN statement .)
    FOREACH         reduce using rule 55 (selection_stmt -> SWITCH LPAREN var_val RPAREN statement .)
    FUNCTION        reduce using rule 55 (selection_stmt -> SWITCH LPAREN var_val RPAREN statement .)
    ECHO            reduce using rule 55 (selection_stmt -> SWITCH LPAREN var_val RPAREN statement .)
    SEMICOLON       reduce using rule 55 (selection_stmt -> SWITCH LPAREN var_val RPAREN statement .)
    COMMA           reduce using rule 55 (selection_stmt -> SWITCH LPAREN var_val RPAREN statement .)
    NUMBER          reduce using rule 55 (selection_stmt -> SWITCH LPAREN var_val RPAREN statement .)
    CADENA1         reduce using rule 55 (selection_stmt -> SWITCH LPAREN var_val RPAREN statement .)
    CADENA2         reduce using rule 55 (selection_stmt -> SWITCH LPAREN var_val RPAREN statement .)
    PLUS            reduce using rule 55 (selection_stmt -> SWITCH LPAREN var_val RPAREN statement .)
    MINUS           reduce using rule 55 (selection_stmt -> SWITCH LPAREN var_val RPAREN statement .)
    LPAREN          reduce using rule 55 (selection_stmt -> SWITCH LPAREN var_val RPAREN statement .)
    VARIABLE2       reduce using rule 55 (selection_stmt -> SWITCH LPAREN var_val RPAREN statement .)
    BREAK           reduce using rule 55 (selection_stmt -> SWITCH LPAREN var_val RPAREN statement .)
    ELSE            reduce using rule 55 (selection_stmt -> SWITCH LPAREN var_val RPAREN statement .)
    ELSEIF          reduce using rule 55 (selection_stmt -> SWITCH LPAREN var_val RPAREN statement .)
    RBLOCK          reduce using rule 55 (selection_stmt -> SWITCH LPAREN var_val RPAREN statement .)
    LBLOCK          reduce using rule 55 (selection_stmt -> SWITCH LPAREN var_val RPAREN statement .)
    RETURN          reduce using rule 55 (selection_stmt -> SWITCH LPAREN var_val RPAREN statement .)


state 167

    (56) selection_stmt -> CASE NUMBER COLON statement BREAK . SEMICOLON

    SEMICOLON       shift and go to state 186


state 168

    (57) selection_stmt -> DEFAULT COLON statement BREAK SEMICOLON .

    QUESTIONMARK    reduce using rule 57 (selection_stmt -> DEFAULT COLON statement BREAK SEMICOLON .)
    VARIABLE        reduce using rule 57 (selection_stmt -> DEFAULT COLON statement BREAK SEMICOLON .)
    IF              reduce using rule 57 (selection_stmt -> DEFAULT COLON statement BREAK SEMICOLON .)
    SWITCH          reduce using rule 57 (selection_stmt -> DEFAULT COLON statement BREAK SEMICOLON .)
    CASE            reduce using rule 57 (selection_stmt -> DEFAULT COLON statement BREAK SEMICOLON .)
    DEFAULT         reduce using rule 57 (selection_stmt -> DEFAULT COLON statement BREAK SEMICOLON .)
    WHILE           reduce using rule 57 (selection_stmt -> DEFAULT COLON statement BREAK SEMICOLON .)
    FOR             reduce using rule 57 (selection_stmt -> DEFAULT COLON statement BREAK SEMICOLON .)
    FOREACH         reduce using rule 57 (selection_stmt -> DEFAULT COLON statement BREAK SEMICOLON .)
    FUNCTION        reduce using rule 57 (selection_stmt -> DEFAULT COLON statement BREAK SEMICOLON .)
    ECHO            reduce using rule 57 (selection_stmt -> DEFAULT COLON statement BREAK SEMICOLON .)
    SEMICOLON       reduce using rule 57 (selection_stmt -> DEFAULT COLON statement BREAK SEMICOLON .)
    COMMA           reduce using rule 57 (selection_stmt -> DEFAULT COLON statement BREAK SEMICOLON .)
    NUMBER          reduce using rule 57 (selection_stmt -> DEFAULT COLON statement BREAK SEMICOLON .)
    CADENA1         reduce using rule 57 (selection_stmt -> DEFAULT COLON statement BREAK SEMICOLON .)
    CADENA2         reduce using rule 57 (selection_stmt -> DEFAULT COLON statement BREAK SEMICOLON .)
    PLUS            reduce using rule 57 (selection_stmt -> DEFAULT COLON statement BREAK SEMICOLON .)
    MINUS           reduce using rule 57 (selection_stmt -> DEFAULT COLON statement BREAK SEMICOLON .)
    LPAREN          reduce using rule 57 (selection_stmt -> DEFAULT COLON statement BREAK SEMICOLON .)
    VARIABLE2       reduce using rule 57 (selection_stmt -> DEFAULT COLON statement BREAK SEMICOLON .)
    BREAK           reduce using rule 57 (selection_stmt -> DEFAULT COLON statement BREAK SEMICOLON .)
    ELSE            reduce using rule 57 (selection_stmt -> DEFAULT COLON statement BREAK SEMICOLON .)
    ELSEIF          reduce using rule 57 (selection_stmt -> DEFAULT COLON statement BREAK SEMICOLON .)
    RBLOCK          reduce using rule 57 (selection_stmt -> DEFAULT COLON statement BREAK SEMICOLON .)
    LBLOCK          reduce using rule 57 (selection_stmt -> DEFAULT COLON statement BREAK SEMICOLON .)
    RETURN          reduce using rule 57 (selection_stmt -> DEFAULT COLON statement BREAK SEMICOLON .)


state 169

    (38) compount_stmt -> LBLOCK local_declarations statement_list . RBLOCK
    (41) statement_list -> statement_list . statement
    (44) statement -> . expression_stmt
    (45) statement -> . compount_stmt
    (46) statement -> . selection_stmt
    (47) statement -> . iteration_stmt
    (48) statement -> . show_in_screen
    (49) statement -> . return_stmt
    (50) expression_stmt -> . expression SEMICOLON
    (51) expression_stmt -> . SEMICOLON
    (38) compount_stmt -> . LBLOCK local_declarations statement_list RBLOCK
    (52) selection_stmt -> . IF LPAREN expression RPAREN statement
    (53) selection_stmt -> . IF LPAREN expression RPAREN statement ELSE statement
    (54) selection_stmt -> . IF LPAREN expression RPAREN statement ELSEIF statement
    (55) selection_stmt -> . SWITCH LPAREN var_val RPAREN statement
    (56) selection_stmt -> . CASE NUMBER COLON statement BREAK SEMICOLON
    (57) selection_stmt -> . DEFAULT COLON statement BREAK SEMICOLON
    (58) selection_stmt -> . VARIABLE relop VARIABLE QUESTIONMARK expression COLON expression SEMICOLON
    (59) iteration_stmt -> . WHILE LPAREN expression RPAREN statement
    (60) iteration_stmt -> . FOR LPAREN var_declaration2 SEMICOLON expression SEMICOLON additive_expression RPAREN statement
    (61) iteration_stmt -> . FOREACH LPAREN var_val AS var_val RPAREN statement
    (12) show_in_screen -> . ECHO var_val SEMICOLON
    (13) show_in_screen -> . ECHO CADENA1 SEMICOLON
    (14) show_in_screen -> . ECHO selection_stmt
    (62) return_stmt -> . RETURN SEMICOLON
    (63) return_stmt -> . RETURN expression SEMICOLON
    (64) expression -> . var_val EQUAL expression
    (65) expression -> . simple_expression
    (66) var_val -> . VARIABLE
    (67) var_val -> . VARIABLE LBRACKET expression RBRACKET
    (68) simple_expression -> . additive_expression relop additive_expression
    (69) simple_expression -> . additive_expression
    (77) additive_expression -> . additive_expression addop term
    (78) additive_expression -> . term
    (79) additive_expression -> . term MINUSMINUS
    (80) additive_expression -> . term PLUSPLUS
    (81) additive_expression -> . addop term
    (84) term -> . term mulop factor
    (85) term -> . factor
    (86) term -> . CADENA1
    (87) term -> . CADENA2
    (82) addop -> . PLUS
    (83) addop -> . MINUS
    (90) factor -> . LPAREN expression RPAREN
    (91) factor -> . var_val
    (92) factor -> . call
    (93) factor -> . NUMBER
    (94) call -> . VARIABLE2 LPAREN args RPAREN

    RBLOCK          shift and go to state 187
    SEMICOLON       shift and go to state 13
    LBLOCK          shift and go to state 114
    IF              shift and go to state 16
    SWITCH          shift and go to state 19
    CASE            shift and go to state 21
    DEFAULT         shift and go to state 22
    VARIABLE        shift and go to state 115
    WHILE           shift and go to state 23
    FOR             shift and go to state 24
    FOREACH         shift and go to state 26
    ECHO            shift and go to state 29
    RETURN          shift and go to state 116
    CADENA1         shift and go to state 61
    CADENA2         shift and go to state 36
    PLUS            shift and go to state 37
    MINUS           shift and go to state 38
    LPAREN          shift and go to state 17
    NUMBER          shift and go to state 62
    VARIABLE2       shift and go to state 28

    statement                      shift and go to state 188
    expression_stmt                shift and go to state 108
    compount_stmt                  shift and go to state 109
    selection_stmt                 shift and go to state 110
    iteration_stmt                 shift and go to state 111
    show_in_screen                 shift and go to state 112
    return_stmt                    shift and go to state 113
    expression                     shift and go to state 18
    var_val                        shift and go to state 20
    additive_expression            shift and go to state 25
    simple_expression              shift and go to state 32
    addop                          shift and go to state 33
    term                           shift and go to state 34
    factor                         shift and go to state 35
    call                           shift and go to state 39

state 170

    (42) statement_list -> statement .

    RBLOCK          reduce using rule 42 (statement_list -> statement .)
    SEMICOLON       reduce using rule 42 (statement_list -> statement .)
    LBLOCK          reduce using rule 42 (statement_list -> statement .)
    IF              reduce using rule 42 (statement_list -> statement .)
    SWITCH          reduce using rule 42 (statement_list -> statement .)
    CASE            reduce using rule 42 (statement_list -> statement .)
    DEFAULT         reduce using rule 42 (statement_list -> statement .)
    VARIABLE        reduce using rule 42 (statement_list -> statement .)
    WHILE           reduce using rule 42 (statement_list -> statement .)
    FOR             reduce using rule 42 (statement_list -> statement .)
    FOREACH         reduce using rule 42 (statement_list -> statement .)
    ECHO            reduce using rule 42 (statement_list -> statement .)
    RETURN          reduce using rule 42 (statement_list -> statement .)
    CADENA1         reduce using rule 42 (statement_list -> statement .)
    CADENA2         reduce using rule 42 (statement_list -> statement .)
    PLUS            reduce using rule 42 (statement_list -> statement .)
    MINUS           reduce using rule 42 (statement_list -> statement .)
    LPAREN          reduce using rule 42 (statement_list -> statement .)
    NUMBER          reduce using rule 42 (statement_list -> statement .)
    VARIABLE2       reduce using rule 42 (statement_list -> statement .)


state 171

    (43) statement_list -> empty_function .

    RBLOCK          reduce using rule 43 (statement_list -> empty_function .)
    SEMICOLON       reduce using rule 43 (statement_list -> empty_function .)
    LBLOCK          reduce using rule 43 (statement_list -> empty_function .)
    IF              reduce using rule 43 (statement_list -> empty_function .)
    SWITCH          reduce using rule 43 (statement_list -> empty_function .)
    CASE            reduce using rule 43 (statement_list -> empty_function .)
    DEFAULT         reduce using rule 43 (statement_list -> empty_function .)
    VARIABLE        reduce using rule 43 (statement_list -> empty_function .)
    WHILE           reduce using rule 43 (statement_list -> empty_function .)
    FOR             reduce using rule 43 (statement_list -> empty_function .)
    FOREACH         reduce using rule 43 (statement_list -> empty_function .)
    ECHO            reduce using rule 43 (statement_list -> empty_function .)
    RETURN          reduce using rule 43 (statement_list -> empty_function .)
    CADENA1         reduce using rule 43 (statement_list -> empty_function .)
    CADENA2         reduce using rule 43 (statement_list -> empty_function .)
    PLUS            reduce using rule 43 (statement_list -> empty_function .)
    MINUS           reduce using rule 43 (statement_list -> empty_function .)
    LPAREN          reduce using rule 43 (statement_list -> empty_function .)
    NUMBER          reduce using rule 43 (statement_list -> empty_function .)
    VARIABLE2       reduce using rule 43 (statement_list -> empty_function .)


state 172

    (16) var_declaration -> VARIABLE LBRACKET . NUMBER RBRACKET SEMICOLON

    NUMBER          shift and go to state 189


state 173

    (63) return_stmt -> RETURN expression SEMICOLON .

    BREAK           reduce using rule 63 (return_stmt -> RETURN expression SEMICOLON .)
    QUESTIONMARK    reduce using rule 63 (return_stmt -> RETURN expression SEMICOLON .)
    VARIABLE        reduce using rule 63 (return_stmt -> RETURN expression SEMICOLON .)
    IF              reduce using rule 63 (return_stmt -> RETURN expression SEMICOLON .)
    SWITCH          reduce using rule 63 (return_stmt -> RETURN expression SEMICOLON .)
    CASE            reduce using rule 63 (return_stmt -> RETURN expression SEMICOLON .)
    DEFAULT         reduce using rule 63 (return_stmt -> RETURN expression SEMICOLON .)
    WHILE           reduce using rule 63 (return_stmt -> RETURN expression SEMICOLON .)
    FOR             reduce using rule 63 (return_stmt -> RETURN expression SEMICOLON .)
    FOREACH         reduce using rule 63 (return_stmt -> RETURN expression SEMICOLON .)
    FUNCTION        reduce using rule 63 (return_stmt -> RETURN expression SEMICOLON .)
    ECHO            reduce using rule 63 (return_stmt -> RETURN expression SEMICOLON .)
    SEMICOLON       reduce using rule 63 (return_stmt -> RETURN expression SEMICOLON .)
    COMMA           reduce using rule 63 (return_stmt -> RETURN expression SEMICOLON .)
    NUMBER          reduce using rule 63 (return_stmt -> RETURN expression SEMICOLON .)
    CADENA1         reduce using rule 63 (return_stmt -> RETURN expression SEMICOLON .)
    CADENA2         reduce using rule 63 (return_stmt -> RETURN expression SEMICOLON .)
    PLUS            reduce using rule 63 (return_stmt -> RETURN expression SEMICOLON .)
    MINUS           reduce using rule 63 (return_stmt -> RETURN expression SEMICOLON .)
    LPAREN          reduce using rule 63 (return_stmt -> RETURN expression SEMICOLON .)
    VARIABLE2       reduce using rule 63 (return_stmt -> RETURN expression SEMICOLON .)
    ELSE            reduce using rule 63 (return_stmt -> RETURN expression SEMICOLON .)
    ELSEIF          reduce using rule 63 (return_stmt -> RETURN expression SEMICOLON .)
    RBLOCK          reduce using rule 63 (return_stmt -> RETURN expression SEMICOLON .)
    LBLOCK          reduce using rule 63 (return_stmt -> RETURN expression SEMICOLON .)
    RETURN          reduce using rule 63 (return_stmt -> RETURN expression SEMICOLON .)


state 174

    (59) iteration_stmt -> WHILE LPAREN expression RPAREN statement .

    QUESTIONMARK    reduce using rule 59 (iteration_stmt -> WHILE LPAREN expression RPAREN statement .)
    VARIABLE        reduce using rule 59 (iteration_stmt -> WHILE LPAREN expression RPAREN statement .)
    IF              reduce using rule 59 (iteration_stmt -> WHILE LPAREN expression RPAREN statement .)
    SWITCH          reduce using rule 59 (iteration_stmt -> WHILE LPAREN expression RPAREN statement .)
    CASE            reduce using rule 59 (iteration_stmt -> WHILE LPAREN expression RPAREN statement .)
    DEFAULT         reduce using rule 59 (iteration_stmt -> WHILE LPAREN expression RPAREN statement .)
    WHILE           reduce using rule 59 (iteration_stmt -> WHILE LPAREN expression RPAREN statement .)
    FOR             reduce using rule 59 (iteration_stmt -> WHILE LPAREN expression RPAREN statement .)
    FOREACH         reduce using rule 59 (iteration_stmt -> WHILE LPAREN expression RPAREN statement .)
    FUNCTION        reduce using rule 59 (iteration_stmt -> WHILE LPAREN expression RPAREN statement .)
    ECHO            reduce using rule 59 (iteration_stmt -> WHILE LPAREN expression RPAREN statement .)
    SEMICOLON       reduce using rule 59 (iteration_stmt -> WHILE LPAREN expression RPAREN statement .)
    COMMA           reduce using rule 59 (iteration_stmt -> WHILE LPAREN expression RPAREN statement .)
    NUMBER          reduce using rule 59 (iteration_stmt -> WHILE LPAREN expression RPAREN statement .)
    CADENA1         reduce using rule 59 (iteration_stmt -> WHILE LPAREN expression RPAREN statement .)
    CADENA2         reduce using rule 59 (iteration_stmt -> WHILE LPAREN expression RPAREN statement .)
    PLUS            reduce using rule 59 (iteration_stmt -> WHILE LPAREN expression RPAREN statement .)
    MINUS           reduce using rule 59 (iteration_stmt -> WHILE LPAREN expression RPAREN statement .)
    LPAREN          reduce using rule 59 (iteration_stmt -> WHILE LPAREN expression RPAREN statement .)
    VARIABLE2       reduce using rule 59 (iteration_stmt -> WHILE LPAREN expression RPAREN statement .)
    BREAK           reduce using rule 59 (iteration_stmt -> WHILE LPAREN expression RPAREN statement .)
    ELSE            reduce using rule 59 (iteration_stmt -> WHILE LPAREN expression RPAREN statement .)
    ELSEIF          reduce using rule 59 (iteration_stmt -> WHILE LPAREN expression RPAREN statement .)
    RBLOCK          reduce using rule 59 (iteration_stmt -> WHILE LPAREN expression RPAREN statement .)
    LBLOCK          reduce using rule 59 (iteration_stmt -> WHILE LPAREN expression RPAREN statement .)
    RETURN          reduce using rule 59 (iteration_stmt -> WHILE LPAREN expression RPAREN statement .)


state 175

    (60) iteration_stmt -> FOR LPAREN var_declaration2 SEMICOLON expression . SEMICOLON additive_expression RPAREN statement

    SEMICOLON       shift and go to state 190


state 176

    (61) iteration_stmt -> FOREACH LPAREN var_val AS var_val . RPAREN statement

    RPAREN          shift and go to state 191


state 177

    (31) fun_declaration -> FUNCTION VARIABLE2 LPAREN params RPAREN . statement
    (44) statement -> . expression_stmt
    (45) statement -> . compount_stmt
    (46) statement -> . selection_stmt
    (47) statement -> . iteration_stmt
    (48) statement -> . show_in_screen
    (49) statement -> . return_stmt
    (50) expression_stmt -> . expression SEMICOLON
    (51) expression_stmt -> . SEMICOLON
    (38) compount_stmt -> . LBLOCK local_declarations statement_list RBLOCK
    (52) selection_stmt -> . IF LPAREN expression RPAREN statement
    (53) selection_stmt -> . IF LPAREN expression RPAREN statement ELSE statement
    (54) selection_stmt -> . IF LPAREN expression RPAREN statement ELSEIF statement
    (55) selection_stmt -> . SWITCH LPAREN var_val RPAREN statement
    (56) selection_stmt -> . CASE NUMBER COLON statement BREAK SEMICOLON
    (57) selection_stmt -> . DEFAULT COLON statement BREAK SEMICOLON
    (58) selection_stmt -> . VARIABLE relop VARIABLE QUESTIONMARK expression COLON expression SEMICOLON
    (59) iteration_stmt -> . WHILE LPAREN expression RPAREN statement
    (60) iteration_stmt -> . FOR LPAREN var_declaration2 SEMICOLON expression SEMICOLON additive_expression RPAREN statement
    (61) iteration_stmt -> . FOREACH LPAREN var_val AS var_val RPAREN statement
    (12) show_in_screen -> . ECHO var_val SEMICOLON
    (13) show_in_screen -> . ECHO CADENA1 SEMICOLON
    (14) show_in_screen -> . ECHO selection_stmt
    (62) return_stmt -> . RETURN SEMICOLON
    (63) return_stmt -> . RETURN expression SEMICOLON
    (64) expression -> . var_val EQUAL expression
    (65) expression -> . simple_expression
    (66) var_val -> . VARIABLE
    (67) var_val -> . VARIABLE LBRACKET expression RBRACKET
    (68) simple_expression -> . additive_expression relop additive_expression
    (69) simple_expression -> . additive_expression
    (77) additive_expression -> . additive_expression addop term
    (78) additive_expression -> . term
    (79) additive_expression -> . term MINUSMINUS
    (80) additive_expression -> . term PLUSPLUS
    (81) additive_expression -> . addop term
    (84) term -> . term mulop factor
    (85) term -> . factor
    (86) term -> . CADENA1
    (87) term -> . CADENA2
    (82) addop -> . PLUS
    (83) addop -> . MINUS
    (90) factor -> . LPAREN expression RPAREN
    (91) factor -> . var_val
    (92) factor -> . call
    (93) factor -> . NUMBER
    (94) call -> . VARIABLE2 LPAREN args RPAREN

    SEMICOLON       shift and go to state 13
    LBLOCK          shift and go to state 114
    IF              shift and go to state 16
    SWITCH          shift and go to state 19
    CASE            shift and go to state 21
    DEFAULT         shift and go to state 22
    VARIABLE        shift and go to state 115
    WHILE           shift and go to state 23
    FOR             shift and go to state 24
    FOREACH         shift and go to state 26
    ECHO            shift and go to state 29
    RETURN          shift and go to state 116
    CADENA1         shift and go to state 61
    CADENA2         shift and go to state 36
    PLUS            shift and go to state 37
    MINUS           shift and go to state 38
    LPAREN          shift and go to state 17
    NUMBER          shift and go to state 62
    VARIABLE2       shift and go to state 28

    statement                      shift and go to state 192
    expression_stmt                shift and go to state 108
    compount_stmt                  shift and go to state 109
    selection_stmt                 shift and go to state 110
    iteration_stmt                 shift and go to state 111
    show_in_screen                 shift and go to state 112
    return_stmt                    shift and go to state 113
    expression                     shift and go to state 18
    var_val                        shift and go to state 20
    additive_expression            shift and go to state 25
    simple_expression              shift and go to state 32
    addop                          shift and go to state 33
    term                           shift and go to state 34
    factor                         shift and go to state 35
    call                           shift and go to state 39

state 178

    (33) param_list -> param_list COMMA . param
    (35) param -> . VARIABLE
    (36) param -> . VARIABLE LBRACKET RBRACKET
    (37) param -> . empty_function
    (99) empty_function -> .

    VARIABLE        shift and go to state 155
    COMMA           reduce using rule 99 (empty_function -> .)
    RPAREN          reduce using rule 99 (empty_function -> .)

    param                          shift and go to state 193
    empty_function                 shift and go to state 156

state 179

    (36) param -> VARIABLE LBRACKET . RBRACKET

    RBRACKET        shift and go to state 194


state 180

    (97) args_list -> args_list COMMA expression .

    COMMA           reduce using rule 97 (args_list -> args_list COMMA expression .)
    RPAREN          reduce using rule 97 (args_list -> args_list COMMA expression .)


state 181

    (58) selection_stmt -> VARIABLE relop VARIABLE QUESTIONMARK expression COLON . expression SEMICOLON
    (64) expression -> . var_val EQUAL expression
    (65) expression -> . simple_expression
    (66) var_val -> . VARIABLE
    (67) var_val -> . VARIABLE LBRACKET expression RBRACKET
    (68) simple_expression -> . additive_expression relop additive_expression
    (69) simple_expression -> . additive_expression
    (77) additive_expression -> . additive_expression addop term
    (78) additive_expression -> . term
    (79) additive_expression -> . term MINUSMINUS
    (80) additive_expression -> . term PLUSPLUS
    (81) additive_expression -> . addop term
    (84) term -> . term mulop factor
    (85) term -> . factor
    (86) term -> . CADENA1
    (87) term -> . CADENA2
    (82) addop -> . PLUS
    (83) addop -> . MINUS
    (90) factor -> . LPAREN expression RPAREN
    (91) factor -> . var_val
    (92) factor -> . call
    (93) factor -> . NUMBER
    (94) call -> . VARIABLE2 LPAREN args RPAREN

    VARIABLE        shift and go to state 60
    CADENA1         shift and go to state 61
    CADENA2         shift and go to state 36
    PLUS            shift and go to state 37
    MINUS           shift and go to state 38
    LPAREN          shift and go to state 17
    NUMBER          shift and go to state 62
    VARIABLE2       shift and go to state 28

    expression                     shift and go to state 195
    var_val                        shift and go to state 20
    simple_expression              shift and go to state 32
    additive_expression            shift and go to state 25
    addop                          shift and go to state 33
    term                           shift and go to state 34
    factor                         shift and go to state 35
    call                           shift and go to state 39

state 182

    (25) var_declaration2 -> VARIABLE EQUAL LBRACKET NUMBER COMMA var_declaration2 .

    SEMICOLON       reduce using rule 25 (var_declaration2 -> VARIABLE EQUAL LBRACKET NUMBER COMMA var_declaration2 .)


state 183

    (28) var_declaration2 -> VARIABLE EQUAL LBRACKET CADENA1 COMMA var_declaration2 .

    SEMICOLON       reduce using rule 28 (var_declaration2 -> VARIABLE EQUAL LBRACKET CADENA1 COMMA var_declaration2 .)


state 184

    (53) selection_stmt -> IF LPAREN expression RPAREN statement ELSE . statement
    (44) statement -> . expression_stmt
    (45) statement -> . compount_stmt
    (46) statement -> . selection_stmt
    (47) statement -> . iteration_stmt
    (48) statement -> . show_in_screen
    (49) statement -> . return_stmt
    (50) expression_stmt -> . expression SEMICOLON
    (51) expression_stmt -> . SEMICOLON
    (38) compount_stmt -> . LBLOCK local_declarations statement_list RBLOCK
    (52) selection_stmt -> . IF LPAREN expression RPAREN statement
    (53) selection_stmt -> . IF LPAREN expression RPAREN statement ELSE statement
    (54) selection_stmt -> . IF LPAREN expression RPAREN statement ELSEIF statement
    (55) selection_stmt -> . SWITCH LPAREN var_val RPAREN statement
    (56) selection_stmt -> . CASE NUMBER COLON statement BREAK SEMICOLON
    (57) selection_stmt -> . DEFAULT COLON statement BREAK SEMICOLON
    (58) selection_stmt -> . VARIABLE relop VARIABLE QUESTIONMARK expression COLON expression SEMICOLON
    (59) iteration_stmt -> . WHILE LPAREN expression RPAREN statement
    (60) iteration_stmt -> . FOR LPAREN var_declaration2 SEMICOLON expression SEMICOLON additive_expression RPAREN statement
    (61) iteration_stmt -> . FOREACH LPAREN var_val AS var_val RPAREN statement
    (12) show_in_screen -> . ECHO var_val SEMICOLON
    (13) show_in_screen -> . ECHO CADENA1 SEMICOLON
    (14) show_in_screen -> . ECHO selection_stmt
    (62) return_stmt -> . RETURN SEMICOLON
    (63) return_stmt -> . RETURN expression SEMICOLON
    (64) expression -> . var_val EQUAL expression
    (65) expression -> . simple_expression
    (66) var_val -> . VARIABLE
    (67) var_val -> . VARIABLE LBRACKET expression RBRACKET
    (68) simple_expression -> . additive_expression relop additive_expression
    (69) simple_expression -> . additive_expression
    (77) additive_expression -> . additive_expression addop term
    (78) additive_expression -> . term
    (79) additive_expression -> . term MINUSMINUS
    (80) additive_expression -> . term PLUSPLUS
    (81) additive_expression -> . addop term
    (84) term -> . term mulop factor
    (85) term -> . factor
    (86) term -> . CADENA1
    (87) term -> . CADENA2
    (82) addop -> . PLUS
    (83) addop -> . MINUS
    (90) factor -> . LPAREN expression RPAREN
    (91) factor -> . var_val
    (92) factor -> . call
    (93) factor -> . NUMBER
    (94) call -> . VARIABLE2 LPAREN args RPAREN

    SEMICOLON       shift and go to state 13
    LBLOCK          shift and go to state 114
    IF              shift and go to state 16
    SWITCH          shift and go to state 19
    CASE            shift and go to state 21
    DEFAULT         shift and go to state 22
    VARIABLE        shift and go to state 115
    WHILE           shift and go to state 23
    FOR             shift and go to state 24
    FOREACH         shift and go to state 26
    ECHO            shift and go to state 29
    RETURN          shift and go to state 116
    CADENA1         shift and go to state 61
    CADENA2         shift and go to state 36
    PLUS            shift and go to state 37
    MINUS           shift and go to state 38
    LPAREN          shift and go to state 17
    NUMBER          shift and go to state 62
    VARIABLE2       shift and go to state 28

    expression                     shift and go to state 18
    statement                      shift and go to state 196
    expression_stmt                shift and go to state 108
    compount_stmt                  shift and go to state 109
    selection_stmt                 shift and go to state 110
    iteration_stmt                 shift and go to state 111
    show_in_screen                 shift and go to state 112
    return_stmt                    shift and go to state 113
    var_val                        shift and go to state 20
    additive_expression            shift and go to state 25
    simple_expression              shift and go to state 32
    addop                          shift and go to state 33
    term                           shift and go to state 34
    factor                         shift and go to state 35
    call                           shift and go to state 39

state 185

    (54) selection_stmt -> IF LPAREN expression RPAREN statement ELSEIF . statement
    (44) statement -> . expression_stmt
    (45) statement -> . compount_stmt
    (46) statement -> . selection_stmt
    (47) statement -> . iteration_stmt
    (48) statement -> . show_in_screen
    (49) statement -> . return_stmt
    (50) expression_stmt -> . expression SEMICOLON
    (51) expression_stmt -> . SEMICOLON
    (38) compount_stmt -> . LBLOCK local_declarations statement_list RBLOCK
    (52) selection_stmt -> . IF LPAREN expression RPAREN statement
    (53) selection_stmt -> . IF LPAREN expression RPAREN statement ELSE statement
    (54) selection_stmt -> . IF LPAREN expression RPAREN statement ELSEIF statement
    (55) selection_stmt -> . SWITCH LPAREN var_val RPAREN statement
    (56) selection_stmt -> . CASE NUMBER COLON statement BREAK SEMICOLON
    (57) selection_stmt -> . DEFAULT COLON statement BREAK SEMICOLON
    (58) selection_stmt -> . VARIABLE relop VARIABLE QUESTIONMARK expression COLON expression SEMICOLON
    (59) iteration_stmt -> . WHILE LPAREN expression RPAREN statement
    (60) iteration_stmt -> . FOR LPAREN var_declaration2 SEMICOLON expression SEMICOLON additive_expression RPAREN statement
    (61) iteration_stmt -> . FOREACH LPAREN var_val AS var_val RPAREN statement
    (12) show_in_screen -> . ECHO var_val SEMICOLON
    (13) show_in_screen -> . ECHO CADENA1 SEMICOLON
    (14) show_in_screen -> . ECHO selection_stmt
    (62) return_stmt -> . RETURN SEMICOLON
    (63) return_stmt -> . RETURN expression SEMICOLON
    (64) expression -> . var_val EQUAL expression
    (65) expression -> . simple_expression
    (66) var_val -> . VARIABLE
    (67) var_val -> . VARIABLE LBRACKET expression RBRACKET
    (68) simple_expression -> . additive_expression relop additive_expression
    (69) simple_expression -> . additive_expression
    (77) additive_expression -> . additive_expression addop term
    (78) additive_expression -> . term
    (79) additive_expression -> . term MINUSMINUS
    (80) additive_expression -> . term PLUSPLUS
    (81) additive_expression -> . addop term
    (84) term -> . term mulop factor
    (85) term -> . factor
    (86) term -> . CADENA1
    (87) term -> . CADENA2
    (82) addop -> . PLUS
    (83) addop -> . MINUS
    (90) factor -> . LPAREN expression RPAREN
    (91) factor -> . var_val
    (92) factor -> . call
    (93) factor -> . NUMBER
    (94) call -> . VARIABLE2 LPAREN args RPAREN

    SEMICOLON       shift and go to state 13
    LBLOCK          shift and go to state 114
    IF              shift and go to state 16
    SWITCH          shift and go to state 19
    CASE            shift and go to state 21
    DEFAULT         shift and go to state 22
    VARIABLE        shift and go to state 115
    WHILE           shift and go to state 23
    FOR             shift and go to state 24
    FOREACH         shift and go to state 26
    ECHO            shift and go to state 29
    RETURN          shift and go to state 116
    CADENA1         shift and go to state 61
    CADENA2         shift and go to state 36
    PLUS            shift and go to state 37
    MINUS           shift and go to state 38
    LPAREN          shift and go to state 17
    NUMBER          shift and go to state 62
    VARIABLE2       shift and go to state 28

    expression                     shift and go to state 18
    statement                      shift and go to state 197
    expression_stmt                shift and go to state 108
    compount_stmt                  shift and go to state 109
    selection_stmt                 shift and go to state 110
    iteration_stmt                 shift and go to state 111
    show_in_screen                 shift and go to state 112
    return_stmt                    shift and go to state 113
    var_val                        shift and go to state 20
    additive_expression            shift and go to state 25
    simple_expression              shift and go to state 32
    addop                          shift and go to state 33
    term                           shift and go to state 34
    factor                         shift and go to state 35
    call                           shift and go to state 39

state 186

    (56) selection_stmt -> CASE NUMBER COLON statement BREAK SEMICOLON .

    QUESTIONMARK    reduce using rule 56 (selection_stmt -> CASE NUMBER COLON statement BREAK SEMICOLON .)
    VARIABLE        reduce using rule 56 (selection_stmt -> CASE NUMBER COLON statement BREAK SEMICOLON .)
    IF              reduce using rule 56 (selection_stmt -> CASE NUMBER COLON statement BREAK SEMICOLON .)
    SWITCH          reduce using rule 56 (selection_stmt -> CASE NUMBER COLON statement BREAK SEMICOLON .)
    CASE            reduce using rule 56 (selection_stmt -> CASE NUMBER COLON statement BREAK SEMICOLON .)
    DEFAULT         reduce using rule 56 (selection_stmt -> CASE NUMBER COLON statement BREAK SEMICOLON .)
    WHILE           reduce using rule 56 (selection_stmt -> CASE NUMBER COLON statement BREAK SEMICOLON .)
    FOR             reduce using rule 56 (selection_stmt -> CASE NUMBER COLON statement BREAK SEMICOLON .)
    FOREACH         reduce using rule 56 (selection_stmt -> CASE NUMBER COLON statement BREAK SEMICOLON .)
    FUNCTION        reduce using rule 56 (selection_stmt -> CASE NUMBER COLON statement BREAK SEMICOLON .)
    ECHO            reduce using rule 56 (selection_stmt -> CASE NUMBER COLON statement BREAK SEMICOLON .)
    SEMICOLON       reduce using rule 56 (selection_stmt -> CASE NUMBER COLON statement BREAK SEMICOLON .)
    COMMA           reduce using rule 56 (selection_stmt -> CASE NUMBER COLON statement BREAK SEMICOLON .)
    NUMBER          reduce using rule 56 (selection_stmt -> CASE NUMBER COLON statement BREAK SEMICOLON .)
    CADENA1         reduce using rule 56 (selection_stmt -> CASE NUMBER COLON statement BREAK SEMICOLON .)
    CADENA2         reduce using rule 56 (selection_stmt -> CASE NUMBER COLON statement BREAK SEMICOLON .)
    PLUS            reduce using rule 56 (selection_stmt -> CASE NUMBER COLON statement BREAK SEMICOLON .)
    MINUS           reduce using rule 56 (selection_stmt -> CASE NUMBER COLON statement BREAK SEMICOLON .)
    LPAREN          reduce using rule 56 (selection_stmt -> CASE NUMBER COLON statement BREAK SEMICOLON .)
    VARIABLE2       reduce using rule 56 (selection_stmt -> CASE NUMBER COLON statement BREAK SEMICOLON .)
    BREAK           reduce using rule 56 (selection_stmt -> CASE NUMBER COLON statement BREAK SEMICOLON .)
    ELSE            reduce using rule 56 (selection_stmt -> CASE NUMBER COLON statement BREAK SEMICOLON .)
    ELSEIF          reduce using rule 56 (selection_stmt -> CASE NUMBER COLON statement BREAK SEMICOLON .)
    RBLOCK          reduce using rule 56 (selection_stmt -> CASE NUMBER COLON statement BREAK SEMICOLON .)
    LBLOCK          reduce using rule 56 (selection_stmt -> CASE NUMBER COLON statement BREAK SEMICOLON .)
    RETURN          reduce using rule 56 (selection_stmt -> CASE NUMBER COLON statement BREAK SEMICOLON .)


state 187

    (38) compount_stmt -> LBLOCK local_declarations statement_list RBLOCK .

    BREAK           reduce using rule 38 (compount_stmt -> LBLOCK local_declarations statement_list RBLOCK .)
    QUESTIONMARK    reduce using rule 38 (compount_stmt -> LBLOCK local_declarations statement_list RBLOCK .)
    VARIABLE        reduce using rule 38 (compount_stmt -> LBLOCK local_declarations statement_list RBLOCK .)
    IF              reduce using rule 38 (compount_stmt -> LBLOCK local_declarations statement_list RBLOCK .)
    SWITCH          reduce using rule 38 (compount_stmt -> LBLOCK local_declarations statement_list RBLOCK .)
    CASE            reduce using rule 38 (compount_stmt -> LBLOCK local_declarations statement_list RBLOCK .)
    DEFAULT         reduce using rule 38 (compount_stmt -> LBLOCK local_declarations statement_list RBLOCK .)
    WHILE           reduce using rule 38 (compount_stmt -> LBLOCK local_declarations statement_list RBLOCK .)
    FOR             reduce using rule 38 (compount_stmt -> LBLOCK local_declarations statement_list RBLOCK .)
    FOREACH         reduce using rule 38 (compount_stmt -> LBLOCK local_declarations statement_list RBLOCK .)
    FUNCTION        reduce using rule 38 (compount_stmt -> LBLOCK local_declarations statement_list RBLOCK .)
    ECHO            reduce using rule 38 (compount_stmt -> LBLOCK local_declarations statement_list RBLOCK .)
    SEMICOLON       reduce using rule 38 (compount_stmt -> LBLOCK local_declarations statement_list RBLOCK .)
    COMMA           reduce using rule 38 (compount_stmt -> LBLOCK local_declarations statement_list RBLOCK .)
    NUMBER          reduce using rule 38 (compount_stmt -> LBLOCK local_declarations statement_list RBLOCK .)
    CADENA1         reduce using rule 38 (compount_stmt -> LBLOCK local_declarations statement_list RBLOCK .)
    CADENA2         reduce using rule 38 (compount_stmt -> LBLOCK local_declarations statement_list RBLOCK .)
    PLUS            reduce using rule 38 (compount_stmt -> LBLOCK local_declarations statement_list RBLOCK .)
    MINUS           reduce using rule 38 (compount_stmt -> LBLOCK local_declarations statement_list RBLOCK .)
    LPAREN          reduce using rule 38 (compount_stmt -> LBLOCK local_declarations statement_list RBLOCK .)
    VARIABLE2       reduce using rule 38 (compount_stmt -> LBLOCK local_declarations statement_list RBLOCK .)
    ELSE            reduce using rule 38 (compount_stmt -> LBLOCK local_declarations statement_list RBLOCK .)
    ELSEIF          reduce using rule 38 (compount_stmt -> LBLOCK local_declarations statement_list RBLOCK .)
    RBLOCK          reduce using rule 38 (compount_stmt -> LBLOCK local_declarations statement_list RBLOCK .)
    LBLOCK          reduce using rule 38 (compount_stmt -> LBLOCK local_declarations statement_list RBLOCK .)
    RETURN          reduce using rule 38 (compount_stmt -> LBLOCK local_declarations statement_list RBLOCK .)


state 188

    (41) statement_list -> statement_list statement .

    RBLOCK          reduce using rule 41 (statement_list -> statement_list statement .)
    SEMICOLON       reduce using rule 41 (statement_list -> statement_list statement .)
    LBLOCK          reduce using rule 41 (statement_list -> statement_list statement .)
    IF              reduce using rule 41 (statement_list -> statement_list statement .)
    SWITCH          reduce using rule 41 (statement_list -> statement_list statement .)
    CASE            reduce using rule 41 (statement_list -> statement_list statement .)
    DEFAULT         reduce using rule 41 (statement_list -> statement_list statement .)
    VARIABLE        reduce using rule 41 (statement_list -> statement_list statement .)
    WHILE           reduce using rule 41 (statement_list -> statement_list statement .)
    FOR             reduce using rule 41 (statement_list -> statement_list statement .)
    FOREACH         reduce using rule 41 (statement_list -> statement_list statement .)
    ECHO            reduce using rule 41 (statement_list -> statement_list statement .)
    RETURN          reduce using rule 41 (statement_list -> statement_list statement .)
    CADENA1         reduce using rule 41 (statement_list -> statement_list statement .)
    CADENA2         reduce using rule 41 (statement_list -> statement_list statement .)
    PLUS            reduce using rule 41 (statement_list -> statement_list statement .)
    MINUS           reduce using rule 41 (statement_list -> statement_list statement .)
    LPAREN          reduce using rule 41 (statement_list -> statement_list statement .)
    NUMBER          reduce using rule 41 (statement_list -> statement_list statement .)
    VARIABLE2       reduce using rule 41 (statement_list -> statement_list statement .)


state 189

    (16) var_declaration -> VARIABLE LBRACKET NUMBER . RBRACKET SEMICOLON

    RBRACKET        shift and go to state 131


state 190

    (60) iteration_stmt -> FOR LPAREN var_declaration2 SEMICOLON expression SEMICOLON . additive_expression RPAREN statement
    (77) additive_expression -> . additive_expression addop term
    (78) additive_expression -> . term
    (79) additive_expression -> . term MINUSMINUS
    (80) additive_expression -> . term PLUSPLUS
    (81) additive_expression -> . addop term
    (84) term -> . term mulop factor
    (85) term -> . factor
    (86) term -> . CADENA1
    (87) term -> . CADENA2
    (82) addop -> . PLUS
    (83) addop -> . MINUS
    (90) factor -> . LPAREN expression RPAREN
    (91) factor -> . var_val
    (92) factor -> . call
    (93) factor -> . NUMBER
    (66) var_val -> . VARIABLE
    (67) var_val -> . VARIABLE LBRACKET expression RBRACKET
    (94) call -> . VARIABLE2 LPAREN args RPAREN

    CADENA1         shift and go to state 61
    CADENA2         shift and go to state 36
    PLUS            shift and go to state 37
    MINUS           shift and go to state 38
    LPAREN          shift and go to state 17
    NUMBER          shift and go to state 62
    VARIABLE        shift and go to state 60
    VARIABLE2       shift and go to state 28

    additive_expression            shift and go to state 198
    addop                          shift and go to state 33
    term                           shift and go to state 34
    factor                         shift and go to state 35
    var_val                        shift and go to state 82
    call                           shift and go to state 39

state 191

    (61) iteration_stmt -> FOREACH LPAREN var_val AS var_val RPAREN . statement
    (44) statement -> . expression_stmt
    (45) statement -> . compount_stmt
    (46) statement -> . selection_stmt
    (47) statement -> . iteration_stmt
    (48) statement -> . show_in_screen
    (49) statement -> . return_stmt
    (50) expression_stmt -> . expression SEMICOLON
    (51) expression_stmt -> . SEMICOLON
    (38) compount_stmt -> . LBLOCK local_declarations statement_list RBLOCK
    (52) selection_stmt -> . IF LPAREN expression RPAREN statement
    (53) selection_stmt -> . IF LPAREN expression RPAREN statement ELSE statement
    (54) selection_stmt -> . IF LPAREN expression RPAREN statement ELSEIF statement
    (55) selection_stmt -> . SWITCH LPAREN var_val RPAREN statement
    (56) selection_stmt -> . CASE NUMBER COLON statement BREAK SEMICOLON
    (57) selection_stmt -> . DEFAULT COLON statement BREAK SEMICOLON
    (58) selection_stmt -> . VARIABLE relop VARIABLE QUESTIONMARK expression COLON expression SEMICOLON
    (59) iteration_stmt -> . WHILE LPAREN expression RPAREN statement
    (60) iteration_stmt -> . FOR LPAREN var_declaration2 SEMICOLON expression SEMICOLON additive_expression RPAREN statement
    (61) iteration_stmt -> . FOREACH LPAREN var_val AS var_val RPAREN statement
    (12) show_in_screen -> . ECHO var_val SEMICOLON
    (13) show_in_screen -> . ECHO CADENA1 SEMICOLON
    (14) show_in_screen -> . ECHO selection_stmt
    (62) return_stmt -> . RETURN SEMICOLON
    (63) return_stmt -> . RETURN expression SEMICOLON
    (64) expression -> . var_val EQUAL expression
    (65) expression -> . simple_expression
    (66) var_val -> . VARIABLE
    (67) var_val -> . VARIABLE LBRACKET expression RBRACKET
    (68) simple_expression -> . additive_expression relop additive_expression
    (69) simple_expression -> . additive_expression
    (77) additive_expression -> . additive_expression addop term
    (78) additive_expression -> . term
    (79) additive_expression -> . term MINUSMINUS
    (80) additive_expression -> . term PLUSPLUS
    (81) additive_expression -> . addop term
    (84) term -> . term mulop factor
    (85) term -> . factor
    (86) term -> . CADENA1
    (87) term -> . CADENA2
    (82) addop -> . PLUS
    (83) addop -> . MINUS
    (90) factor -> . LPAREN expression RPAREN
    (91) factor -> . var_val
    (92) factor -> . call
    (93) factor -> . NUMBER
    (94) call -> . VARIABLE2 LPAREN args RPAREN

    SEMICOLON       shift and go to state 13
    LBLOCK          shift and go to state 114
    IF              shift and go to state 16
    SWITCH          shift and go to state 19
    CASE            shift and go to state 21
    DEFAULT         shift and go to state 22
    VARIABLE        shift and go to state 115
    WHILE           shift and go to state 23
    FOR             shift and go to state 24
    FOREACH         shift and go to state 26
    ECHO            shift and go to state 29
    RETURN          shift and go to state 116
    CADENA1         shift and go to state 61
    CADENA2         shift and go to state 36
    PLUS            shift and go to state 37
    MINUS           shift and go to state 38
    LPAREN          shift and go to state 17
    NUMBER          shift and go to state 62
    VARIABLE2       shift and go to state 28

    var_val                        shift and go to state 20
    statement                      shift and go to state 199
    expression_stmt                shift and go to state 108
    compount_stmt                  shift and go to state 109
    selection_stmt                 shift and go to state 110
    iteration_stmt                 shift and go to state 111
    show_in_screen                 shift and go to state 112
    return_stmt                    shift and go to state 113
    expression                     shift and go to state 18
    additive_expression            shift and go to state 25
    simple_expression              shift and go to state 32
    addop                          shift and go to state 33
    term                           shift and go to state 34
    factor                         shift and go to state 35
    call                           shift and go to state 39

state 192

    (31) fun_declaration -> FUNCTION VARIABLE2 LPAREN params RPAREN statement .

    QUESTIONMARK    reduce using rule 31 (fun_declaration -> FUNCTION VARIABLE2 LPAREN params RPAREN statement .)
    VARIABLE        reduce using rule 31 (fun_declaration -> FUNCTION VARIABLE2 LPAREN params RPAREN statement .)
    IF              reduce using rule 31 (fun_declaration -> FUNCTION VARIABLE2 LPAREN params RPAREN statement .)
    SWITCH          reduce using rule 31 (fun_declaration -> FUNCTION VARIABLE2 LPAREN params RPAREN statement .)
    CASE            reduce using rule 31 (fun_declaration -> FUNCTION VARIABLE2 LPAREN params RPAREN statement .)
    DEFAULT         reduce using rule 31 (fun_declaration -> FUNCTION VARIABLE2 LPAREN params RPAREN statement .)
    WHILE           reduce using rule 31 (fun_declaration -> FUNCTION VARIABLE2 LPAREN params RPAREN statement .)
    FOR             reduce using rule 31 (fun_declaration -> FUNCTION VARIABLE2 LPAREN params RPAREN statement .)
    FOREACH         reduce using rule 31 (fun_declaration -> FUNCTION VARIABLE2 LPAREN params RPAREN statement .)
    FUNCTION        reduce using rule 31 (fun_declaration -> FUNCTION VARIABLE2 LPAREN params RPAREN statement .)
    ECHO            reduce using rule 31 (fun_declaration -> FUNCTION VARIABLE2 LPAREN params RPAREN statement .)
    SEMICOLON       reduce using rule 31 (fun_declaration -> FUNCTION VARIABLE2 LPAREN params RPAREN statement .)
    COMMA           reduce using rule 31 (fun_declaration -> FUNCTION VARIABLE2 LPAREN params RPAREN statement .)
    NUMBER          reduce using rule 31 (fun_declaration -> FUNCTION VARIABLE2 LPAREN params RPAREN statement .)
    CADENA1         reduce using rule 31 (fun_declaration -> FUNCTION VARIABLE2 LPAREN params RPAREN statement .)
    CADENA2         reduce using rule 31 (fun_declaration -> FUNCTION VARIABLE2 LPAREN params RPAREN statement .)
    PLUS            reduce using rule 31 (fun_declaration -> FUNCTION VARIABLE2 LPAREN params RPAREN statement .)
    MINUS           reduce using rule 31 (fun_declaration -> FUNCTION VARIABLE2 LPAREN params RPAREN statement .)
    LPAREN          reduce using rule 31 (fun_declaration -> FUNCTION VARIABLE2 LPAREN params RPAREN statement .)
    VARIABLE2       reduce using rule 31 (fun_declaration -> FUNCTION VARIABLE2 LPAREN params RPAREN statement .)


state 193

    (33) param_list -> param_list COMMA param .

    COMMA           reduce using rule 33 (param_list -> param_list COMMA param .)
    RPAREN          reduce using rule 33 (param_list -> param_list COMMA param .)


state 194

    (36) param -> VARIABLE LBRACKET RBRACKET .

    COMMA           reduce using rule 36 (param -> VARIABLE LBRACKET RBRACKET .)
    RPAREN          reduce using rule 36 (param -> VARIABLE LBRACKET RBRACKET .)


state 195

    (58) selection_stmt -> VARIABLE relop VARIABLE QUESTIONMARK expression COLON expression . SEMICOLON

    SEMICOLON       shift and go to state 200


state 196

    (53) selection_stmt -> IF LPAREN expression RPAREN statement ELSE statement .

    QUESTIONMARK    reduce using rule 53 (selection_stmt -> IF LPAREN expression RPAREN statement ELSE statement .)
    VARIABLE        reduce using rule 53 (selection_stmt -> IF LPAREN expression RPAREN statement ELSE statement .)
    IF              reduce using rule 53 (selection_stmt -> IF LPAREN expression RPAREN statement ELSE statement .)
    SWITCH          reduce using rule 53 (selection_stmt -> IF LPAREN expression RPAREN statement ELSE statement .)
    CASE            reduce using rule 53 (selection_stmt -> IF LPAREN expression RPAREN statement ELSE statement .)
    DEFAULT         reduce using rule 53 (selection_stmt -> IF LPAREN expression RPAREN statement ELSE statement .)
    WHILE           reduce using rule 53 (selection_stmt -> IF LPAREN expression RPAREN statement ELSE statement .)
    FOR             reduce using rule 53 (selection_stmt -> IF LPAREN expression RPAREN statement ELSE statement .)
    FOREACH         reduce using rule 53 (selection_stmt -> IF LPAREN expression RPAREN statement ELSE statement .)
    FUNCTION        reduce using rule 53 (selection_stmt -> IF LPAREN expression RPAREN statement ELSE statement .)
    ECHO            reduce using rule 53 (selection_stmt -> IF LPAREN expression RPAREN statement ELSE statement .)
    SEMICOLON       reduce using rule 53 (selection_stmt -> IF LPAREN expression RPAREN statement ELSE statement .)
    COMMA           reduce using rule 53 (selection_stmt -> IF LPAREN expression RPAREN statement ELSE statement .)
    NUMBER          reduce using rule 53 (selection_stmt -> IF LPAREN expression RPAREN statement ELSE statement .)
    CADENA1         reduce using rule 53 (selection_stmt -> IF LPAREN expression RPAREN statement ELSE statement .)
    CADENA2         reduce using rule 53 (selection_stmt -> IF LPAREN expression RPAREN statement ELSE statement .)
    PLUS            reduce using rule 53 (selection_stmt -> IF LPAREN expression RPAREN statement ELSE statement .)
    MINUS           reduce using rule 53 (selection_stmt -> IF LPAREN expression RPAREN statement ELSE statement .)
    LPAREN          reduce using rule 53 (selection_stmt -> IF LPAREN expression RPAREN statement ELSE statement .)
    VARIABLE2       reduce using rule 53 (selection_stmt -> IF LPAREN expression RPAREN statement ELSE statement .)
    BREAK           reduce using rule 53 (selection_stmt -> IF LPAREN expression RPAREN statement ELSE statement .)
    ELSE            reduce using rule 53 (selection_stmt -> IF LPAREN expression RPAREN statement ELSE statement .)
    ELSEIF          reduce using rule 53 (selection_stmt -> IF LPAREN expression RPAREN statement ELSE statement .)
    RBLOCK          reduce using rule 53 (selection_stmt -> IF LPAREN expression RPAREN statement ELSE statement .)
    LBLOCK          reduce using rule 53 (selection_stmt -> IF LPAREN expression RPAREN statement ELSE statement .)
    RETURN          reduce using rule 53 (selection_stmt -> IF LPAREN expression RPAREN statement ELSE statement .)


state 197

    (54) selection_stmt -> IF LPAREN expression RPAREN statement ELSEIF statement .

    QUESTIONMARK    reduce using rule 54 (selection_stmt -> IF LPAREN expression RPAREN statement ELSEIF statement .)
    VARIABLE        reduce using rule 54 (selection_stmt -> IF LPAREN expression RPAREN statement ELSEIF statement .)
    IF              reduce using rule 54 (selection_stmt -> IF LPAREN expression RPAREN statement ELSEIF statement .)
    SWITCH          reduce using rule 54 (selection_stmt -> IF LPAREN expression RPAREN statement ELSEIF statement .)
    CASE            reduce using rule 54 (selection_stmt -> IF LPAREN expression RPAREN statement ELSEIF statement .)
    DEFAULT         reduce using rule 54 (selection_stmt -> IF LPAREN expression RPAREN statement ELSEIF statement .)
    WHILE           reduce using rule 54 (selection_stmt -> IF LPAREN expression RPAREN statement ELSEIF statement .)
    FOR             reduce using rule 54 (selection_stmt -> IF LPAREN expression RPAREN statement ELSEIF statement .)
    FOREACH         reduce using rule 54 (selection_stmt -> IF LPAREN expression RPAREN statement ELSEIF statement .)
    FUNCTION        reduce using rule 54 (selection_stmt -> IF LPAREN expression RPAREN statement ELSEIF statement .)
    ECHO            reduce using rule 54 (selection_stmt -> IF LPAREN expression RPAREN statement ELSEIF statement .)
    SEMICOLON       reduce using rule 54 (selection_stmt -> IF LPAREN expression RPAREN statement ELSEIF statement .)
    COMMA           reduce using rule 54 (selection_stmt -> IF LPAREN expression RPAREN statement ELSEIF statement .)
    NUMBER          reduce using rule 54 (selection_stmt -> IF LPAREN expression RPAREN statement ELSEIF statement .)
    CADENA1         reduce using rule 54 (selection_stmt -> IF LPAREN expression RPAREN statement ELSEIF statement .)
    CADENA2         reduce using rule 54 (selection_stmt -> IF LPAREN expression RPAREN statement ELSEIF statement .)
    PLUS            reduce using rule 54 (selection_stmt -> IF LPAREN expression RPAREN statement ELSEIF statement .)
    MINUS           reduce using rule 54 (selection_stmt -> IF LPAREN expression RPAREN statement ELSEIF statement .)
    LPAREN          reduce using rule 54 (selection_stmt -> IF LPAREN expression RPAREN statement ELSEIF statement .)
    VARIABLE2       reduce using rule 54 (selection_stmt -> IF LPAREN expression RPAREN statement ELSEIF statement .)
    BREAK           reduce using rule 54 (selection_stmt -> IF LPAREN expression RPAREN statement ELSEIF statement .)
    ELSE            reduce using rule 54 (selection_stmt -> IF LPAREN expression RPAREN statement ELSEIF statement .)
    ELSEIF          reduce using rule 54 (selection_stmt -> IF LPAREN expression RPAREN statement ELSEIF statement .)
    RBLOCK          reduce using rule 54 (selection_stmt -> IF LPAREN expression RPAREN statement ELSEIF statement .)
    LBLOCK          reduce using rule 54 (selection_stmt -> IF LPAREN expression RPAREN statement ELSEIF statement .)
    RETURN          reduce using rule 54 (selection_stmt -> IF LPAREN expression RPAREN statement ELSEIF statement .)


state 198

    (60) iteration_stmt -> FOR LPAREN var_declaration2 SEMICOLON expression SEMICOLON additive_expression . RPAREN statement
    (77) additive_expression -> additive_expression . addop term
    (82) addop -> . PLUS
    (83) addop -> . MINUS

    RPAREN          shift and go to state 201
    PLUS            shift and go to state 37
    MINUS           shift and go to state 38

    addop                          shift and go to state 71

state 199

    (61) iteration_stmt -> FOREACH LPAREN var_val AS var_val RPAREN statement .

    QUESTIONMARK    reduce using rule 61 (iteration_stmt -> FOREACH LPAREN var_val AS var_val RPAREN statement .)
    VARIABLE        reduce using rule 61 (iteration_stmt -> FOREACH LPAREN var_val AS var_val RPAREN statement .)
    IF              reduce using rule 61 (iteration_stmt -> FOREACH LPAREN var_val AS var_val RPAREN statement .)
    SWITCH          reduce using rule 61 (iteration_stmt -> FOREACH LPAREN var_val AS var_val RPAREN statement .)
    CASE            reduce using rule 61 (iteration_stmt -> FOREACH LPAREN var_val AS var_val RPAREN statement .)
    DEFAULT         reduce using rule 61 (iteration_stmt -> FOREACH LPAREN var_val AS var_val RPAREN statement .)
    WHILE           reduce using rule 61 (iteration_stmt -> FOREACH LPAREN var_val AS var_val RPAREN statement .)
    FOR             reduce using rule 61 (iteration_stmt -> FOREACH LPAREN var_val AS var_val RPAREN statement .)
    FOREACH         reduce using rule 61 (iteration_stmt -> FOREACH LPAREN var_val AS var_val RPAREN statement .)
    FUNCTION        reduce using rule 61 (iteration_stmt -> FOREACH LPAREN var_val AS var_val RPAREN statement .)
    ECHO            reduce using rule 61 (iteration_stmt -> FOREACH LPAREN var_val AS var_val RPAREN statement .)
    SEMICOLON       reduce using rule 61 (iteration_stmt -> FOREACH LPAREN var_val AS var_val RPAREN statement .)
    COMMA           reduce using rule 61 (iteration_stmt -> FOREACH LPAREN var_val AS var_val RPAREN statement .)
    NUMBER          reduce using rule 61 (iteration_stmt -> FOREACH LPAREN var_val AS var_val RPAREN statement .)
    CADENA1         reduce using rule 61 (iteration_stmt -> FOREACH LPAREN var_val AS var_val RPAREN statement .)
    CADENA2         reduce using rule 61 (iteration_stmt -> FOREACH LPAREN var_val AS var_val RPAREN statement .)
    PLUS            reduce using rule 61 (iteration_stmt -> FOREACH LPAREN var_val AS var_val RPAREN statement .)
    MINUS           reduce using rule 61 (iteration_stmt -> FOREACH LPAREN var_val AS var_val RPAREN statement .)
    LPAREN          reduce using rule 61 (iteration_stmt -> FOREACH LPAREN var_val AS var_val RPAREN statement .)
    VARIABLE2       reduce using rule 61 (iteration_stmt -> FOREACH LPAREN var_val AS var_val RPAREN statement .)
    BREAK           reduce using rule 61 (iteration_stmt -> FOREACH LPAREN var_val AS var_val RPAREN statement .)
    ELSE            reduce using rule 61 (iteration_stmt -> FOREACH LPAREN var_val AS var_val RPAREN statement .)
    ELSEIF          reduce using rule 61 (iteration_stmt -> FOREACH LPAREN var_val AS var_val RPAREN statement .)
    RBLOCK          reduce using rule 61 (iteration_stmt -> FOREACH LPAREN var_val AS var_val RPAREN statement .)
    LBLOCK          reduce using rule 61 (iteration_stmt -> FOREACH LPAREN var_val AS var_val RPAREN statement .)
    RETURN          reduce using rule 61 (iteration_stmt -> FOREACH LPAREN var_val AS var_val RPAREN statement .)


state 200

    (58) selection_stmt -> VARIABLE relop VARIABLE QUESTIONMARK expression COLON expression SEMICOLON .

    QUESTIONMARK    reduce using rule 58 (selection_stmt -> VARIABLE relop VARIABLE QUESTIONMARK expression COLON expression SEMICOLON .)
    VARIABLE        reduce using rule 58 (selection_stmt -> VARIABLE relop VARIABLE QUESTIONMARK expression COLON expression SEMICOLON .)
    IF              reduce using rule 58 (selection_stmt -> VARIABLE relop VARIABLE QUESTIONMARK expression COLON expression SEMICOLON .)
    SWITCH          reduce using rule 58 (selection_stmt -> VARIABLE relop VARIABLE QUESTIONMARK expression COLON expression SEMICOLON .)
    CASE            reduce using rule 58 (selection_stmt -> VARIABLE relop VARIABLE QUESTIONMARK expression COLON expression SEMICOLON .)
    DEFAULT         reduce using rule 58 (selection_stmt -> VARIABLE relop VARIABLE QUESTIONMARK expression COLON expression SEMICOLON .)
    WHILE           reduce using rule 58 (selection_stmt -> VARIABLE relop VARIABLE QUESTIONMARK expression COLON expression SEMICOLON .)
    FOR             reduce using rule 58 (selection_stmt -> VARIABLE relop VARIABLE QUESTIONMARK expression COLON expression SEMICOLON .)
    FOREACH         reduce using rule 58 (selection_stmt -> VARIABLE relop VARIABLE QUESTIONMARK expression COLON expression SEMICOLON .)
    FUNCTION        reduce using rule 58 (selection_stmt -> VARIABLE relop VARIABLE QUESTIONMARK expression COLON expression SEMICOLON .)
    ECHO            reduce using rule 58 (selection_stmt -> VARIABLE relop VARIABLE QUESTIONMARK expression COLON expression SEMICOLON .)
    SEMICOLON       reduce using rule 58 (selection_stmt -> VARIABLE relop VARIABLE QUESTIONMARK expression COLON expression SEMICOLON .)
    COMMA           reduce using rule 58 (selection_stmt -> VARIABLE relop VARIABLE QUESTIONMARK expression COLON expression SEMICOLON .)
    NUMBER          reduce using rule 58 (selection_stmt -> VARIABLE relop VARIABLE QUESTIONMARK expression COLON expression SEMICOLON .)
    CADENA1         reduce using rule 58 (selection_stmt -> VARIABLE relop VARIABLE QUESTIONMARK expression COLON expression SEMICOLON .)
    CADENA2         reduce using rule 58 (selection_stmt -> VARIABLE relop VARIABLE QUESTIONMARK expression COLON expression SEMICOLON .)
    PLUS            reduce using rule 58 (selection_stmt -> VARIABLE relop VARIABLE QUESTIONMARK expression COLON expression SEMICOLON .)
    MINUS           reduce using rule 58 (selection_stmt -> VARIABLE relop VARIABLE QUESTIONMARK expression COLON expression SEMICOLON .)
    LPAREN          reduce using rule 58 (selection_stmt -> VARIABLE relop VARIABLE QUESTIONMARK expression COLON expression SEMICOLON .)
    VARIABLE2       reduce using rule 58 (selection_stmt -> VARIABLE relop VARIABLE QUESTIONMARK expression COLON expression SEMICOLON .)
    BREAK           reduce using rule 58 (selection_stmt -> VARIABLE relop VARIABLE QUESTIONMARK expression COLON expression SEMICOLON .)
    ELSE            reduce using rule 58 (selection_stmt -> VARIABLE relop VARIABLE QUESTIONMARK expression COLON expression SEMICOLON .)
    ELSEIF          reduce using rule 58 (selection_stmt -> VARIABLE relop VARIABLE QUESTIONMARK expression COLON expression SEMICOLON .)
    RBLOCK          reduce using rule 58 (selection_stmt -> VARIABLE relop VARIABLE QUESTIONMARK expression COLON expression SEMICOLON .)
    LBLOCK          reduce using rule 58 (selection_stmt -> VARIABLE relop VARIABLE QUESTIONMARK expression COLON expression SEMICOLON .)
    RETURN          reduce using rule 58 (selection_stmt -> VARIABLE relop VARIABLE QUESTIONMARK expression COLON expression SEMICOLON .)


state 201

    (60) iteration_stmt -> FOR LPAREN var_declaration2 SEMICOLON expression SEMICOLON additive_expression RPAREN . statement
    (44) statement -> . expression_stmt
    (45) statement -> . compount_stmt
    (46) statement -> . selection_stmt
    (47) statement -> . iteration_stmt
    (48) statement -> . show_in_screen
    (49) statement -> . return_stmt
    (50) expression_stmt -> . expression SEMICOLON
    (51) expression_stmt -> . SEMICOLON
    (38) compount_stmt -> . LBLOCK local_declarations statement_list RBLOCK
    (52) selection_stmt -> . IF LPAREN expression RPAREN statement
    (53) selection_stmt -> . IF LPAREN expression RPAREN statement ELSE statement
    (54) selection_stmt -> . IF LPAREN expression RPAREN statement ELSEIF statement
    (55) selection_stmt -> . SWITCH LPAREN var_val RPAREN statement
    (56) selection_stmt -> . CASE NUMBER COLON statement BREAK SEMICOLON
    (57) selection_stmt -> . DEFAULT COLON statement BREAK SEMICOLON
    (58) selection_stmt -> . VARIABLE relop VARIABLE QUESTIONMARK expression COLON expression SEMICOLON
    (59) iteration_stmt -> . WHILE LPAREN expression RPAREN statement
    (60) iteration_stmt -> . FOR LPAREN var_declaration2 SEMICOLON expression SEMICOLON additive_expression RPAREN statement
    (61) iteration_stmt -> . FOREACH LPAREN var_val AS var_val RPAREN statement
    (12) show_in_screen -> . ECHO var_val SEMICOLON
    (13) show_in_screen -> . ECHO CADENA1 SEMICOLON
    (14) show_in_screen -> . ECHO selection_stmt
    (62) return_stmt -> . RETURN SEMICOLON
    (63) return_stmt -> . RETURN expression SEMICOLON
    (64) expression -> . var_val EQUAL expression
    (65) expression -> . simple_expression
    (66) var_val -> . VARIABLE
    (67) var_val -> . VARIABLE LBRACKET expression RBRACKET
    (68) simple_expression -> . additive_expression relop additive_expression
    (69) simple_expression -> . additive_expression
    (77) additive_expression -> . additive_expression addop term
    (78) additive_expression -> . term
    (79) additive_expression -> . term MINUSMINUS
    (80) additive_expression -> . term PLUSPLUS
    (81) additive_expression -> . addop term
    (84) term -> . term mulop factor
    (85) term -> . factor
    (86) term -> . CADENA1
    (87) term -> . CADENA2
    (82) addop -> . PLUS
    (83) addop -> . MINUS
    (90) factor -> . LPAREN expression RPAREN
    (91) factor -> . var_val
    (92) factor -> . call
    (93) factor -> . NUMBER
    (94) call -> . VARIABLE2 LPAREN args RPAREN

    SEMICOLON       shift and go to state 13
    LBLOCK          shift and go to state 114
    IF              shift and go to state 16
    SWITCH          shift and go to state 19
    CASE            shift and go to state 21
    DEFAULT         shift and go to state 22
    VARIABLE        shift and go to state 115
    WHILE           shift and go to state 23
    FOR             shift and go to state 24
    FOREACH         shift and go to state 26
    ECHO            shift and go to state 29
    RETURN          shift and go to state 116
    CADENA1         shift and go to state 61
    CADENA2         shift and go to state 36
    PLUS            shift and go to state 37
    MINUS           shift and go to state 38
    LPAREN          shift and go to state 17
    NUMBER          shift and go to state 62
    VARIABLE2       shift and go to state 28

    expression                     shift and go to state 18
    additive_expression            shift and go to state 25
    statement                      shift and go to state 202
    expression_stmt                shift and go to state 108
    compount_stmt                  shift and go to state 109
    selection_stmt                 shift and go to state 110
    iteration_stmt                 shift and go to state 111
    show_in_screen                 shift and go to state 112
    return_stmt                    shift and go to state 113
    var_val                        shift and go to state 20
    simple_expression              shift and go to state 32
    addop                          shift and go to state 33
    term                           shift and go to state 34
    factor                         shift and go to state 35
    call                           shift and go to state 39

state 202

    (60) iteration_stmt -> FOR LPAREN var_declaration2 SEMICOLON expression SEMICOLON additive_expression RPAREN statement .

    QUESTIONMARK    reduce using rule 60 (iteration_stmt -> FOR LPAREN var_declaration2 SEMICOLON expression SEMICOLON additive_expression RPAREN statement .)
    VARIABLE        reduce using rule 60 (iteration_stmt -> FOR LPAREN var_declaration2 SEMICOLON expression SEMICOLON additive_expression RPAREN statement .)
    IF              reduce using rule 60 (iteration_stmt -> FOR LPAREN var_declaration2 SEMICOLON expression SEMICOLON additive_expression RPAREN statement .)
    SWITCH          reduce using rule 60 (iteration_stmt -> FOR LPAREN var_declaration2 SEMICOLON expression SEMICOLON additive_expression RPAREN statement .)
    CASE            reduce using rule 60 (iteration_stmt -> FOR LPAREN var_declaration2 SEMICOLON expression SEMICOLON additive_expression RPAREN statement .)
    DEFAULT         reduce using rule 60 (iteration_stmt -> FOR LPAREN var_declaration2 SEMICOLON expression SEMICOLON additive_expression RPAREN statement .)
    WHILE           reduce using rule 60 (iteration_stmt -> FOR LPAREN var_declaration2 SEMICOLON expression SEMICOLON additive_expression RPAREN statement .)
    FOR             reduce using rule 60 (iteration_stmt -> FOR LPAREN var_declaration2 SEMICOLON expression SEMICOLON additive_expression RPAREN statement .)
    FOREACH         reduce using rule 60 (iteration_stmt -> FOR LPAREN var_declaration2 SEMICOLON expression SEMICOLON additive_expression RPAREN statement .)
    FUNCTION        reduce using rule 60 (iteration_stmt -> FOR LPAREN var_declaration2 SEMICOLON expression SEMICOLON additive_expression RPAREN statement .)
    ECHO            reduce using rule 60 (iteration_stmt -> FOR LPAREN var_declaration2 SEMICOLON expression SEMICOLON additive_expression RPAREN statement .)
    SEMICOLON       reduce using rule 60 (iteration_stmt -> FOR LPAREN var_declaration2 SEMICOLON expression SEMICOLON additive_expression RPAREN statement .)
    COMMA           reduce using rule 60 (iteration_stmt -> FOR LPAREN var_declaration2 SEMICOLON expression SEMICOLON additive_expression RPAREN statement .)
    NUMBER          reduce using rule 60 (iteration_stmt -> FOR LPAREN var_declaration2 SEMICOLON expression SEMICOLON additive_expression RPAREN statement .)
    CADENA1         reduce using rule 60 (iteration_stmt -> FOR LPAREN var_declaration2 SEMICOLON expression SEMICOLON additive_expression RPAREN statement .)
    CADENA2         reduce using rule 60 (iteration_stmt -> FOR LPAREN var_declaration2 SEMICOLON expression SEMICOLON additive_expression RPAREN statement .)
    PLUS            reduce using rule 60 (iteration_stmt -> FOR LPAREN var_declaration2 SEMICOLON expression SEMICOLON additive_expression RPAREN statement .)
    MINUS           reduce using rule 60 (iteration_stmt -> FOR LPAREN var_declaration2 SEMICOLON expression SEMICOLON additive_expression RPAREN statement .)
    LPAREN          reduce using rule 60 (iteration_stmt -> FOR LPAREN var_declaration2 SEMICOLON expression SEMICOLON additive_expression RPAREN statement .)
    VARIABLE2       reduce using rule 60 (iteration_stmt -> FOR LPAREN var_declaration2 SEMICOLON expression SEMICOLON additive_expression RPAREN statement .)
    BREAK           reduce using rule 60 (iteration_stmt -> FOR LPAREN var_declaration2 SEMICOLON expression SEMICOLON additive_expression RPAREN statement .)
    ELSE            reduce using rule 60 (iteration_stmt -> FOR LPAREN var_declaration2 SEMICOLON expression SEMICOLON additive_expression RPAREN statement .)
    ELSEIF          reduce using rule 60 (iteration_stmt -> FOR LPAREN var_declaration2 SEMICOLON expression SEMICOLON additive_expression RPAREN statement .)
    RBLOCK          reduce using rule 60 (iteration_stmt -> FOR LPAREN var_declaration2 SEMICOLON expression SEMICOLON additive_expression RPAREN statement .)
    LBLOCK          reduce using rule 60 (iteration_stmt -> FOR LPAREN var_declaration2 SEMICOLON expression SEMICOLON additive_expression RPAREN statement .)
    RETURN          reduce using rule 60 (iteration_stmt -> FOR LPAREN var_declaration2 SEMICOLON expression SEMICOLON additive_expression RPAREN statement .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for EQUAL in state 14 resolved as shift
WARNING: shift/reduce conflict for LESS in state 14 resolved as shift
WARNING: shift/reduce conflict for LESSEQUAL in state 14 resolved as shift
WARNING: shift/reduce conflict for GREATER in state 14 resolved as shift
WARNING: shift/reduce conflict for GREATEREQUAL in state 14 resolved as shift
WARNING: shift/reduce conflict for DEQUAL in state 14 resolved as shift
WARNING: shift/reduce conflict for DISTINT in state 14 resolved as shift
WARNING: shift/reduce conflict for ISEQUAL in state 14 resolved as shift
WARNING: shift/reduce conflict for RBRACKET in state 90 resolved as shift
WARNING: shift/reduce conflict for VARIABLE in state 114 resolved as shift
WARNING: shift/reduce conflict for NUMBER in state 114 resolved as shift
WARNING: shift/reduce conflict for CADENA1 in state 114 resolved as shift
WARNING: shift/reduce conflict for LESS in state 115 resolved as shift
WARNING: shift/reduce conflict for LESSEQUAL in state 115 resolved as shift
WARNING: shift/reduce conflict for GREATER in state 115 resolved as shift
WARNING: shift/reduce conflict for GREATEREQUAL in state 115 resolved as shift
WARNING: shift/reduce conflict for DEQUAL in state 115 resolved as shift
WARNING: shift/reduce conflict for DISTINT in state 115 resolved as shift
WARNING: shift/reduce conflict for ISEQUAL in state 115 resolved as shift
WARNING: shift/reduce conflict for SEMICOLON in state 143 resolved as shift
WARNING: shift/reduce conflict for LBLOCK in state 143 resolved as shift
WARNING: shift/reduce conflict for IF in state 143 resolved as shift
WARNING: shift/reduce conflict for SWITCH in state 143 resolved as shift
WARNING: shift/reduce conflict for CASE in state 143 resolved as shift
WARNING: shift/reduce conflict for DEFAULT in state 143 resolved as shift
WARNING: shift/reduce conflict for VARIABLE in state 143 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 143 resolved as shift
WARNING: shift/reduce conflict for FOR in state 143 resolved as shift
WARNING: shift/reduce conflict for FOREACH in state 143 resolved as shift
WARNING: shift/reduce conflict for ECHO in state 143 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 143 resolved as shift
WARNING: shift/reduce conflict for CADENA1 in state 143 resolved as shift
WARNING: shift/reduce conflict for CADENA2 in state 143 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 143 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 143 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 143 resolved as shift
WARNING: shift/reduce conflict for NUMBER in state 143 resolved as shift
WARNING: shift/reduce conflict for VARIABLE2 in state 143 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 165 resolved as shift
WARNING: shift/reduce conflict for ELSEIF in state 165 resolved as shift
WARNING: reduce/reduce conflict in state 14 resolved using rule (var_declaration2 -> VARIABLE)
WARNING: rejected rule (var_val -> VARIABLE) in state 14
